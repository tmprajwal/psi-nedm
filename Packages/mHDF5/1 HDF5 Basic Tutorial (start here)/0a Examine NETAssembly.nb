(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[   2229572,      58819]
NotebookOptionsPosition[   2216451,      58474]
NotebookOutlinePosition[   2216914,      58492]
CellTagsIndexPosition[   2216871,      58489]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\[OpenCurlyDoubleQuote]examine NETAssembly\[CloseCurlyDoubleQuote]", \
"Subtitle",
 CellChangeTimes->{{3.5192928170291147`*^9, 3.5192928285487733`*^9}, {
  3.677349699285014*^9, 3.6773497034884357`*^9}}],

Cell[CellGroupData[{

Cell["Information", "Section",
 CellChangeTimes->{{3.5192929670456953`*^9, 3.519292967780737*^9}}],

Cell[TextData[{
 "This the purpose of this notebook is to load the NETAssembly and examine it \
a bit in the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " framework."
}], "Text",
 CellChangeTimes->{{3.6773497236617403`*^9, 3.677349734271867*^9}, {
  3.6773500166248426`*^9, 3.677350035391797*^9}}],

Cell[TextData[{
 "Prepared 12 August 2016 by Scot Martin for Windows 10, 64-bit, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " version 11.0.0 using switching to the new technology of P/Invoke (",
 ButtonBox["https://www.hdfgroup.org/projects/hdf.net/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.hdfgroup.org/projects/hdf.net/"], None},
  ButtonNote->"https://www.hdfgroup.org/projects/hdf.net/"],
 ")."
}], "Text",
 CellChangeTimes->{{3.5192900627995815`*^9, 3.519290073040167*^9}, {
  3.519292549013785*^9, 3.519292559290373*^9}, {3.6773360055565386`*^9, 
  3.6773360835542364`*^9}, {3.6773365151735687`*^9, 3.6773365151735687`*^9}, {
  3.677349715083008*^9, 3.677349715864313*^9}, {3.677350012155776*^9, 
  3.6773500126401863`*^9}, {3.6796673505455236`*^9, 3.679667351279955*^9}, {
  3.6796680975170145`*^9, 3.679668097720175*^9}, {3.680017778099044*^9, 
  3.680017782130593*^9}}],

Cell["Email: scot_martin@harvard.edu.", "Text",
 CellChangeTimes->{{3.6773363775442753`*^9, 3.6773363787317915`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Set up and Load NETAssembly of P/Invoke", "Section",
 CellChangeTimes->{{3.5192929340948105`*^9, 3.5192929346948442`*^9}, 
   3.5193134125426784`*^9, {3.6773497933072977`*^9, 3.677349802557951*^9}, 
   3.677349910346837*^9, {3.677350043845521*^9, 3.677350044251799*^9}}],

Cell[CellGroupData[{

Cell["Local Work Environment", "Subsection",
 CellChangeTimes->{{3.608686190253518*^9, 3.608686195258805*^9}, {
  3.6102776282052584`*^9, 3.6102776296092606`*^9}}],

Cell["Code last run on:", "Text",
 CellChangeTimes->{{3.6157256199256115`*^9, 3.6157256218132143`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateString", "[", "]"}]], "Input",
 CellChangeTimes->{{3.6157256131707993`*^9, 3.615725616852406*^9}}],

Cell[BoxData["\<\"Fri 12 Aug 2016 15:09:56\"\>"], "Output",
 CellChangeTimes->{
  3.6157256171644063`*^9, 3.615731391274553*^9, 3.615744894423354*^9, 
   3.6157565950055337`*^9, 3.615757224044239*^9, 3.61575729296516*^9, 
   3.6157589601803713`*^9, 3.6157617764649196`*^9, 3.615924919742631*^9, 
   3.615928586621581*^9, 3.615930132917329*^9, 3.6159350689324226`*^9, 
   3.616797743323756*^9, 3.6170474181751204`*^9, 3.617047668725201*^9, 
   3.6170514565407453`*^9, 3.6171478912566977`*^9, 3.6174951820945573`*^9, 
   3.6174975507834716`*^9, 3.6175357157658052`*^9, 3.6175363207956705`*^9, 
   3.617544575318635*^9, 3.6175843457009068`*^9, 3.6178085669058537`*^9, 
   3.6178087346680527`*^9, 3.617811562652573*^9, 3.6179279961304646`*^9, 
   3.6179280312770433`*^9, 3.617928616579982*^9, 3.617928867565843*^9, 
   3.617986701322382*^9, 3.618001953176346*^9, 3.618002803944764*^9, 
   3.6180806102700143`*^9, 3.6180806755753756`*^9, 3.6180872195271854`*^9, 
   3.6181689857550883`*^9, 3.6181700305477853`*^9, 3.618171535164579*^9, 
   3.618171584977146*^9, 3.6181716508340373`*^9, 3.618242465288475*^9, 
   3.6182587806532383`*^9, 3.6184858304644623`*^9, 3.6184943629920874`*^9, 
   3.6228436503216877`*^9, 3.622935239313006*^9, 3.625080969479991*^9, 
   3.6250813255283556`*^9, 3.625081903526415*^9, 3.6762988468632956`*^9, 
   3.677336239280816*^9, 3.67734975685159*^9, 3.677350082645143*^9, 
   3.6773507624621563`*^9, 3.6773515302690487`*^9, 3.6773527839717956`*^9, 
   3.677353266101074*^9, 3.6773563800035224`*^9, 3.677358778825289*^9, {
   3.679667354077004*^9, 3.6796673676248894`*^9}, 3.6800177967097797`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["$Version"], "Input",
 CellChangeTimes->{{3.6182424570853863`*^9, 3.618242467835346*^9}}],

Cell[BoxData["\<\"11.0.0 for Microsoft Windows (64-bit) (July 28, \
2016)\"\>"], "Output",
 CellChangeTimes->{{3.618242465288475*^9, 3.618242468085305*^9}, 
   3.618258780663247*^9, 3.618485830480062*^9, 3.618494363013088*^9, 
   3.622843650334688*^9, 3.622935239329007*^9, 3.625080969489991*^9, 
   3.6250813255433564`*^9, 3.625081903541416*^9, 3.6762988468783045`*^9, 
   3.677336239280816*^9, 3.677349756867216*^9, 3.6773500826607685`*^9, 
   3.677350762493409*^9, 3.6773515302690487`*^9, 3.677352783987422*^9, 
   3.677353266179204*^9, 3.6773563800614214`*^9, 3.677358778882831*^9, {
   3.67966735413951*^9, 3.679667367687395*^9}, 3.680017796725405*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "@", 
  RowBox[{"ParentDirectory", "@", 
   RowBox[{"NotebookDirectory", "[", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.608658621624937*^9, 3.6086586296533957`*^9}, 
   3.6126997557245026`*^9}],

Cell[BoxData["\<\"C:\\\\Users\\\\smartin\\\\Desktop\\\\\
HDF5WrappersForMathematica  Ver 12 August 2016\"\>"], "Output",
 CellChangeTimes->{
  3.6104721933549414`*^9, 3.6105550585369062`*^9, 3.610559956341045*^9, 
   3.610625171544265*^9, 3.610653417482814*^9, 3.6157256124843984`*^9, 
   3.6157313912121525`*^9, 3.615744894329754*^9, 3.6157565949431334`*^9, 
   3.615757223950639*^9, 3.6157572928871603`*^9, 3.615758956654765*^9, 
   3.615761776386919*^9, 3.6159249196958027`*^9, 3.615928586477442*^9, 
   3.61593013280322*^9, 3.6159350689194183`*^9, 3.616797743271708*^9, 
   3.6170474180970154`*^9, 3.6170476687095747`*^9, 3.617051456446989*^9, 
   3.6171478911175656`*^9, 3.6174951820945573`*^9, 3.617497550736593*^9, 
   3.617535715718922*^9, 3.617536320655035*^9, 3.617544575311646*^9, 
   3.617584345560259*^9, 3.6178085663873787`*^9, 3.6178087344678793`*^9, 
   3.617811562459389*^9, 3.617927995932344*^9, 3.6179280304662523`*^9, 
   3.617928616313691*^9, 3.617928867516801*^9, 3.6179867012713456`*^9, 
   3.618001953132267*^9, 3.618002803928749*^9, 3.6180806101689672`*^9, 
   3.6180806755233264`*^9, 3.618087219483143*^9, 3.6181689856980343`*^9, 
   3.6181700305417824`*^9, 3.6181715351586456`*^9, 3.6181715848300066`*^9, 
   3.6181716508270273`*^9, 3.618242465241583*^9, 3.618258780648257*^9, 
   3.618485830355262*^9, 3.6184943629300833`*^9, 3.622843650314687*^9, 
   3.6229352392440023`*^9, 3.625080969431988*^9, 3.625081325517355*^9, 
   3.6250819035184145`*^9, 3.6762988467982244`*^9, 3.677336239187028*^9, 
   3.677349756789085*^9, 3.677350082488882*^9, 3.677350762415278*^9, 
   3.677351530206544*^9, 3.6773527838936644`*^9, 3.677353266210457*^9, 
   3.6773563800694304`*^9, 3.677358778890839*^9, {3.67966735413951*^9, 
   3.679667367687395*^9}, 3.680017796756658*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Definitions", "Subsection",
 CellChangeTimes->{{3.5192918020820627`*^9, 3.5192918044061956`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"$pathToPInvoke", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Directory", "[", "]"}], ",", "\"\<HDF5.PInvoke\>\"", ",", 
     "\"\<HDF.PInvoke.dll\>\""}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.457546165609375*^9, 3.457546171265625*^9}, {
   3.457546207015625*^9, 3.457546220796875*^9}, {3.45799610640625*^9, 
   3.45799611634375*^9}, {3.468963528828125*^9, 3.4689635290625*^9}, {
   3.4823496125557427`*^9, 3.48234961459686*^9}, 3.489017891677415*^9, {
   3.5186009153340993`*^9, 3.518600938016539*^9}, {3.5186010187466807`*^9, 
   3.5186010191366816`*^9}, {3.5186011517993145`*^9, 3.518601152251715*^9}, {
   3.518601328734825*^9, 3.518601387578129*^9}, {3.519291553313834*^9, 
   3.519291554619909*^9}, {3.5192916615460243`*^9, 3.51929166601628*^9}, {
   3.519291723726581*^9, 3.519291754511342*^9}, {3.6773371143631*^9, 
   3.6773371683233986`*^9}, {3.677337425786313*^9, 3.6773374351422853`*^9}, 
   3.6773563774873824`*^9, 3.677358771862203*^9}],

Cell[BoxData["\<\"C:\\\\Users\\\\smartin\\\\Desktop\\\\\
HDF5WrappersForMathematica  Ver 12 August \
2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"], "Output",
 CellChangeTimes->{
  3.6773371832961206`*^9, {3.6773374262081547`*^9, 3.677337436267259*^9}, {
   3.67733764930569*^9, 3.6773376791329927`*^9}, 3.6773377361469193`*^9, 
   3.677350088504933*^9, 3.677350762493409*^9, 3.6773515302846746`*^9, 
   3.677352784003048*^9, 3.677353266241709*^9, 3.6773563800759387`*^9, 
   3.6773587788988466`*^9, {3.6796673541551375`*^9, 3.6796673677030373`*^9}, 
   3.6800177967722845`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Load the Assembly", "Subsection",
 CellChangeTimes->{{3.5192918020820627`*^9, 3.5192918044061956`*^9}, {
  3.677349894689478*^9, 3.677349897564681*^9}}],

Cell[TextData[{
 "Inclusion of {\[OpenCurlyDoubleQuote]NETLink`\[CloseCurlyDoubleQuote]} is \
part of documentation of how to access .NET in Mathematica. The inclusion in \
BeginPackage[ ] has an implicit Needs[ ].\n",
 ButtonBox["http://reference.wolfram.com/language/NETLink/tutorial/\
CallingNETFromTheWolframLanguage.html#23489",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/NETLink/tutorial/\
CallingNETFromTheWolframLanguage.html#23489"], None},
  ButtonNote->
   "http://reference.wolfram.com/language/NETLink/tutorial/\
CallingNETFromTheWolframLanguage.html#23489"]
}], "Text",
 CellChangeTimes->{{3.677336880784587*^9, 3.677336903242653*^9}, {
  3.67733696903395*^9, 3.677337001103253*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<NETLink`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.6773498431389523`*^9, 3.6773498511238923`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"assembly", "=", 
  RowBox[{"LoadNETAssembly", "[", "$pathToPInvoke", "]"}]}]], "Input",
 CellChangeTimes->{{3.6773504433272953`*^9, 3.6773504446555147`*^9}}],

Cell[BoxData[
 RowBox[{"NETAssembly", "[", 
  RowBox[{"\<\"HDF.PInvoke\"\>", ",", "1"}], "]"}]], "Output",
 CellChangeTimes->{
  3.677350098052484*^9, 3.67735076280593*^9, 3.6773515306560726`*^9, 
   3.677352784331196*^9, 3.6773532665854836`*^9, 3.6773563805137777`*^9, 
   3.6773587791608973`*^9, {3.6796673541551375`*^9, 3.6796673679687157`*^9}, 
   3.6800177970848074`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Examine the NETAssembly in the Framework of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Section",
 CellChangeTimes->{{3.5192929340948105`*^9, 3.5192929346948442`*^9}, 
   3.5193134125426784`*^9, {3.6773497933072977`*^9, 3.677349802557951*^9}, 
   3.677349910346837*^9, {3.677350043845521*^9, 3.677350073519497*^9}}],

Cell[CellGroupData[{

Cell["Verify the loaded NET Assemblies", "Subsection",
 CellChangeTimes->{{3.677350187847466*^9, 3.6773502018484573`*^9}}],

Cell["Go to >Links >.NET >Loaded NET Assemblies", "Text",
 CellChangeTimes->{{3.677352801231553*^9, 3.6773528271928596`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SystemInformation", "[", "]"}]], "Input",
 CellChangeTimes->{{3.677350153688797*^9, 3.6773501575796976`*^9}}],

Cell[BoxData[
 InterpretationBox[
  StyleBox[GridBox[{
     {
      TabViewBox[{{1,
       TagBox[
        TooltipBox[
         StyleBox[
          DynamicBox[ToBoxes[
            FEPrivate`FrontEndResource[
            "SystemInformationDialog", "KernelTabLabel"], StandardForm],
           ImageSizeCache->{48., {0., 14.}}],
          StripOnInput->False,
          DynamicUpdating->True],
         "\"SystemInformation[\\\"Kernel\\\"]\"",
         TooltipStyle->"TextStyling"],
        Annotation[#, "SystemInformation[\"Kernel\"]", "Tooltip"]& ]->GridBox[{
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" Version\"\>",
               "\"$Version\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "$Version", 
               "Tooltip"]& ], "\<\"11.0.0 for Microsoft Windows (64-bit) \
(July 28, 2016)\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Release ID\"\>",
               "\"SystemInformation[\\\"Kernel\\\", \\\"ReleaseID\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "SystemInformation[\"Kernel\", \"ReleaseID\"]", 
               "Tooltip"]& ], "\<\"11.0.0.0 (5570737, 2016072801)\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Patch Level\"\>",
               "\"SystemInformation[\\\"Kernel\\\", \\\"PatchLevel\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "SystemInformation[\"Kernel\", \"PatchLevel\"]", 
               "Tooltip"]& ], "\<\"0\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Activation Key\"\>",
               "\"$ActivationKey\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "$ActivationKey", 
               "Tooltip"]& ], "\<\"2482-2405-4UTTYK\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Machine ID\"\>",
               "\"$MachineID\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "$MachineID", 
               "Tooltip"]& ], "\<\"6240-36636-61900\"\>"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" User Name\"\>",
               "\"$UserName\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "$UserName", "Tooltip"]& ], "\<\"smartin\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Machine Name\"\>",
               "\"$MachineName\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "$MachineName", 
               "Tooltip"]& ], "\<\"alienwarex51\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Machine Domains\"\>",
               "\"$MachineDomains\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "$MachineDomains", "Tooltip"]& ], 
             RowBox[{"{", "}"}]},
            {
             TagBox[
              TooltipBox["\<\" License Server\"\>",
               "\"$LicenseServer\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "$LicenseServer", 
               "Tooltip"]& ], "\<\"alienwarex51\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Max License Processes\"\>",
               "\"$MaxLicenseProcesses\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "$MaxLicenseProcesses", "Tooltip"]& ], "8"},
            {
             TagBox[
              TooltipBox["\<\" License Expiration Date\"\>",
               "\"$LicenseExpirationDate\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "$LicenseExpirationDate", 
               "Tooltip"]& ], "\<\"Sat 8 Jul 2017\"\>"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" Machine Type\"\>",
               "\"$MachineType\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "$MachineType", "Tooltip"]& ], "\<\"PC\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Operating System\"\>",
               "\"$OperatingSystem\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "$OperatingSystem", 
               "Tooltip"]& ], "\<\"Windows\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Processor Type\"\>",
               "\"$ProcessorType\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "$ProcessorType", "Tooltip"]& ], "\<\"x86-64\"\>"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" Language\"\>",
               "\"$Language\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "$Language", "Tooltip"]& ], "\<\"English\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Character Encoding\"\>",
               "\"$CharacterEncoding\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "$CharacterEncoding", 
               "Tooltip"]& ], "\<\"WindowsANSI\"\>"},
            {
             TagBox[
              TooltipBox["\<\" System Character Encoding\"\>",
               "\"$SystemCharacterEncoding\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "$SystemCharacterEncoding", 
               "Tooltip"]& ], "\<\"WindowsANSI\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Time Zone\"\>",
               "\"$TimeZone\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "$TimeZone", "Tooltip"]& ], 
             RowBox[{"-", "4.`"}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" Creation Date\"\>",
               "\"$CreationDate\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "$CreationDate", 
               "Tooltip"]& ], "\<\"Thu 28 Jul 2016 18:52:37\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Installation Directory\"\>",
               "\"$InstallationDirectory\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "$InstallationDirectory", "Tooltip"]& ], 
             
             RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\"\>", "  ", 
              TagBox[
               ButtonBox[
                PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                 StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                 Dynamic[
                  CurrentValue["MouseOver"]],
                 
                 BaseStyle->{
                  "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                 FrameMargins->0,
                 ImageSize->Automatic],
                BaseStyle->"Hyperlink",
                ButtonData->{
                  URL[
                  "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0"], None},
                
                ButtonNote->
                 "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0"],
               
               Annotation[#, 
                "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0", "Hyperlink"]& ]}]},
            {
             TagBox[
              TooltipBox["\<\"Initialization Files Loaded\"\>",
               
               "\"SystemInformation[\\\"Kernel\\\", \\\"InitializationFiles\\\
\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Kernel\", \"InitializationFiles\"]", 
               "Tooltip"]& ], 
             DynamicModuleBox[{System`InfoDump`open$$ = False}, 
              PaneSelectorBox[{False->
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 RowBox[{"2", "\[InvisibleSpace]", 
                  StyleBox[
                   DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "FilesSmallText"], 
                    StandardForm],
                    ImageSizeCache->{36., {3., 14.}}],
                   StripOnInput->False,
                   DynamicUpdating->True]}], "IT",
                 StripOnInput->False]}], True->GridBox[{
                 {
                  RowBox[{
                   OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                   StyleBox[
                    RowBox[{"2", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "FilesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                 {
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]ProgramData\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Kernel\\\\\[InvisibleSpace]\
init.m\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/ProgramData/Mathematica/Kernel/init.\
m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/ProgramData/Mathematica/Kernel/init.\
m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/ProgramData/Mathematica/Kernel/init.\
m", "Hyperlink"]& ]}]},
                 {
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]Users\\\\\
\[InvisibleSpace]smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]\
Roaming\\\\\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]init.m\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Users/smartin/AppData/Roaming/\
Mathematica/Kernel/init.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Users/smartin/AppData/Roaming/\
Mathematica/Kernel/init.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Users/smartin/AppData/Roaming/\
Mathematica/Kernel/init.m", "Hyperlink"]& ]}]}
                },
                BaselinePosition->{Baseline, {1, 1}},
                DefaultBaseStyle->"Column",
                GridBoxAlignment->{"Columns" -> {{Left}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
               System`InfoDump`open$$],
               BaselinePosition->Baseline,
               FrameMargins->0,
               ImageSize->Automatic],
              DynamicModuleValues:>{}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"Directories\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"Directories\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" Current Directory\"\>",
                    "\"Directory[]\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "Directory[]", "Tooltip"]& ], 
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]Users\\\\\
\[InvisibleSpace]smartin\\\\\[InvisibleSpace]Desktop\\\\\[InvisibleSpace]\
HDF5WrappersForMathematica  Ver 12 August 2016\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Users/smartin/Desktop/\
HDF5WrappersForMathematica  Ver 12 August 2016"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Users/smartin/Desktop/\
HDF5WrappersForMathematica  Ver 12 August 2016"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Users/smartin/Desktop/\
HDF5WrappersForMathematica  Ver 12 August 2016", "Hyperlink"]& ]}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Home Directory\"\>",
                    "\"$HomeDirectory\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$HomeDirectory", "Tooltip"]& ], 
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]Users\\\\\
\[InvisibleSpace]smartin\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL["file://localhost/C:/Users/smartin"], None},
                    ButtonNote->"file://localhost/C:/Users/smartin"],
                    
                    Annotation[#, "file://localhost/C:/Users/smartin", 
                    "Hyperlink"]& ]}]},
                 {
                  TagBox[
                   TooltipBox["\<\" User Documents Directory\"\>",
                    "\"$UserDocumentsDirectory\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$UserDocumentsDirectory", "Tooltip"]& ], 
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]Users\\\\\
\[InvisibleSpace]smartin\\\\\[InvisibleSpace]Documents\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL["file://localhost/C:/Users/smartin/Documents"], None},
                    ButtonNote->"file://localhost/C:/Users/smartin/Documents"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Users/smartin/Documents", 
                    "Hyperlink"]& ]}]},
                 {
                  TagBox[
                   TooltipBox["\<\" User Base Directory\"\>",
                    "\"$UserBaseDirectory\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$UserBaseDirectory", "Tooltip"]& ], 
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]Users\\\\\
\[InvisibleSpace]smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]\
Roaming\\\\\[InvisibleSpace]Mathematica\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Users/smartin/AppData/Roaming/\
Mathematica"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Users/smartin/AppData/Roaming/\
Mathematica"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Users/smartin/AppData/Roaming/\
Mathematica", "Hyperlink"]& ]}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Base Directory\"\>",
                    "\"$BaseDirectory\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$BaseDirectory", "Tooltip"]& ], 
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]ProgramData\\\\\
\[InvisibleSpace]Mathematica\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL["file://localhost/C:/ProgramData/Mathematica"], None},
                    ButtonNote->"file://localhost/C:/ProgramData/Mathematica"],
                    
                    Annotation[#, 
                    "file://localhost/C:/ProgramData/Mathematica", 
                    "Hyperlink"]& ]}]},
                 {
                  TagBox[
                   TooltipBox["\<\"Directory Path\"\>",
                    "\"$Path\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$Path", "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"17", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "DirectoriesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"17", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "DirectoriesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]Roaming\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Kernel\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]Roaming\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Autoload\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]Roaming\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Applications\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]ProgramData\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Kernel\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]ProgramData\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Autoload\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]ProgramData\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Applications\"\>"},
                    {"\<\".\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]Packages\
\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]Autoload\
\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]\
Applications\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]\
ExtraPackages\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]Packages\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]Documentation\\\\\[InvisibleSpace]\
English\\\\\[InvisibleSpace]System\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Data\\\\\[InvisibleSpace]ICC\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"Packages & Files\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"Packages & Files\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" Packages Loaded\"\>",
                    "\"$Packages\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$Packages", "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"13", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "PackagesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"13", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "PackagesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"JLink`\"\>"},
                    {"\<\"NETLink`\"\>"},
                    {"\<\"GetFEKernelInit`\"\>"},
                    {"\<\"SymbolicMachineLearningLoader`\"\>"},
                    {"\<\"StreamingLoader`\"\>"},
                    {"\<\"NeuralNetworks`\"\>"},
                    {"\<\"IconizeLoader`\"\>"},
                    {"\<\"HTTPHandlingLoader`\"\>"},
                    {"\<\"CloudObjectLoader`\"\>"},
                    {"\<\"ResourceLocator`\"\>"},
                    {"\<\"PacletManager`\"\>"},
                    {"\<\"System`\"\>"},
                    {"\<\"Global`\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {
                  TagBox[
                   TooltipBox["\<\" All Files Loaded\"\>",
                    "\"$LoadedFiles\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$LoadedFiles", "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"61", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "FilesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"61", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "FilesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
CharacterEncodings\\\\\[InvisibleSpace]WindowsANSI.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/CharacterEncodings/WindowsANSI.m"], 
                    None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/CharacterEncodings/WindowsANSI.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/CharacterEncodings/WindowsANSI.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]sysinit.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
sysinit.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
sysinit.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
sysinit.m", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]mainload.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
mainload.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
mainload.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
mainload.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]InactivateExclusions.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
InactivateExclusions.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
InactivateExclusions.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
InactivateExclusions.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]\
Applications\\\\\[InvisibleSpace]Parallel\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]sysload.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/AddOns/Applications/Parallel/Kernel/sysload.m"], 
                    None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/AddOns/Applications/Parallel/Kernel/sysload.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/AddOns/Applications/Parallel/Kernel/sysload.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]\
Applications\\\\\[InvisibleSpace]Parallel\\\\\[InvisibleSpace]SysInfo.m\"\>", 
                    "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/AddOns/Applications/Parallel/SysInfo.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/AddOns/Applications/Parallel/SysInfo.m"],
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/AddOns/Applications/Parallel/SysInfo.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]SystemInformation.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
SystemInformation.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
SystemInformation.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
SystemInformation.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]Converters.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Converters.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Converters.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Converters.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]init.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/init.m"], 
                    None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/init.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/init.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]PacletManager.\
m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/PacletManager.m"]\
, None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/PacletManager.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/PacletManager.m",
                     "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]Utils.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Utils.m"],
                     None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Utils.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Utils.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]Paclet.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Paclet.m"]\
, None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Paclet.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Paclet.m",
                     "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]Roots.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Roots.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Roots.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Roots.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
CharacterEncodings\\\\\[InvisibleSpace]Unicode.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/CharacterEncodings/Unicode.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/CharacterEncodings/Unicode.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/CharacterEncodings/Unicode.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]Collection.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/\
Collection.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/\
Collection.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/\
Collection.m", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]LayoutDocsCollection.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/\
LayoutDocsCollection.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/\
LayoutDocsCollection.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/\
LayoutDocsCollection.m", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]MemoryCollection.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/\
MemoryCollection.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/\
MemoryCollection.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/\
MemoryCollection.m", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]Extension.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Extension.\
m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Extension.\
m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Extension.\
m", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]Documentation.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/\
Documentation.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/\
Documentation.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/\
Documentation.m", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]Notebook.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Notebook.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Notebook.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Notebook.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]Services.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Services.\
m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Services.\
m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Services.\
m", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]AlphaIntegration.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
AlphaIntegration.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
AlphaIntegration.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
AlphaIntegration.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]Packer.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Packer.m"]\
, None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Packer.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Packer.m",
                     "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]Zip.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Zip.m"], 
                    None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Zip.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Zip.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]\
Applications\\\\\[InvisibleSpace]ResourceLocator\\\\\[InvisibleSpace]Kernel\\\
\\\[InvisibleSpace]init.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/AddOns/Applications/ResourceLocator/Kernel/init.m"],
                     None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/AddOns/Applications/ResourceLocator/Kernel/init.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/AddOns/Applications/ResourceLocator/Kernel/init.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]\
Applications\\\\\[InvisibleSpace]ResourceLocator\\\\\[InvisibleSpace]\
ResourceLocator.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/AddOns/Applications/ResourceLocator/ResourceLocator.\
m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/AddOns/Applications/ResourceLocator/ResourceLocator.\
m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/AddOns/Applications/ResourceLocator/ResourceLocator.\
m", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]Manager.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Manager.\
m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Manager.\
m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Autoload/PacletManager/Kernel/Manager.\
m", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]DateTime\\\\\[InvisibleSpace]DateObject.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
DateTime/DateObject.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
DateTime/DateObject.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
DateTime/DateObject.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]DataPaclets\\\\\[InvisibleSpace]CalendarData.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
DataPaclets/CalendarData.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
DataPaclets/CalendarData.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
DataPaclets/CalendarData.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]ExternalService\\\\\[InvisibleSpace]URITools.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
ExternalService/URITools.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
ExternalService/URITools.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
ExternalService/URITools.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
CharacterEncodings\\\\\[InvisibleSpace]UTF8.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/CharacterEncodings/UTF8.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/CharacterEncodings/UTF8.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/CharacterEncodings/UTF8.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]CharacterFunctions\\\\\[InvisibleSpace]\
CharacterFunctions.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
CharacterFunctions/CharacterFunctions.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
CharacterFunctions/CharacterFunctions.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
CharacterFunctions/CharacterFunctions.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]StringPattern.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
StringPattern.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
StringPattern.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
StringPattern.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
CharacterEncodings\\\\\[InvisibleSpace]ASCII.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/CharacterEncodings/ASCII.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/CharacterEncodings/ASCII.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/CharacterEncodings/ASCII.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]ProgramData\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Kernel\\\\\[InvisibleSpace]\
init.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/ProgramData/Mathematica/Kernel/init.\
m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/ProgramData/Mathematica/Kernel/init.\
m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/ProgramData/Mathematica/Kernel/init.\
m", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Users\\\\\
\[InvisibleSpace]smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]\
Roaming\\\\\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]init.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Users/smartin/AppData/Roaming/\
Mathematica/Kernel/init.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Users/smartin/AppData/Roaming/\
Mathematica/Kernel/init.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Users/smartin/AppData/Roaming/\
Mathematica/Kernel/init.m", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]FEKernelInit.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
FEKernelInit.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
FEKernelInit.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
FEKernelInit.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]TextResources\\\\\[InvisibleSpace]English\\\\\
\[InvisibleSpace]FunctionInformation.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/TextResources/English/\
FunctionInformation.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/TextResources/English/\
FunctionInformation.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/TextResources/English/\
FunctionInformation.m", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]Notebook.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Notebook.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Notebook.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Notebook.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]OutputSizeLimit.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
OutputSizeLimit.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
OutputSizeLimit.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
OutputSizeLimit.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]RuntimeTools.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
RuntimeTools.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
RuntimeTools.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
RuntimeTools.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]DateTime\\\\\[InvisibleSpace]DateString.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
DateTime/DateString.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
DateTime/DateString.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
DateTime/DateString.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]Explore\\\\\[InvisibleSpace]Explore.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Explore/Explore.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Explore/Explore.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Explore/Explore.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]NETLink.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/NETLink.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/NETLink.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/NETLink.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]JLink\\\\\[InvisibleSpace]JLink.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/JLink/JLink.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/JLink/JLink.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/JLink/JLink.m", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]JLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\\\\\
\[InvisibleSpace]JLink.mx\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/JLink/Kernel/SystemResources/\
Windows-x86-64/JLink.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/JLink/Kernel/SystemResources/\
Windows-x86-64/JLink.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/JLink/Kernel/SystemResources/\
Windows-x86-64/JLink.mx", "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]InstallNET.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/InstallNET.m"], 
                    None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/InstallNET.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/InstallNET.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]CallNET.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/CallNET.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/CallNET.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/CallNET.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]NET.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/NET.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/NET.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/NET.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]NETBlock.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/NETBlock.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/NETBlock.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/NETBlock.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]MakeNETObject.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/MakeNETObject.m"], 
                    None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/MakeNETObject.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/MakeNETObject.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]Reflection.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/Reflection.m"], 
                    None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/Reflection.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/Reflection.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]Delegates.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/Delegates.m"], 
                    None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/Delegates.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/Delegates.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]DLL.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/DLL.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/DLL.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/DLL.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]UI.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/UI.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/UI.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/UI.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]ComplexType.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/ComplexType.m"], 
                    None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/ComplexType.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/ComplexType.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]Exceptions.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/Exceptions.m"], 
                    None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/Exceptions.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/Exceptions.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]Utils.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/Utils.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/Utils.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/Utils.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]JLinkCommon.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/JLinkCommon.m"], 
                    None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/JLinkCommon.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/JLinkCommon.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]MathKernel.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/MathKernel.m"], 
                    None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/MathKernel.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/MathKernel.m", 
                    "Hyperlink"]& ]}]},
                    {
                    
                    RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]NETLink\\\\\[InvisibleSpace]Kernel\\\\\
\[InvisibleSpace]COM.m\"\>", "  ", 
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/COM.m"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/COM.m"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Links/NETLink/Kernel/COM.m", 
                    "Hyperlink"]& ]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Context Path\"\>",
                    "\"$ContextPath\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$ContextPath", "Tooltip"]& ], 
                  RowBox[{"{", 
                   
                   RowBox[{"\<\"NETLink`\"\>", ",", "\<\"JLink`\"\>", 
                    ",", "\<\"SymbolicMachineLearningLoader`\"\>", 
                    ",", "\<\"StreamingLoader`\"\>", 
                    ",", "\<\"NeuralNetworks`\"\>", 
                    ",", "\<\"IconizeLoader`\"\>", 
                    ",", "\<\"HTTPHandlingLoader`\"\>", 
                    ",", "\<\"CloudObjectLoader`\"\>", 
                    ",", "\<\"PacletManager`\"\>", ",", "\<\"System`\"\>", 
                    ",", "\<\"Global`\"\>"}], "}"}]},
                 {
                  TagBox[
                   TooltipBox["\<\"Available Add-Ons\"\>",
                    
                    "\"SystemInformation[\\\"Kernel\\\", \
\\\"AvailableAddOns\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Kernel\", \"AvailableAddOns\"]", 
                    "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"24", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "AddOnsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"24", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "AddOnsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"AstronomyConvenienceFunctions\"\>"},
                    {"\<\"AuthorTools\"\>"},
                    {"\<\"ClusterIntegration\"\>"},
                    {"\<\"CompiledFunctionTools\"\>"},
                    {"\<\"DataDropClient\"\>"},
                    {"\<\"DemoChannels\"\>"},
                    {"\<\"DemonstrationsTools\"\>"},
                    {"\<\"DocumentationSearch\"\>"},
                    {"\<\"EntityFramework\"\>"},
                    {"\<\"FormulaData\"\>"},
                    {"\<\"GeoFieldModelData\"\>"},
                    {"\<\"HumanGrowthData\"\>"},
                    {"\<\"InflationAdjust\"\>"},
                    {"\<\"LightweightGridClient\"\>"},
                    {"\<\"NotebookTemplating\"\>"},
                    {"\<\"OAuth\"\>"},
                    {"\<\"PacletManager\"\>"},
                    {"\<\"Parallel\"\>"},
                    {"\<\"QuantityUnits\"\>"},
                    {"\<\"ResourceLocator\"\>"},
                    {"\<\"Security\"\>"},
                    {"\<\"StandardOceanData\"\>"},
                    {"\<\"SubKernels\"\>"},
                    {"\<\"SymbolicC\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"Streams\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"Streams\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" Open Streams\"\>",
                    "\"Streams[]\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "Streams[]", "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"2", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "StreamsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"2", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "StreamsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    RowBox[{"OutputStream", "[", 
                    RowBox[{"\<\"stdout\"\>", ",", "1"}], "]"}]},
                    {
                    RowBox[{"OutputStream", "[", 
                    RowBox[{"\<\"stderr\"\>", ",", "2"}], "]"}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"WSTP\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"WSTP\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\"Open Connections\"\>",
                    "\"Links[]\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "Links[]", "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"5", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ConnectionsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"5", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ConnectionsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    RowBox[{"LinkObject", "[", 
                    RowBox[{"\<\"w6xk8_shm\"\>", ",", "3", ",", "1"}], "]"}]},
                    {
                    RowBox[{"LinkObject", "[", 
                    RowBox[{"\<\"pkbgn_shm\"\>", ",", "49", ",", "2"}], "]"}]},
                    {
                    RowBox[{"LinkObject", "[", 
                    RowBox[{"\<\"i68nv_shm\"\>", ",", "50", ",", "3"}], "]"}]},
                    {
                    RowBox[{"LinkObject", "[", 
                    
                    RowBox[{"\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\11.0\\\\SystemFiles\\\\Links\\\\NETLink\\\\\
InstallableNET.exe\"\>", ",", "88", ",", "4"}], "]"}]},
                    {
                    RowBox[{"LinkObject", "[", 
                    RowBox[{"\<\"vkctp_shm\"\>", ",", "89", ",", "5"}], "]"}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Installed Programs\"\>",
                    
                    "\"SystemInformation[\\\"Kernel\\\", \
\\\"InstalledPrograms\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Kernel\", \"InstalledPrograms\"]", 
                    "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"1", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ProgramsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"1", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ProgramsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    RowBox[{"LinkObject", "[", 
                    
                    RowBox[{"\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\11.0\\\\SystemFiles\\\\Links\\\\NETLink\\\\\
InstallableNET.exe\"\>", ",", "88", ",", "4"}], "]"}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"External Compilers\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"External Compilers\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"CCompilerDriver`\"\>", 
                  TemplateBox[{"   ","\"   \"",StyleBox[
                    StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "NotLoadedSmallText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False], Italic, StripOnInput -> False],ButtonBox[
                    "\"Load\"", ButtonFunction :> Needs["CCompilerDriver`"], 
                    Method -> "Queued", BaseStyle -> "DialogStyle", 
                    Appearance -> Automatic, Evaluator -> Automatic]},
                   "RowWithSeparators"]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "SystemInformationDialog", "AdvancedText"], StandardForm],
                ImageSizeCache->{85., {0., 14.}}],
               StripOnInput->False,
               DynamicUpdating->True],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 StyleBox[
                  DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "AdvancedText"], StandardForm]],
                  StripOnInput->False,
                  DynamicUpdating->True],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" System ID\"\>",
                    "\"$SystemID\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, "$SystemID", 
                    "Tooltip"]& ], "\<\"Windows-x86-64\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" Command Line\"\>",
                    "\"$CommandLine\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, "$CommandLine", 
                    "Tooltip"]& ], "\<\"\\\"WolframKernel -wstp -noicon \
-mathlink -linkprotocol SharedMemory -linkmode connect -linkname \
w6xk8_shm\\\"\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" Process ID\"\>",
                    "\"$ProcessID\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$ProcessID", "Tooltip"]& ], "3360"},
                 {
                  TagBox[
                   TooltipBox["\<\" Parent Process ID\"\>",
                    "\"$ParentProcessID\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$ParentProcessID", "Tooltip"]& ], "0"},
                 {
                  TagBox[
                   TooltipBox["\<\"WSTP Version\"\>",
                    
                    "\"SystemInformation[\\\"Kernel\\\", \\\"WSTPVersion\\\"]\
\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Kernel\", \"WSTPVersion\"]", 
                    "Tooltip"]& ], "\<\"4.37 (2016072801)\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" Processor Count\"\>",
                    "\"$ProcessorCount\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$ProcessorCount", "Tooltip"]& ], "4"},
                 {
                  TagBox[
                   TooltipBox["\<\" System Memory\"\>",
                    "\"$SystemMemory\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$SystemMemory", "Tooltip"]& ], "8589934592"},
                 {
                  TagBox[
                   TooltipBox["\<\" Max License Subprocesses\"\>",
                    "\"$MaxLicenseSubprocesses\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$MaxLicenseSubprocesses", "Tooltip"]& ], 
                  "16"}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" Byte Ordering\"\>",
                    "\"$ByteOrdering\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$ByteOrdering", "Tooltip"]& ], 
                  RowBox[{"-", "1"}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Machine Precision\"\>",
                    "\"$MachinePrecision\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$MachinePrecision", "Tooltip"]& ], 
                  "15.954589770191003`"},
                 {
                  TagBox[
                   TooltipBox["\<\" Machine Epsilon\"\>",
                    "\"$MachineEpsilon\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "$MachineEpsilon", "Tooltip"]& ], 
                  "2.220446049250313`*^-16"},
                 {
                  TagBox[
                   TooltipBox["\<\" Machine Number Limits\"\>",
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"$MinMachineNumber\"", ",", "\"$MaxMachineNumber\""}], 
                    "}"}]],
                   
                   Annotation[#, {"$MinMachineNumber", "$MaxMachineNumber"}, 
                    "Tooltip"]& ], 
                  RowBox[{"{", 
                   RowBox[{
                   "2.2250738585072014`*^-308", ",", 
                    "1.7976931348623157`*^308"}], "}"}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Number Limits\"\>",
                    RowBox[{"{", 
                    RowBox[{"\"$MinNumber\"", ",", "\"$MaxNumber\""}], "}"}]],
                   Annotation[#, {"$MinNumber", "$MaxNumber"}, "Tooltip"]& ], 
                  RowBox[{"{", 
                   RowBox[{
                   "6.22968824967532196119819746965503015872`15.\
954589770191005*^-1355718576299610", ",", 
                    "1.60521676193366172702774105306375828321`15.\
954589770191005*^1355718576299609"}], "}"}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {GridBox[{
            {
             TagBox[
              TooltipBox[
               ButtonBox[
                StyleBox[
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "SystemInformationDialog", "BenchmarkButtonText"],
                  ImageSizeCache->{263., {3., 14.}}],
                 StripOnInput->False,
                 DynamicUpdating->True],
                Appearance->Automatic,
                BaseStyle->"DialogStyle",
                ButtonFunction:>FrontEndExecute[{
                   FrontEnd`NotebookPut[
                    Notebook[{
                    Cell[
                    BoxData["Needs[\"Benchmarking`\"];\nBenchmarkReport[]"], 
                    "Input"]}, Evaluator -> "Local"]]}],
                Evaluator->None,
                ImageSize->Automatic,
                Method->"Preemptive"],
               
               "\"Open a new window in which to run a benchmark for this \
kernel\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "Open a new window in which to run a benchmark for this \
kernel", "Tooltip"]& ], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           GridBoxDividers->{"Rows" -> {
               GrayLevel[0, 0.2], {False}}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}}]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], 
            Offset[0.8], 
            Offset[0.8], 
            Offset[0.8], 
            Offset[0.8], 
            Offset[0.32], 
            Offset[0.32], 
            Offset[0.32], 
            Offset[0.32], 
            Offset[0.32], {
             Offset[0.8]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}]}, {2,
       TagBox[
        TooltipBox[
         StyleBox[
          DynamicBox[ToBoxes[
            FEPrivate`FrontEndResource[
            "SystemInformationDialog", "FrontEndTabLabel"], StandardForm],
           ImageSizeCache->{77., {1., 14.}}],
          StripOnInput->False,
          DynamicUpdating->True],
         "\"SystemInformation[\\\"FrontEnd\\\"]\"",
         TooltipStyle->"TextStyling"],
        Annotation[#, "SystemInformation[\"FrontEnd\"]", "Tooltip"]& ]->
       GridBox[{
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" Version\"\>",
               "\"SystemInformation[\\\"FrontEnd\\\", \\\"Version\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "SystemInformation[\"FrontEnd\", \"Version\"]", 
               "Tooltip"]& ], "\<\"11.0 for Microsoft Windows (64-bit) (July \
28, 2016)\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Release ID\"\>",
               "\"SystemInformation[\\\"FrontEnd\\\", \\\"ReleaseID\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "SystemInformation[\"FrontEnd\", \"ReleaseID\"]", 
               "Tooltip"]& ], "\<\"11.0.0.0 (5570737, 2016072801)\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Patch Level\"\>",
               "\"SystemInformation[\\\"FrontEnd\\\", \\\"PatchLevel\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "SystemInformation[\"FrontEnd\", \"PatchLevel\"]",
                "Tooltip"]& ], "\<\"0\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Activation Key\"\>",
               
               "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"ActivationKey\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"FrontEnd\", \"ActivationKey\"]", 
               "Tooltip"]& ], "\<\"2482-2405-4UTTYK\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Machine ID\"\>",
               "\"SystemInformation[\\\"FrontEnd\\\", \\\"MachineID\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "SystemInformation[\"FrontEnd\", \"MachineID\"]", 
               "Tooltip"]& ], "\<\"6240-36636-61900\"\>"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" User Name\"\>",
               "\"SystemInformation[\\\"FrontEnd\\\", \\\"UserName\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "SystemInformation[\"FrontEnd\", \"UserName\"]", 
               "Tooltip"]& ], "\<\"smartin\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Machine Name\"\>",
               "\"SystemInformation[\\\"FrontEnd\\\", \\\"MachineName\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"FrontEnd\", \"MachineName\"]", 
               "Tooltip"]& ], "\<\"alienwarex51\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Machine Domains\"\>",
               
               "\"SystemInformation[\\\"FrontEnd\\\", \\\"MachineDomains\\\"]\
\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"FrontEnd\", \"MachineDomains\"]", 
               "Tooltip"]& ], 
             RowBox[{"{", "}"}]},
            {
             TagBox[
              TooltipBox["\<\" License Server\"\>",
               
               "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"LicenseServer\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"FrontEnd\", \"LicenseServer\"]", 
               "Tooltip"]& ], "\<\"alienwarex51\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Max License Processes\"\>",
               
               "\"SystemInformation[\\\"FrontEnd\\\", \\\"MaxLicenseProcesses\
\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"FrontEnd\", \"MaxLicenseProcesses\"]", 
               "Tooltip"]& ], "8"},
            {
             TagBox[
              TooltipBox["\<\" License Expiration Date\"\>",
               
               "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"LicenseExpirationDate\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"FrontEnd\", \"LicenseExpirationDate\"]", 
               "Tooltip"]& ], "\<\"Sat 8 Jul 2017 00:00:00\"\>"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" Machine Type\"\>",
               "\"SystemInformation[\\\"FrontEnd\\\", \\\"MachineType\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"FrontEnd\", \"MachineType\"]", 
               "Tooltip"]& ], "\<\"PC\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Operating System\"\>",
               
               "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"OperatingSystem\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"FrontEnd\", \"OperatingSystem\"]", 
               "Tooltip"]& ], "\<\"Windows\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Processor Type\"\>",
               
               "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"ProcessorType\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"FrontEnd\", \"ProcessorType\"]", 
               "Tooltip"]& ], "\<\"x86-64\"\>"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" Language\"\>",
               "\"SystemInformation[\\\"FrontEnd\\\", \\\"Language\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "SystemInformation[\"FrontEnd\", \"Language\"]", 
               "Tooltip"]& ], "\<\"English\"\>"},
            {
             TagBox[
              TooltipBox["\<\" External Character Encoding\"\>",
               
               "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"ExternalCharacterEncoding\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"FrontEnd\", \
\"ExternalCharacterEncoding\"]", "Tooltip"]& ], "\<\"WindowsANSI\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Time Zone\"\>",
               "\"SystemInformation[\\\"FrontEnd\\\", \\\"TimeZone\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "SystemInformation[\"FrontEnd\", \"TimeZone\"]", 
               "Tooltip"]& ], 
             RowBox[{"-", "4.`"}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" Creation Date\"\>",
               "\"SystemInformation[\\\"FrontEnd\\\", \\\"CreationDate\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"FrontEnd\", \"CreationDate\"]", 
               "Tooltip"]& ], "\<\"Thu 28 Jul 2016 18:26:11\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Installation Directory\"\>",
               
               "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"InstallationDirectory\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"FrontEnd\", \"InstallationDirectory\"]", 
               "Tooltip"]& ], 
             
             RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]\"\>", "  ", 
              TagBox[
               ButtonBox[
                PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                 StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                 Dynamic[
                  CurrentValue["MouseOver"]],
                 
                 BaseStyle->{
                  "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                 FrameMargins->0,
                 ImageSize->Automatic],
                BaseStyle->"Hyperlink",
                ButtonData->{
                  URL[
                  "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/"], None},
                
                ButtonNote->
                 "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/"],
               
               Annotation[#, 
                "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/", "Hyperlink"]& ]}]},
            {
             TagBox[
              TooltipBox["\<\"Initialization Files Loaded\"\>",
               
               "\"SystemInformation[\\\"FrontEnd\\\", \\\"InitializationFiles\
\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"FrontEnd\", \"InitializationFiles\"]", 
               "Tooltip"]& ], 
             DynamicModuleBox[{System`InfoDump`open$$ = False}, 
              PaneSelectorBox[{False->
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 RowBox[{"3", "\[InvisibleSpace]", 
                  StyleBox[
                   DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "FilesSmallText"], 
                    StandardForm],
                    ImageSizeCache->{36., {3., 14.}}],
                   StripOnInput->False,
                   DynamicUpdating->True]}], "IT",
                 StripOnInput->False]}], True->GridBox[{
                 {
                  RowBox[{
                   OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                   StyleBox[
                    RowBox[{"3", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "FilesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                 {
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]Notebook.mx\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Notebook.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Notebook.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Notebook.mx", "Hyperlink"]& ]}]},
                 {
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]FEKernelInit.mx\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
FEKernelInit.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
FEKernelInit.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
FEKernelInit.mx", "Hyperlink"]& ]}]},
                 {
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Kernel\\\\\[InvisibleSpace]SystemResources\\\\\[InvisibleSpace]Windows-x86-64\
\\\\\[InvisibleSpace]Notebook.mx\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Notebook.mx"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Notebook.mx"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Program Files/Wolfram \
Research/Mathematica/11.0/SystemFiles/Kernel/SystemResources/Windows-x86-64/\
Notebook.mx", "Hyperlink"]& ]}]}
                },
                BaselinePosition->{Baseline, {1, 1}},
                DefaultBaseStyle->"Column",
                GridBoxAlignment->{"Columns" -> {{Left}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
               System`InfoDump`open$$],
               BaselinePosition->Baseline,
               FrameMargins->0,
               ImageSize->Automatic],
              DynamicModuleValues:>{}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"Directories\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"Directories\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" Current Directory\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"CurrentDirectory\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"CurrentDirectory\"]", 
                    "Tooltip"]& ], 
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]Users\\\\\
\[InvisibleSpace]smartin\\\\\[InvisibleSpace]Documents\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL["file://localhost/C:/Users/smartin/Documents"], None},
                    ButtonNote->"file://localhost/C:/Users/smartin/Documents"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Users/smartin/Documents", 
                    "Hyperlink"]& ]}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Home Directory\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"HomeDirectory\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"HomeDirectory\"]", 
                    "Tooltip"]& ], 
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]Users\\\\\
\[InvisibleSpace]smartin\\\\\[InvisibleSpace]\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL["file://localhost/C:/Users/smartin/"], None},
                    ButtonNote->"file://localhost/C:/Users/smartin/"],
                    Annotation[#, "file://localhost/C:/Users/smartin/", 
                    "Hyperlink"]& ]}]},
                 {
                  TagBox[
                   TooltipBox["\<\" User Documents Directory\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"UserDocumentsDirectory\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"UserDocumentsDirectory\
\"]", "Tooltip"]& ], 
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]Users\\\\\
\[InvisibleSpace]smartin\\\\\[InvisibleSpace]Documents\\\\\[InvisibleSpace]\"\
\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL["file://localhost/C:/Users/smartin/Documents/"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Users/smartin/Documents/"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Users/smartin/Documents/", 
                    "Hyperlink"]& ]}]},
                 {
                  TagBox[
                   TooltipBox["\<\" User Base Directory\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"UserBaseDirectory\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"UserBaseDirectory\"]", 
                    "Tooltip"]& ], 
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]Users\\\\\
\[InvisibleSpace]smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]\
Roaming\\\\\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL[
                    "file://localhost/C:/Users/smartin/AppData/Roaming/\
Mathematica/"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/Users/smartin/AppData/Roaming/\
Mathematica/"],
                    
                    Annotation[#, 
                    "file://localhost/C:/Users/smartin/AppData/Roaming/\
Mathematica/", "Hyperlink"]& ]}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Base Directory\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"BaseDirectory\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"BaseDirectory\"]", 
                    "Tooltip"]& ], 
                  
                  RowBox[{"\<\"C:\\\\\[InvisibleSpace]ProgramData\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]\"\>", "  ", 
                   TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"\[RightSkeleton]\"\>", True->
                    StyleBox["\<\"\[RightSkeleton]\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    URL["file://localhost/C:/ProgramData/Mathematica/"], None},
                    
                    ButtonNote->
                    "file://localhost/C:/ProgramData/Mathematica/"],
                    
                    Annotation[#, 
                    "file://localhost/C:/ProgramData/Mathematica/", 
                    "Hyperlink"]& ]}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Notebook Path\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \\\"NotebookPath\\\
\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"NotebookPath\"]", 
                    "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"14", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "DirectoriesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"14", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "DirectoriesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]Roaming\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Autoload\\\\\[InvisibleSpace]\
*\\\\\[InvisibleSpace]FrontEnd\\\\\[InvisibleSpace]Palettes\\\\\
\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]Roaming\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Applications\\\\\
\[InvisibleSpace]*\\\\\[InvisibleSpace]FrontEnd\\\\\[InvisibleSpace]Palettes\\\
\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]ProgramData\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Autoload\\\\\[InvisibleSpace]\
*\\\\\[InvisibleSpace]FrontEnd\\\\\[InvisibleSpace]Palettes\\\\\
\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]ProgramData\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]Applications\\\\\
\[InvisibleSpace]*\\\\\[InvisibleSpace]FrontEnd\\\\\[InvisibleSpace]Palettes\\\
\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]Autoload\
\\\\\[InvisibleSpace]*\\\\\[InvisibleSpace]FrontEnd\\\\\[InvisibleSpace]\
Palettes\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]\
Applications\\\\\[InvisibleSpace]*\\\\\[InvisibleSpace]FrontEnd\\\\\
\[InvisibleSpace]Palettes\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]Roaming\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]SystemFiles\\\\\
\[InvisibleSpace]FrontEnd\\\\\[InvisibleSpace]Palettes\\\\\[InvisibleSpace]\"\
\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]ProgramData\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]SystemFiles\\\\\
\[InvisibleSpace]FrontEnd\\\\\[InvisibleSpace]Palettes\\\\\[InvisibleSpace]\"\
\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]Configuration\\\\\[InvisibleSpace]\
FrontEnd\\\\\[InvisibleSpace]Palettes\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Components\\\\\[InvisibleSpace]*\\\\\[InvisibleSpace]FrontEnd\\\\\
\[InvisibleSpace]Palettes\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]*\\\\\[InvisibleSpace]FrontEnd\\\\\[InvisibleSpace]\
Palettes\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
FrontEnd\\\\\[InvisibleSpace]Palettes\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "SystemInformationDialog", "NotebookSecurityText"], 
                 StandardForm],
                ImageSizeCache->{160., {4., 14.}}],
               StripOnInput->False,
               DynamicUpdating->True],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 StyleBox[
                  DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "NotebookSecurityText"], 
                    StandardForm]],
                  StripOnInput->False,
                  DynamicUpdating->True],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" Trusted Path\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"TrustedPath\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"TrustedPath\"]", 
                    "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"4", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "DirectoriesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"4", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "DirectoriesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]Documents\\\\\[InvisibleSpace]Wolfram Mathematica\
\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]ProgramData\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]Roaming\\\\\
\[InvisibleSpace]Mathematica\\\\\[InvisibleSpace]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Untrusted Path\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"UntrustedPath\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"UntrustedPath\"]", 
                    "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"9", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "DirectoriesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"9", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "DirectoriesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]Desktop\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]Downloads\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]Local\\\\\
\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]Roaming\\\\\
\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files (x86)\\\\\
\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]Local\\\\\
\[InvisibleSpace]Programs\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]Local\\\\\
\[InvisibleSpace]Temp\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Users\\\\\[InvisibleSpace]\
smartin\\\\\[InvisibleSpace]AppData\\\\\[InvisibleSpace]Local\\\\\
\[InvisibleSpace]Microsoft\\\\\[InvisibleSpace]Windows\\\\\[InvisibleSpace]\
INetCache\\\\\[InvisibleSpace]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Trust By Default\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \\\"TrustByDefault\
\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"TrustByDefault\"]", 
                    "Tooltip"]& ], "Automatic"},
                 {
                  TagBox[
                   TooltipBox["\<\" Initialization Cell Warning\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"InitializationCellWarning\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    
                    "SystemInformation[\"FrontEnd\", \
\"InitializationCellWarning\"]", "Tooltip"]& ], "True"}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "SystemInformationDialog", "AdvancedText"], StandardForm],
                ImageSizeCache->{85., {0., 14.}}],
               StripOnInput->False,
               DynamicUpdating->True],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 StyleBox[
                  DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "AdvancedText"], StandardForm]],
                  StripOnInput->False,
                  DynamicUpdating->True],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" System ID\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"SystemID\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"SystemID\"]", 
                    "Tooltip"]& ], "\<\"Windows-x86-64\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" Process ID\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \\\"ProcessID\\\"]\
\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"ProcessID\"]", 
                    "Tooltip"]& ], "6580"},
                 {
                  TagBox[
                   TooltipBox["\<\"WSTP Version\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"WSTPVersion\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"WSTPVersion\"]", 
                    "Tooltip"]& ], "\<\"4.37 (2016072801)\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" Operating System Version\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"OperatingSystemVersion\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"OperatingSystemVersion\
\"]", "Tooltip"]& ], "\<\"10.0 (Build 10586)\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" Max License Subprocesses\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"MaxLicenseSubprocesses\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"MaxLicenseSubprocesses\
\"]", "Tooltip"]& ], "16"}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" Syntax Coloring Enabled\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"SyntaxColoringEnabled\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \
\"SyntaxColoringEnabled\"]", "Tooltip"]& ], "True"},
                 {
                  TagBox[
                   TooltipBox["\<\" Debugger Enabled\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"DebuggerEnabled\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"DebuggerEnabled\"]", 
                    "Tooltip"]& ], "False"},
                 {
                  TagBox[
                   TooltipBox["\<\" Notebook Indexers\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"NotebookIndexers\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"NotebookIndexers\"]", 
                    "Tooltip"]& ], "\<\"Windows Search (10.0.1.36)\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" Browser Plugin\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"BrowserPlugin\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"BrowserPlugin\"]", 
                    "Tooltip"]& ], "\<\"Internet Explorer x64 \
(11.0.30762.54369), Internet Explorer (11.0.30762.54369), Netscape \
(11.0.30762.54369)\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" Default Format Types\"\>",
                    
                    "\"SystemInformation[\\\"FrontEnd\\\", \
\\\"DefaultFormatTypes\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"FrontEnd\", \"DefaultFormatTypes\"]",
                     "Tooltip"]& ], 
                  RowBox[{"{", 
                   RowBox[{"StandardForm", ",", "StandardForm"}], "}"}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {GridBox[{
            {
             RowBox[{
              ButtonBox[
               StyleBox[
                DynamicBox[ToBoxes[
                  FEPrivate`FrontEndResource[
                  "SystemInformationDialog", "OpenPreferencesButtonText"], 
                  StandardForm],
                 ImageSizeCache->{156., {4., 14.}}],
                StripOnInput->False,
                DynamicUpdating->True],
               Appearance->Automatic,
               BaseStyle->"DialogStyle",
               ButtonFunction:>FrontEndExecute[
                 FrontEndToken["PreferencesDialog"]],
               Evaluator->None,
               Method->"Preemptive"], "   ", 
              ButtonBox[
               StyleBox[
                DynamicBox[ToBoxes[
                  FEPrivate`FrontEndResource[
                  "SystemInformationDialog", "OpenOptionInspectorButtonText"],
                   StandardForm],
                 ImageSizeCache->{201., {4., 13.}}],
                StripOnInput->False,
                DynamicUpdating->True],
               Appearance->Automatic,
               BaseStyle->"DialogStyle",
               ButtonFunction:>FrontEndExecute[
                 FrontEndToken["OptionsDialog"]],
               Evaluator->None,
               Method->"Preemptive"]}], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           GridBoxDividers->{"Rows" -> {
               GrayLevel[0, 0.2], {False}}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}}]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], 
            Offset[0.8], 
            Offset[0.8], 
            Offset[0.8], 
            Offset[0.8], 
            Offset[0.32], 
            Offset[0.32], {
             Offset[0.8]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}]}, {3,
       TagBox[
        TooltipBox[
         StyleBox[
          DynamicBox[ToBoxes[
            FEPrivate`FrontEndResource[
            "SystemInformationDialog", "LinksTabLabel"], StandardForm],
           ImageSizeCache->{39., {0., 14.}}],
          StripOnInput->False,
          DynamicUpdating->True],
         "\"SystemInformation[\\\"Links\\\"]\"",
         TooltipStyle->"TextStyling"],
        Annotation[#, "SystemInformation[\"Links\"]", "Tooltip"]& ]->GridBox[{
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"Streams\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"Streams\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" Open Streams\"\>",
                    "\"Streams[]\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "Streams[]", "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"2", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "StreamsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"2", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "StreamsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    RowBox[{"OutputStream", "[", 
                    RowBox[{"\<\"stdout\"\>", ",", "1"}], "]"}]},
                    {
                    RowBox[{"OutputStream", "[", 
                    RowBox[{"\<\"stderr\"\>", ",", "2"}], "]"}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"WSTP\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"WSTP\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\"Open Connections\"\>",
                    "\"Links[]\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, "Links[]", "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"5", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ConnectionsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"5", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ConnectionsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    RowBox[{"LinkObject", "[", 
                    RowBox[{"\<\"w6xk8_shm\"\>", ",", "3", ",", "1"}], "]"}]},
                    {
                    RowBox[{"LinkObject", "[", 
                    RowBox[{"\<\"pkbgn_shm\"\>", ",", "49", ",", "2"}], "]"}]},
                    {
                    RowBox[{"LinkObject", "[", 
                    RowBox[{"\<\"i68nv_shm\"\>", ",", "50", ",", "3"}], "]"}]},
                    {
                    RowBox[{"LinkObject", "[", 
                    
                    RowBox[{"\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\11.0\\\\SystemFiles\\\\Links\\\\NETLink\\\\\
InstallableNET.exe\"\>", ",", "88", ",", "4"}], "]"}]},
                    {
                    RowBox[{"LinkObject", "[", 
                    RowBox[{"\<\"vkctp_shm\"\>", ",", "89", ",", "5"}], "]"}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Installed Programs\"\>",
                    
                    "\"SystemInformation[\\\"Links\\\", \\\"InstalledPrograms\
\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Links\", \"InstalledPrograms\"]", 
                    "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"1", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ProgramsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"1", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ProgramsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    RowBox[{"LinkObject", "[", 
                    
                    RowBox[{"\<\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\11.0\\\\SystemFiles\\\\Links\\\\NETLink\\\\\
InstallableNET.exe\"\>", ",", "88", ",", "4"}], "]"}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"Java\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"Java\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" J/Link Version\"\>",
                    
                    "\"SystemInformation[\\\"Links\\\", \\\"JLinkVersion\\\"]\
\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Links\", \"JLinkVersion\"]", 
                    "Tooltip"]& ], "\<\"J/Link Version 4.9.1\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" Java Running\"\>",
                    
                    "\"SystemInformation[\\\"Links\\\", \
\\\"JavaRunning\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Links\", \"JavaRunning\"]", 
                    "Tooltip"]& ], "False"},
                 {
                  TagBox[
                   TooltipBox["\<\" Java Version\"\>",
                    
                    "\"SystemInformation[\\\"Links\\\", \
\\\"JavaVersion\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Links\", \"JavaVersion\"]", 
                    "Tooltip"]& ], "\<\"No information available.\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" J/Link Classpath\"\>",
                    
                    "\"SystemInformation[\\\"Links\\\", \
\\\"JLinkClasspath\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Links\", \"JLinkClasspath\"]", 
                    "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"100", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "DirectoriesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"100", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "DirectoriesSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Java\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Java\\\\\[InvisibleSpace]WolframSSH.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Java\\\\\[InvisibleSpace]WolframSSHKeyGen.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]antlr.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]mexpr.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]mexprparser.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]PacletManager.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Autoload\\\\\[InvisibleSpace]PacletManager\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]WRIjdbm.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]activation.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]bzip2.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]commons-codec-1.3.jar\
\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]commons-collections-3.\
2.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]commons-httpclient-3.\
0.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]commons-lang-2.1.jar\"\
\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]commons-logging-1.1.1.\
jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]Convert.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]core-3.0.0.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]customizer.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]dom4j-1.6.1.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]Exif.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]externalservice.jar\"\
\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]gnu-regexp-1.1.4.jar\"\
\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]grib-8.0.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]jackcess-1.1.18.jar\"\
\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]javase-3.0.0.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]jdbf.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]jdom.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]jmf.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]JPEG2000b.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]JSON.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]jxl.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]ldap.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]mail.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]mediaplayer.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]multiplayer.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]netcdf-4.2.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]poi-3.11-20150702.jar\
\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]poi-examples-3.11-\
20150702.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]poi-excelant-3.11-\
20150702.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]poi-ooxml-3.11-\
20150702.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]poi-ooxml-schemas-3.\
11-20150702.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]poi-scratchpad-3.11-\
20150702.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]prefsAll.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]resourcesOptional.jar\
\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]stax-api-1.0.1.jar\"\>\
"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]tagsoup-1.0rc9.jar\"\>\
"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]tar.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]xercesImpl.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]xml-apis.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]xmlbeans-2.3.0.jar\"\>\
"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Converters\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]zxing-client.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]Packages\
\\\\\[InvisibleSpace]GUIKit\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\"\>\
"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]Packages\
\\\\\[InvisibleSpace]GUIKit\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]bsf-\
Wolfram.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]Packages\
\\\\\[InvisibleSpace]GUIKit\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]bsf.\
jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]Packages\
\\\\\[InvisibleSpace]GUIKit\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\
concurrent.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]Packages\
\\\\\[InvisibleSpace]GUIKit\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]diva-\
canvas-core.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]Packages\
\\\\\[InvisibleSpace]GUIKit\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\
GUIKit.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]Packages\
\\\\\[InvisibleSpace]GUIKit\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\
OculusLayout.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]Packages\
\\\\\[InvisibleSpace]GUIKit\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\
xercesImpl.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]Packages\
\\\\\[InvisibleSpace]GUIKit\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\
xmlParserAPIs.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]commons-collections-3.1.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]commons-dbcp-1.2.1.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]commons-pool-1.2.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]derby.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]derbyclient.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]drizzle-jdbc-1.3.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]glazedlists.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]h2-1.3.176.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]hsqldb.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]jaybird-full-2.2.9.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]jtds-1.3.1.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]mariadb-java-client-1.3.4.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]mysql-connector-java-5.1.38-bin.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]postgresql-9.4-1206-jdbc4.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]DatabaseLink\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]sqlite-jdbc-3.8.11.2.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]RLink\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\
\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]RLink\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\
jna.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]RLink\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\
JRI.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]RLink\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\
JRIEngine.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]RLink\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\
log4j-1.2.16.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]RLink\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\
REngine.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]RLink\\\\\[InvisibleSpace]Java\\\\\[InvisibleSpace]\
RLink.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]WebServices\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]WebServices\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]commons-httpclient-3.0.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]WebServices\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]commons-logging-1.0.4.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]WebServices\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]junit-3.8.1.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]XMLSchema\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Links\\\\\[InvisibleSpace]XMLSchema\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]commons-codec-1.3.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]\
Applications\\\\\[InvisibleSpace]ClusterIntegration\\\\\[InvisibleSpace]Java\\\
\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]\
Applications\\\\\[InvisibleSpace]ClusterIntegration\\\\\[InvisibleSpace]Java\\\
\\\[InvisibleSpace]Wolfram_SGE.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]\
Applications\\\\\[InvisibleSpace]DocumentationSearch\\\\\[InvisibleSpace]Java\
\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]\
Applications\\\\\[InvisibleSpace]LightweightGridClient\\\\\[InvisibleSpace]\
Java\\\\\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]AddOns\\\\\[InvisibleSpace]\
Applications\\\\\[InvisibleSpace]LightweightGridClient\\\\\[InvisibleSpace]\
Java\\\\\[InvisibleSpace]wolfram-remote-services-client.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Components\\\\\[InvisibleSpace]Interpreter\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Components\\\\\[InvisibleSpace]Interpreter\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]libphonenumber-7.4.4.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Components\\\\\[InvisibleSpace]Interpreter\\\\\[InvisibleSpace]Java\\\\\
\[InvisibleSpace]ParseTelephoneNumber.jar\"\>"},
                    {"\<\"C:\\\\\[InvisibleSpace]Program Files\\\\\
\[InvisibleSpace]Wolfram Research\\\\\[InvisibleSpace]Mathematica\\\\\
\[InvisibleSpace]11.0\\\\\[InvisibleSpace]SystemFiles\\\\\[InvisibleSpace]\
Java\\\\\[InvisibleSpace]Windows-x86-64\\\\\[InvisibleSpace]lib\\\\\
\[InvisibleSpace]tools.jar\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Loaded Java Classes\"\>",
                    
                    "\"SystemInformation[\\\"Links\\\", \\\"LoadedJavaClasses\
\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   Annotation[#, 
                    "SystemInformation[\"Links\", \"LoadedJavaClasses\"]", 
                    "Tooltip"]& ], 
                  RowBox[{
                   StyleBox[
                    OpenerBox[False],
                    StripOnInput->False,
                    ShowContents->False], "   ", 
                   StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ItemsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\".NET\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\".NET\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" .NetLink Version\"\>",
                    
                    "\"SystemInformation[\\\"Links\\\", \\\".NetLinkVersion\\\
\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Links\", \".NetLinkVersion\"]", 
                    "Tooltip"]& ], "\<\"NET/Link Version 1.6.2\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" .NET Running\"\>",
                    
                    "\"SystemInformation[\\\"Links\\\", \
\\\".NETRunning\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Links\", \".NETRunning\"]", 
                    "Tooltip"]& ], "True"},
                 {
                  TagBox[
                   TooltipBox["\<\" .NET Version\"\>",
                    
                    "\"SystemInformation[\\\"Links\\\", \
\\\".NETVersion\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Links\", \".NETVersion\"]", 
                    "Tooltip"]& ], "\<\"4.0.30319.42000\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" Loaded NET Types\"\>",
                    
                    "\"SystemInformation[\\\"Links\\\", \
\\\"LoadedNETTypes\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Links\", \"LoadedNETTypes\"]", 
                    "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"2", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ItemsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"2", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ItemsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    RowBox[{"NETType", "[", 
                    RowBox[{"\<\"System.Version\"\>", ",", "2"}], "]"}]},
                    {
                    RowBox[{"NETType", "[", 
                    RowBox[{"\<\"System.Environment\"\>", ",", "1"}], "]"}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Loaded NET Assemblies\"\>",
                    
                    "\"SystemInformation[\\\"Links\\\", \
\\\"LoadedNETAssemblies\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Links\", \"LoadedNETAssemblies\"]", 
                    "Tooltip"]& ], 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"7", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ItemsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"7", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ItemsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    RowBox[{"NETAssembly", "[", 
                    RowBox[{"\<\"mscorlib\"\>", ",", "2"}], "]"}]},
                    {
                    RowBox[{"NETAssembly", "[", 
                    RowBox[{"\<\"InstallableNET\"\>", ",", "3"}], "]"}]},
                    {
                    RowBox[{"NETAssembly", "[", 
                    RowBox[{"\<\"Wolfram.NETLink\"\>", ",", "4"}], "]"}]},
                    {
                    RowBox[{"NETAssembly", "[", 
                    RowBox[{"\<\"System\"\>", ",", "5"}], "]"}]},
                    {
                    RowBox[{"NETAssembly", "[", 
                    RowBox[{"\<\"System.Windows.Forms\"\>", ",", "6"}], "]"}]},
                    {
                    RowBox[{"NETAssembly", "[", 
                    RowBox[{"\<\"System.Drawing\"\>", ",", "7"}], "]"}]},
                    {
                    RowBox[{"NETAssembly", "[", 
                    RowBox[{"\<\"HDF.PInvoke\"\>", ",", "1"}], "]"}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"CUDA\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"CUDA\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"CUDALink\"\>", 
                  TemplateBox[{"   ","\"   \"",StyleBox[
                    StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "NotLoadedSmallText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False], Italic, StripOnInput -> False],ButtonBox[
                    "\"Load\"", ButtonFunction :> Needs["CUDALink`"], Method -> 
                    "Queued", BaseStyle -> "DialogStyle", Appearance -> 
                    Automatic, Evaluator -> Automatic]},
                   "RowWithSeparators"]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"OpenCL\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"OpenCL\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"OpenCLLink\"\>", 
                  TemplateBox[{"   ","\"   \"",StyleBox[
                    StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "NotLoadedSmallText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False], Italic, StripOnInput -> False],ButtonBox[
                    "\"Load\"", ButtonFunction :> Needs["OpenCLLink`"], 
                    Method -> "Queued", BaseStyle -> "DialogStyle", 
                    Appearance -> Automatic, Evaluator -> Automatic]},
                   "RowWithSeparators"]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"Database\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"Database\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"DatabaseLink\"\>", 
                  TemplateBox[{"   ","\"   \"",StyleBox[
                    StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "NotLoadedSmallText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False], Italic, StripOnInput -> False],ButtonBox[
                    "\"Load\"", ButtonFunction :> Needs["DatabaseLink`"], 
                    Method -> "Queued", BaseStyle -> "DialogStyle", 
                    Appearance -> Automatic, Evaluator -> Automatic]},
                   "RowWithSeparators"]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"WebServices\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"WebServices\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Web Services\"\>", 
                  TemplateBox[{"   ","\"   \"",StyleBox[
                    StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "NotLoadedSmallText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False], Italic, StripOnInput -> False],ButtonBox[
                    "\"Load\"", ButtonFunction :> Needs["WebServices`"], 
                    Method -> "Queued", BaseStyle -> "DialogStyle", 
                    Appearance -> Automatic, Evaluator -> Automatic]},
                   "RowWithSeparators"]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.32]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}]}, {4,
       TagBox[
        TooltipBox[
         StyleBox[
          DynamicBox[ToBoxes[
            FEPrivate`FrontEndResource[
            "SystemInformationDialog", "ParallelTabLabel"], StandardForm],
           ImageSizeCache->{55., {0., 14.}}],
          StripOnInput->False,
          DynamicUpdating->True],
         "\"SystemInformation[\\\"Parallel\\\"]\"",
         TooltipStyle->"TextStyling"],
        Annotation[#, "SystemInformation[\"Parallel\"]", "Tooltip"]& ]->
       GridBox[{
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" Kernel Count\"\>",
               "\"SystemInformation[\\\"Parallel\\\", \\\"KernelCount\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Parallel\", \"KernelCount\"]", 
               "Tooltip"]& ], "0"},
            {
             TagBox[
              TooltipBox["\<\" Running Kernels\"\>",
               
               "\"SystemInformation[\\\"Parallel\\\", \\\"RunningKernels\\\"]\
\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Parallel\", \"RunningKernels\"]", 
               "Tooltip"]& ], 
             RowBox[{"{", "}"}]},
            {
             TagBox[
              TooltipBox["\<\" Kernel Configuration\"\>",
               
               "\"SystemInformation[\\\"Parallel\\\", \\\"KernelConfiguration\
\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Parallel\", \"KernelConfiguration\"]", 
               "Tooltip"]& ], 
             RowBox[{"{", 
              
              InterpretationBox["\<\"\[LeftSkeleton]\\!\\(\\*RowBox[{\\\"4\\\"\
}]\\) local kernels\[RightSkeleton]\"\>",
               StringForm[
               "\[LeftSkeleton]`1` local kernels\[RightSkeleton]", 4],
               Editable->False], "}"}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" Processor Count\"\>",
               
               "\"SystemInformation[\\\"Parallel\\\", \\\"ProcessorCount\\\"]\
\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Parallel\", \"ProcessorCount\"]", 
               "Tooltip"]& ], "4"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" Debugging\"\>",
               "\"SystemInformation[\\\"Parallel\\\", \\\"Debugging\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "SystemInformation[\"Parallel\", \"Debugging\"]", 
               "Tooltip"]& ], "True"},
            {
             TagBox[
              TooltipBox["\<\" Automatic Launching\"\>",
               
               "\"SystemInformation[\\\"Parallel\\\", \
\\\"AutomaticLaunching\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Parallel\", \"AutomaticLaunching\"]", 
               "Tooltip"]& ], "Automatic"},
            {
             TagBox[
              TooltipBox["\<\" Failed Kernel Relaunching\"\>",
               
               "\"SystemInformation[\\\"Parallel\\\", \
\\\"FailedKernelRelaunching\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Parallel\", \"FailedKernelRelaunching\"]",
                "Tooltip"]& ], "True"},
            {
             TagBox[
              TooltipBox["\<\" Evaluation Failure Recovery\"\>",
               
               "\"SystemInformation[\\\"Parallel\\\", \
\\\"EvaluationFailureRecovery\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Parallel\", \
\"EvaluationFailureRecovery\"]", "Tooltip"]& ], "\<\"Retry\"\>"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"Shared Resources\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"Shared Resources\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" Distributed Definitions\"\>",
                    
                    "\"SystemInformation[\\\"Parallel\\\", \
\\\"DistributedDefinitions\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Parallel\", \"DistributedDefinitions\
\"]", "Tooltip"]& ], 
                  RowBox[{"{", "}"}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Shared Variables\"\>",
                    
                    "\"SystemInformation[\\\"Parallel\\\", \
\\\"SharedVariables\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Parallel\", \"SharedVariables\"]", 
                    "Tooltip"]& ], 
                  RowBox[{"{", "}"}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Shared Functions\"\>",
                    
                    "\"SystemInformation[\\\"Parallel\\\", \
\\\"SharedFunctions\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Parallel\", \"SharedFunctions\"]", 
                    "Tooltip"]& ], 
                  RowBox[{"{", "}"}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox["\<\"Connection Methods\"\>",
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox["\<\"Connection Methods\"\>",
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\" Available Connection Methods\"\>",
                    
                    "\"SystemInformation[\\\"Parallel\\\", \
\\\"AvailableConnectionMethods\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Parallel\", \
\"AvailableConnectionMethods\"]", "Tooltip"]& ], 
                  RowBox[{"{", 
                   
                   RowBox[{"\<\"SubKernels`LocalKernels`\"\>", 
                    ",", "\<\"LightweightGridClient`\"\>", 
                    ",", "\<\"ClusterIntegration`\"\>", 
                    ",", "\<\"SubKernels`RemoteKernels`\"\>"}], "}"}]},
                 {
                  TagBox[
                   TooltipBox["\<\" Loaded Connection Methods\"\>",
                    
                    "\"SystemInformation[\\\"Parallel\\\", \
\\\"LoadedConnectionMethods\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Parallel\", \
\"LoadedConnectionMethods\"]", "Tooltip"]& ], 
                  RowBox[{"{", "\<\"SubKernels`LocalKernels`\"\>", "}"}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" Parallel Tools Version\"\>",
               
               "\"SystemInformation[\\\"Parallel\\\", \
\\\"ParallelToolsVersion\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Parallel\", \"ParallelToolsVersion\"]", 
               "Tooltip"]& ], 
             TagBox[
              InterpretationBox["\<\"8.0\"\>",
               8.,
               AutoDelete->True],
              NumberForm[#, {3, 1}]& ]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {"\<\"\"\>"}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], 
            Offset[0.8], 
            Offset[0.8], 
            Offset[0.8], 
            Offset[0.8], 
            Offset[0.32], 
            Offset[0.32], 
            Offset[0.32], 
            Offset[0.32], 
            Offset[0.32], {
             Offset[0.8]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}]}, {5,
       TagBox[
        TooltipBox[
         StyleBox[
          DynamicBox[ToBoxes[
            FEPrivate`FrontEndResource[
            "SystemInformationDialog", "DevicesTabLabel"], StandardForm],
           ImageSizeCache->{60., {0., 13.}}],
          StripOnInput->False,
          DynamicUpdating->True],
         "\"SystemInformation[\\\"Devices\\\"]\"",
         TooltipStyle->"TextStyling"],
        Annotation[#, "SystemInformation[\"Devices\"]", "Tooltip"]& ]->
       GridBox[{
         {GridBox[{
            {
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "SystemInformationDialog", "ScreenInformationText"], 
                 StandardForm],
                ImageSizeCache->{164., {1., 14.}}],
               StripOnInput->False,
               DynamicUpdating->True],
              StripOnInput->False,
              FontWeight->Bold], "\<\"\"\>", 
             TagBox[
              GraphicsBox[
               TagBox[
                TooltipBox[
                 {GrayLevel[1], EdgeForm[GrayLevel[0]], 
                  StyleBox[{RectangleBox[{0, 0}, {1600, -900}], 
                    {GrayLevel[0.7843137254901961], 
                    RectangleBox[{0, 0}, {1600, -860}]}},
                   Antialiasing->False]},
                 GridBox[{{"\"Screen Area:\"", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1600"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "860"}], "}"}]}], "}"}]}, {
                   "\"Full Screen Area:\"", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1600"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "900"}], "}"}]}], "}"}]}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  ColumnAlignments -> {Right, Left}]],
                Annotation[#, 
                 
                 Grid[{{"Screen Area:", {{0, 1600}, {0, 860}}}, {
                   "Full Screen Area:", {{0, 1600}, {0, 900}}}}, 
                  ColumnAlignments -> {Right, Left}, StripOnInput -> True], 
                 "Tooltip"]& ],
               ImageSize->{125, Automatic}],
              Deploy,
              DefaultBaseStyle->"Deploy"]},
            {"\<\"Screen Size\"\>", "\<\"1600 \[Times] 900\"\>", 
             "\[SpanFromAbove]"},
            {"\<\"Resolution\"\>", "\<\"96 dpi\"\>", "\[SpanFromAbove]"},
            {"\<\"Color Depth\"\>", "\<\"32 bits\"\>", "\[SpanFromAbove]"}
           },
           AutoDelete->False,
           
           GridBoxAlignment->{
            "Columns" -> {Right, Left, Center}, "Rows" -> {{Top}}},
           GridBoxDividers->{},
           GridBoxItemSize->{"Columns" -> {14, 10, 14.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}, 
             "RowsIndexed" -> {2 -> 1, 6 -> 1, 10 -> 1, 14 -> 1, 18 -> 1}}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "GraphicsSubsystemText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\": \"","\"DirectX\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "GraphicsSubsystemText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\": \"","\"DirectX\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Typical Uses\"\>", "\<\"On-screen 3D graphics, 2D \
gradient filling\"\>"},
                 {"\<\"Version\"\>", "\<\"9\"\>"},
                 {"\<\"Driver\"\>", "\<\"nvd3dumx.dll\"\>"},
                 {"\<\"Description\"\>", "\<\"NVIDIA GeForce GTX 745\"\>"},
                 {"\<\"DeviceName\"\>", "\<\"\\\\.\\\\DISPLAY1\"\>"},
                 {"\<\"VendorId\"\>", "\<\"4318\"\>"},
                 {"\<\"DeviceId\"\>", "\<\"4994\"\>"},
                 {"\<\"SubSysId\"\>", "\<\"275058910\"\>"},
                 {"\<\"Revision\"\>", "\<\"162\"\>"},
                 {"\<\"DeviceIdentifier\"\>", 
                  RowBox[{
                  "{", "\<\"D7B71E3E-50C2-11CF-6866-68301FC2C735\"\>", "}"}]},
                 {"\<\"DriverVersion\"\>", "\<\"10.18.13.5382\"\>"},
                 {"\<\"Optimized 3D Transparency\"\>", "True"},
                 {"\<\"Run Diagnostics\"\>", 
                  TagBox[
                   ButtonBox[
                    
                    PaneSelectorBox[{False->"\<\"DirectX Diagnostic Tool\"\>",
                     True->
                    
                    StyleBox["\<\"DirectX Diagnostic Tool\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    
                    BaseStyle->{
                    "Hyperlink", FontSize :> CurrentValue["PanelFontSize"]},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData:>{"Run dxdiag.exe", None},
                    ButtonFunction:>Run["start /b dxdiag.exe"],
                    ButtonNote->"Run dxdiag.exe",
                    Evaluator->Automatic,
                    Method->"Queued"],
                   Annotation[#, "Run dxdiag.exe", "Hyperlink"]& ]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "GraphicsSubsystemText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\": \"","\"OpenGL\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "GraphicsSubsystemText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\": \"","\"OpenGL\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Typical Uses\"\>", "\<\"3D graphics rotation\"\>"},
                 {"\<\"Vendor\"\>", "\<\"NVIDIA Corporation\"\>"},
                 {"\<\"Renderer\"\>", "\<\"GeForce GTX 745/PCIe/SSE2\"\>"},
                 {"\<\"Version\"\>", "\<\"4.5.0 NVIDIA 353.82\"\>"},
                 {"\<\"Extensions\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"319", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ExtensionsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"319", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ExtensionsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"GL_AMD_multi_draw_indirect\"\>"},
                    {"\<\"GL_AMD_seamless_cubemap_per_texture\"\>"},
                    {"\<\"GL_ARB_arrays_of_arrays\"\>"},
                    {"\<\"GL_ARB_base_instance\"\>"},
                    {"\<\"GL_ARB_bindless_texture\"\>"},
                    {"\<\"GL_ARB_blend_func_extended\"\>"},
                    {"\<\"GL_ARB_buffer_storage\"\>"},
                    {"\<\"GL_ARB_clear_buffer_object\"\>"},
                    {"\<\"GL_ARB_clear_texture\"\>"},
                    {"\<\"GL_ARB_clip_control\"\>"},
                    {"\<\"GL_ARB_color_buffer_float\"\>"},
                    {"\<\"GL_ARB_compatibility\"\>"},
                    {"\<\"GL_ARB_compressed_texture_pixel_storage\"\>"},
                    {"\<\"GL_ARB_conservative_depth\"\>"},
                    {"\<\"GL_ARB_compute_shader\"\>"},
                    {"\<\"GL_ARB_compute_variable_group_size\"\>"},
                    {"\<\"GL_ARB_conditional_render_inverted\"\>"},
                    {"\<\"GL_ARB_copy_buffer\"\>"},
                    {"\<\"GL_ARB_copy_image\"\>"},
                    {"\<\"GL_ARB_cull_distance\"\>"},
                    {"\<\"GL_ARB_debug_output\"\>"},
                    {"\<\"GL_ARB_depth_buffer_float\"\>"},
                    {"\<\"GL_ARB_depth_clamp\"\>"},
                    {"\<\"GL_ARB_depth_texture\"\>"},
                    {"\<\"GL_ARB_derivative_control\"\>"},
                    {"\<\"GL_ARB_direct_state_access\"\>"},
                    {"\<\"GL_ARB_draw_buffers\"\>"},
                    {"\<\"GL_ARB_draw_buffers_blend\"\>"},
                    {"\<\"GL_ARB_draw_indirect\"\>"},
                    {"\<\"GL_ARB_draw_elements_base_vertex\"\>"},
                    {"\<\"GL_ARB_draw_instanced\"\>"},
                    {"\<\"GL_ARB_enhanced_layouts\"\>"},
                    {"\<\"GL_ARB_ES2_compatibility\"\>"},
                    {"\<\"GL_ARB_ES3_compatibility\"\>"},
                    {"\<\"GL_ARB_ES3_1_compatibility\"\>"},
                    {"\<\"GL_ARB_explicit_attrib_location\"\>"},
                    {"\<\"GL_ARB_explicit_uniform_location\"\>"},
                    {"\<\"GL_ARB_fragment_coord_conventions\"\>"},
                    {"\<\"GL_ARB_fragment_layer_viewport\"\>"},
                    {"\<\"GL_ARB_fragment_program\"\>"},
                    {"\<\"GL_ARB_fragment_program_shadow\"\>"},
                    {"\<\"GL_ARB_fragment_shader\"\>"},
                    {"\<\"GL_ARB_framebuffer_no_attachments\"\>"},
                    {"\<\"GL_ARB_framebuffer_object\"\>"},
                    {"\<\"GL_ARB_framebuffer_sRGB\"\>"},
                    {"\<\"GL_ARB_geometry_shader4\"\>"},
                    {"\<\"GL_ARB_get_program_binary\"\>"},
                    {"\<\"GL_ARB_get_texture_sub_image\"\>"},
                    {"\<\"GL_ARB_gpu_shader5\"\>"},
                    {"\<\"GL_ARB_gpu_shader_fp64\"\>"},
                    {"\<\"GL_ARB_half_float_pixel\"\>"},
                    {"\<\"GL_ARB_half_float_vertex\"\>"},
                    {"\<\"GL_ARB_imaging\"\>"},
                    {"\<\"GL_ARB_indirect_parameters\"\>"},
                    {"\<\"GL_ARB_instanced_arrays\"\>"},
                    {"\<\"GL_ARB_internalformat_query\"\>"},
                    {"\<\"GL_ARB_internalformat_query2\"\>"},
                    {"\<\"GL_NV_internalformat_sample_query\"\>"},
                    {"\<\"GL_ARB_invalidate_subdata\"\>"},
                    {"\<\"GL_ARB_map_buffer_alignment\"\>"},
                    {"\<\"GL_ARB_map_buffer_range\"\>"},
                    {"\<\"GL_ARB_multi_bind\"\>"},
                    {"\<\"GL_ARB_multi_draw_indirect\"\>"},
                    {"\<\"GL_ARB_multisample\"\>"},
                    {"\<\"GL_ARB_multitexture\"\>"},
                    {"\<\"GL_ARB_occlusion_query\"\>"},
                    {"\<\"GL_ARB_occlusion_query2\"\>"},
                    {"\<\"GL_ARB_pipeline_statistics_query\"\>"},
                    {"\<\"GL_ARB_pixel_buffer_object\"\>"},
                    {"\<\"GL_ARB_point_parameters\"\>"},
                    {"\<\"GL_ARB_point_sprite\"\>"},
                    {"\<\"GL_ARB_program_interface_query\"\>"},
                    {"\<\"GL_ARB_provoking_vertex\"\>"},
                    {"\<\"GL_ARB_robust_buffer_access_behavior\"\>"},
                    {"\<\"GL_ARB_robustness\"\>"},
                    {"\<\"GL_ARB_sample_shading\"\>"},
                    {"\<\"GL_ARB_sampler_objects\"\>"},
                    {"\<\"GL_ARB_seamless_cube_map\"\>"},
                    {"\<\"GL_ARB_seamless_cubemap_per_texture\"\>"},
                    {"\<\"GL_ARB_separate_shader_objects\"\>"},
                    {"\<\"GL_ARB_shader_atomic_counters\"\>"},
                    {"\<\"GL_ARB_shader_bit_encoding\"\>"},
                    {"\<\"GL_ARB_shader_draw_parameters\"\>"},
                    {"\<\"GL_ARB_shader_group_vote\"\>"},
                    {"\<\"GL_ARB_shader_image_load_store\"\>"},
                    {"\<\"GL_ARB_shader_image_size\"\>"},
                    {"\<\"GL_ARB_shader_objects\"\>"},
                    {"\<\"GL_ARB_shader_precision\"\>"},
                    {"\<\"GL_ARB_query_buffer_object\"\>"},
                    {"\<\"GL_ARB_shader_storage_buffer_object\"\>"},
                    {"\<\"GL_ARB_shader_subroutine\"\>"},
                    {"\<\"GL_ARB_shader_texture_image_samples\"\>"},
                    {"\<\"GL_ARB_shader_texture_lod\"\>"},
                    {"\<\"GL_ARB_shading_language_100\"\>"},
                    {"\<\"GL_ARB_shading_language_420pack\"\>"},
                    {"\<\"GL_ARB_shading_language_include\"\>"},
                    {"\<\"GL_ARB_shading_language_packing\"\>"},
                    {"\<\"GL_ARB_shadow\"\>"},
                    {"\<\"GL_ARB_sparse_buffer\"\>"},
                    {"\<\"GL_ARB_sparse_texture\"\>"},
                    {"\<\"GL_ARB_stencil_texturing\"\>"},
                    {"\<\"GL_ARB_sync\"\>"},
                    {"\<\"GL_ARB_tessellation_shader\"\>"},
                    {"\<\"GL_ARB_texture_barrier\"\>"},
                    {"\<\"GL_ARB_texture_border_clamp\"\>"},
                    {"\<\"GL_ARB_texture_buffer_object\"\>"},
                    {"\<\"GL_ARB_texture_buffer_object_rgb32\"\>"},
                    {"\<\"GL_ARB_texture_buffer_range\"\>"},
                    {"\<\"GL_ARB_texture_compression\"\>"},
                    {"\<\"GL_ARB_texture_compression_bptc\"\>"},
                    {"\<\"GL_ARB_texture_compression_rgtc\"\>"},
                    {"\<\"GL_ARB_texture_cube_map\"\>"},
                    {"\<\"GL_ARB_texture_cube_map_array\"\>"},
                    {"\<\"GL_ARB_texture_env_add\"\>"},
                    {"\<\"GL_ARB_texture_env_combine\"\>"},
                    {"\<\"GL_ARB_texture_env_crossbar\"\>"},
                    {"\<\"GL_ARB_texture_env_dot3\"\>"},
                    {"\<\"GL_ARB_texture_float\"\>"},
                    {"\<\"GL_ARB_texture_gather\"\>"},
                    {"\<\"GL_ARB_texture_mirror_clamp_to_edge\"\>"},
                    {"\<\"GL_ARB_texture_mirrored_repeat\"\>"},
                    {"\<\"GL_ARB_texture_multisample\"\>"},
                    {"\<\"GL_ARB_texture_non_power_of_two\"\>"},
                    {"\<\"GL_ARB_texture_query_levels\"\>"},
                    {"\<\"GL_ARB_texture_query_lod\"\>"},
                    {"\<\"GL_ARB_texture_rectangle\"\>"},
                    {"\<\"GL_ARB_texture_rg\"\>"},
                    {"\<\"GL_ARB_texture_rgb10_a2ui\"\>"},
                    {"\<\"GL_ARB_texture_stencil8\"\>"},
                    {"\<\"GL_ARB_texture_storage\"\>"},
                    {"\<\"GL_ARB_texture_storage_multisample\"\>"},
                    {"\<\"GL_ARB_texture_swizzle\"\>"},
                    {"\<\"GL_ARB_texture_view\"\>"},
                    {"\<\"GL_ARB_timer_query\"\>"},
                    {"\<\"GL_ARB_transform_feedback2\"\>"},
                    {"\<\"GL_ARB_transform_feedback3\"\>"},
                    {"\<\"GL_ARB_transform_feedback_instanced\"\>"},
                    {"\<\"GL_ARB_transform_feedback_overflow_query\"\>"},
                    {"\<\"GL_ARB_transpose_matrix\"\>"},
                    {"\<\"GL_ARB_uniform_buffer_object\"\>"},
                    {"\<\"GL_ARB_vertex_array_bgra\"\>"},
                    {"\<\"GL_ARB_vertex_array_object\"\>"},
                    {"\<\"GL_ARB_vertex_attrib_64bit\"\>"},
                    {"\<\"GL_ARB_vertex_attrib_binding\"\>"},
                    {"\<\"GL_ARB_vertex_buffer_object\"\>"},
                    {"\<\"GL_ARB_vertex_program\"\>"},
                    {"\<\"GL_ARB_vertex_shader\"\>"},
                    {"\<\"GL_ARB_vertex_type_10f_11f_11f_rev\"\>"},
                    {"\<\"GL_ARB_vertex_type_2_10_10_10_rev\"\>"},
                    {"\<\"GL_ARB_viewport_array\"\>"},
                    {"\<\"GL_ARB_window_pos\"\>"},
                    {"\<\"GL_ATI_draw_buffers\"\>"},
                    {"\<\"GL_ATI_texture_float\"\>"},
                    {"\<\"GL_ATI_texture_mirror_once\"\>"},
                    {"\<\"GL_S3_s3tc\"\>"},
                    {"\<\"GL_EXT_texture_env_add\"\>"},
                    {"\<\"GL_EXT_abgr\"\>"},
                    {"\<\"GL_EXT_bgra\"\>"},
                    {"\<\"GL_EXT_bindable_uniform\"\>"},
                    {"\<\"GL_EXT_blend_color\"\>"},
                    {"\<\"GL_EXT_blend_equation_separate\"\>"},
                    {"\<\"GL_EXT_blend_func_separate\"\>"},
                    {"\<\"GL_EXT_blend_minmax\"\>"},
                    {"\<\"GL_EXT_blend_subtract\"\>"},
                    {"\<\"GL_EXT_compiled_vertex_array\"\>"},
                    {"\<\"GL_EXT_Cg_shader\"\>"},
                    {"\<\"GL_EXT_depth_bounds_test\"\>"},
                    {"\<\"GL_EXT_direct_state_access\"\>"},
                    {"\<\"GL_EXT_draw_buffers2\"\>"},
                    {"\<\"GL_EXT_draw_instanced\"\>"},
                    {"\<\"GL_EXT_draw_range_elements\"\>"},
                    {"\<\"GL_EXT_fog_coord\"\>"},
                    {"\<\"GL_EXT_framebuffer_blit\"\>"},
                    {"\<\"GL_EXT_framebuffer_multisample\"\>"},
                    {"\<\"GL_EXTX_framebuffer_mixed_formats\"\>"},
                    {"\<\"GL_EXT_framebuffer_multisample_blit_scaled\"\>"},
                    {"\<\"GL_EXT_framebuffer_object\"\>"},
                    {"\<\"GL_EXT_framebuffer_sRGB\"\>"},
                    {"\<\"GL_EXT_geometry_shader4\"\>"},
                    {"\<\"GL_EXT_gpu_program_parameters\"\>"},
                    {"\<\"GL_EXT_gpu_shader4\"\>"},
                    {"\<\"GL_EXT_multi_draw_arrays\"\>"},
                    {"\<\"GL_EXT_packed_depth_stencil\"\>"},
                    {"\<\"GL_EXT_packed_float\"\>"},
                    {"\<\"GL_EXT_packed_pixels\"\>"},
                    {"\<\"GL_EXT_pixel_buffer_object\"\>"},
                    {"\<\"GL_EXT_point_parameters\"\>"},
                    {"\<\"GL_EXT_polygon_offset_clamp\"\>"},
                    {"\<\"GL_EXT_provoking_vertex\"\>"},
                    {"\<\"GL_EXT_rescale_normal\"\>"},
                    {"\<\"GL_EXT_secondary_color\"\>"},
                    {"\<\"GL_EXT_separate_shader_objects\"\>"},
                    {"\<\"GL_EXT_separate_specular_color\"\>"},
                    {"\<\"GL_EXT_shader_image_load_formatted\"\>"},
                    {"\<\"GL_EXT_shader_image_load_store\"\>"},
                    {"\<\"GL_EXT_shader_integer_mix\"\>"},
                    {"\<\"GL_EXT_shadow_funcs\"\>"},
                    {"\<\"GL_EXT_stencil_two_side\"\>"},
                    {"\<\"GL_EXT_stencil_wrap\"\>"},
                    {"\<\"GL_EXT_texture3D\"\>"},
                    {"\<\"GL_EXT_texture_array\"\>"},
                    {"\<\"GL_EXT_texture_buffer_object\"\>"},
                    {"\<\"GL_EXT_texture_compression_dxt1\"\>"},
                    {"\<\"GL_EXT_texture_compression_latc\"\>"},
                    {"\<\"GL_EXT_texture_compression_rgtc\"\>"},
                    {"\<\"GL_EXT_texture_compression_s3tc\"\>"},
                    {"\<\"GL_EXT_texture_cube_map\"\>"},
                    {"\<\"GL_EXT_texture_edge_clamp\"\>"},
                    {"\<\"GL_EXT_texture_env_combine\"\>"},
                    {"\<\"GL_EXT_texture_env_dot3\"\>"},
                    {"\<\"GL_EXT_texture_filter_anisotropic\"\>"},
                    {"\<\"GL_EXT_texture_integer\"\>"},
                    {"\<\"GL_EXT_texture_lod\"\>"},
                    {"\<\"GL_EXT_texture_lod_bias\"\>"},
                    {"\<\"GL_EXT_texture_mirror_clamp\"\>"},
                    {"\<\"GL_EXT_texture_object\"\>"},
                    {"\<\"GL_EXT_texture_shared_exponent\"\>"},
                    {"\<\"GL_EXT_texture_sRGB\"\>"},
                    {"\<\"GL_EXT_texture_sRGB_decode\"\>"},
                    {"\<\"GL_EXT_texture_storage\"\>"},
                    {"\<\"GL_EXT_texture_swizzle\"\>"},
                    {"\<\"GL_EXT_timer_query\"\>"},
                    {"\<\"GL_EXT_transform_feedback2\"\>"},
                    {"\<\"GL_EXT_vertex_array\"\>"},
                    {"\<\"GL_EXT_vertex_array_bgra\"\>"},
                    {"\<\"GL_EXT_vertex_attrib_64bit\"\>"},
                    {"\<\"GL_EXT_import_sync_object\"\>"},
                    {"\<\"GL_IBM_rasterpos_clip\"\>"},
                    {"\<\"GL_IBM_texture_mirrored_repeat\"\>"},
                    {"\<\"GL_KHR_context_flush_control\"\>"},
                    {"\<\"GL_KHR_debug\"\>"},
                    {"\<\"GL_KHR_robust_buffer_access_behavior\"\>"},
                    {"\<\"GL_KHR_robustness\"\>"},
                    {"\<\"GL_KTX_buffer_region\"\>"},
                    {"\<\"GL_NV_bindless_multi_draw_indirect\"\>"},
                    {"\<\"GL_NV_bindless_multi_draw_indirect_count\"\>"},
                    {"\<\"GL_NV_bindless_texture\"\>"},
                    {"\<\"GL_NV_blend_equation_advanced\"\>"},
                    {"\<\"GL_NV_blend_equation_advanced_coherent\"\>"},
                    {"\<\"GL_NV_blend_square\"\>"},
                    {"\<\"GL_NV_command_list\"\>"},
                    {"\<\"GL_NV_compute_program5\"\>"},
                    {"\<\"GL_NV_conditional_render\"\>"},
                    {"\<\"GL_NV_copy_depth_to_color\"\>"},
                    {"\<\"GL_NV_copy_image\"\>"},
                    {"\<\"GL_NV_depth_buffer_float\"\>"},
                    {"\<\"GL_NV_depth_clamp\"\>"},
                    {"\<\"GL_NV_draw_texture\"\>"},
                    {"\<\"GL_NV_ES1_1_compatibility\"\>"},
                    {"\<\"GL_NV_ES3_1_compatibility\"\>"},
                    {"\<\"GL_NV_explicit_multisample\"\>"},
                    {"\<\"GL_NV_fence\"\>"},
                    {"\<\"GL_NV_float_buffer\"\>"},
                    {"\<\"GL_NV_fog_distance\"\>"},
                    {"\<\"GL_NV_fragment_program\"\>"},
                    {"\<\"GL_NV_fragment_program_option\"\>"},
                    {"\<\"GL_NV_fragment_program2\"\>"},
                    {"\<\"GL_NV_framebuffer_multisample_coverage\"\>"},
                    {"\<\"GL_NV_geometry_shader4\"\>"},
                    {"\<\"GL_NV_gpu_program4\"\>"},
                    {"\<\"GL_NV_gpu_program4_1\"\>"},
                    {"\<\"GL_NV_gpu_program5\"\>"},
                    {"\<\"GL_NV_gpu_program5_mem_extended\"\>"},
                    {"\<\"GL_NV_gpu_program_fp64\"\>"},
                    {"\<\"GL_NV_gpu_shader5\"\>"},
                    {"\<\"GL_NV_half_float\"\>"},
                    {"\<\"GL_NV_light_max_exponent\"\>"},
                    {"\<\"GL_NV_multisample_coverage\"\>"},
                    {"\<\"GL_NV_multisample_filter_hint\"\>"},
                    {"\<\"GL_NV_occlusion_query\"\>"},
                    {"\<\"GL_NV_packed_depth_stencil\"\>"},
                    {"\<\"GL_NV_parameter_buffer_object\"\>"},
                    {"\<\"GL_NV_parameter_buffer_object2\"\>"},
                    {"\<\"GL_NV_path_rendering\"\>"},
                    {"\<\"GL_NV_pixel_data_range\"\>"},
                    {"\<\"GL_NV_point_sprite\"\>"},
                    {"\<\"GL_NV_primitive_restart\"\>"},
                    {"\<\"GL_NV_register_combiners\"\>"},
                    {"\<\"GL_NV_register_combiners2\"\>"},
                    {"\<\"GL_NV_shader_atomic_counters\"\>"},
                    {"\<\"GL_NV_shader_atomic_float\"\>"},
                    {"\<\"GL_NV_shader_atomic_int64\"\>"},
                    {"\<\"GL_NV_shader_buffer_load\"\>"},
                    {"\<\"GL_NV_shader_storage_buffer_object\"\>"},
                    {"\<\"GL_NV_texgen_reflection\"\>"},
                    {"\<\"GL_NV_texture_barrier\"\>"},
                    {"\<\"GL_NV_texture_compression_vtc\"\>"},
                    {"\<\"GL_NV_texture_env_combine4\"\>"},
                    {"\<\"GL_NV_texture_multisample\"\>"},
                    {"\<\"GL_NV_texture_rectangle\"\>"},
                    {"\<\"GL_NV_texture_shader\"\>"},
                    {"\<\"GL_NV_texture_shader2\"\>"},
                    {"\<\"GL_NV_texture_shader3\"\>"},
                    {"\<\"GL_NV_transform_feedback\"\>"},
                    {"\<\"GL_NV_transform_feedback2\"\>"},
                    {"\<\"GL_NV_uniform_buffer_unified_memory\"\>"},
                    {"\<\"GL_NV_vertex_array_range\"\>"},
                    {"\<\"GL_NV_vertex_array_range2\"\>"},
                    {"\<\"GL_NV_vertex_attrib_integer_64bit\"\>"},
                    {"\<\"GL_NV_vertex_buffer_unified_memory\"\>"},
                    {"\<\"GL_NV_vertex_program\"\>"},
                    {"\<\"GL_NV_vertex_program1_1\"\>"},
                    {"\<\"GL_NV_vertex_program2\"\>"},
                    {"\<\"GL_NV_vertex_program2_option\"\>"},
                    {"\<\"GL_NV_vertex_program3\"\>"},
                    {"\<\"GL_NVX_conditional_render\"\>"},
                    {"\<\"GL_NVX_gpu_memory_info\"\>"},
                    {"\<\"GL_NVX_nvenc_interop\"\>"},
                    {"\<\"GL_NV_shader_thread_group\"\>"},
                    {"\<\"GL_NV_shader_thread_shuffle\"\>"},
                    {"\<\"GL_KHR_blend_equation_advanced\"\>"},
                    {"\<\"GL_KHR_blend_equation_advanced_coherent\"\>"},
                    {"\<\"GL_SGIS_generate_mipmap\"\>"},
                    {"\<\"GL_SGIS_texture_lod\"\>"},
                    {"\<\"GL_SGIX_depth_texture\"\>"},
                    {"\<\"GL_SGIX_shadow\"\>"},
                    {"\<\"GL_SUN_slice_accum\"\>"},
                    {"\<\"GL_WIN_swap_hint\"\>"},
                    {"\<\"WGL_EXT_swap_control\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {"\<\"Optimized 3D Transparency\"\>", "True"},
                 {"\<\"Max Samples\"\>", "32"}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "GraphicsSubsystemText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\": \"","\"OpenGL\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "GraphicsSubsystemText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\": \"","\"OpenGL\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Typical Uses\"\>", "\<\"Notebook 2D and 3D graphics, \
opacity, etc.\"\>"},
                 {"\<\"Vendor\"\>", "\<\"NVIDIA Corporation\"\>"},
                 {"\<\"Renderer\"\>", "\<\"GeForce GTX 745/PCIe/SSE2\"\>"},
                 {"\<\"Version\"\>", "\<\"4.5.0 NVIDIA 353.82\"\>"},
                 {"\<\"Extensions\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"319", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ExtensionsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"319", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ExtensionsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"GL_AMD_multi_draw_indirect\"\>"},
                    {"\<\"GL_AMD_seamless_cubemap_per_texture\"\>"},
                    {"\<\"GL_ARB_arrays_of_arrays\"\>"},
                    {"\<\"GL_ARB_base_instance\"\>"},
                    {"\<\"GL_ARB_bindless_texture\"\>"},
                    {"\<\"GL_ARB_blend_func_extended\"\>"},
                    {"\<\"GL_ARB_buffer_storage\"\>"},
                    {"\<\"GL_ARB_clear_buffer_object\"\>"},
                    {"\<\"GL_ARB_clear_texture\"\>"},
                    {"\<\"GL_ARB_clip_control\"\>"},
                    {"\<\"GL_ARB_color_buffer_float\"\>"},
                    {"\<\"GL_ARB_compatibility\"\>"},
                    {"\<\"GL_ARB_compressed_texture_pixel_storage\"\>"},
                    {"\<\"GL_ARB_conservative_depth\"\>"},
                    {"\<\"GL_ARB_compute_shader\"\>"},
                    {"\<\"GL_ARB_compute_variable_group_size\"\>"},
                    {"\<\"GL_ARB_conditional_render_inverted\"\>"},
                    {"\<\"GL_ARB_copy_buffer\"\>"},
                    {"\<\"GL_ARB_copy_image\"\>"},
                    {"\<\"GL_ARB_cull_distance\"\>"},
                    {"\<\"GL_ARB_debug_output\"\>"},
                    {"\<\"GL_ARB_depth_buffer_float\"\>"},
                    {"\<\"GL_ARB_depth_clamp\"\>"},
                    {"\<\"GL_ARB_depth_texture\"\>"},
                    {"\<\"GL_ARB_derivative_control\"\>"},
                    {"\<\"GL_ARB_direct_state_access\"\>"},
                    {"\<\"GL_ARB_draw_buffers\"\>"},
                    {"\<\"GL_ARB_draw_buffers_blend\"\>"},
                    {"\<\"GL_ARB_draw_indirect\"\>"},
                    {"\<\"GL_ARB_draw_elements_base_vertex\"\>"},
                    {"\<\"GL_ARB_draw_instanced\"\>"},
                    {"\<\"GL_ARB_enhanced_layouts\"\>"},
                    {"\<\"GL_ARB_ES2_compatibility\"\>"},
                    {"\<\"GL_ARB_ES3_compatibility\"\>"},
                    {"\<\"GL_ARB_ES3_1_compatibility\"\>"},
                    {"\<\"GL_ARB_explicit_attrib_location\"\>"},
                    {"\<\"GL_ARB_explicit_uniform_location\"\>"},
                    {"\<\"GL_ARB_fragment_coord_conventions\"\>"},
                    {"\<\"GL_ARB_fragment_layer_viewport\"\>"},
                    {"\<\"GL_ARB_fragment_program\"\>"},
                    {"\<\"GL_ARB_fragment_program_shadow\"\>"},
                    {"\<\"GL_ARB_fragment_shader\"\>"},
                    {"\<\"GL_ARB_framebuffer_no_attachments\"\>"},
                    {"\<\"GL_ARB_framebuffer_object\"\>"},
                    {"\<\"GL_ARB_framebuffer_sRGB\"\>"},
                    {"\<\"GL_ARB_geometry_shader4\"\>"},
                    {"\<\"GL_ARB_get_program_binary\"\>"},
                    {"\<\"GL_ARB_get_texture_sub_image\"\>"},
                    {"\<\"GL_ARB_gpu_shader5\"\>"},
                    {"\<\"GL_ARB_gpu_shader_fp64\"\>"},
                    {"\<\"GL_ARB_half_float_pixel\"\>"},
                    {"\<\"GL_ARB_half_float_vertex\"\>"},
                    {"\<\"GL_ARB_imaging\"\>"},
                    {"\<\"GL_ARB_indirect_parameters\"\>"},
                    {"\<\"GL_ARB_instanced_arrays\"\>"},
                    {"\<\"GL_ARB_internalformat_query\"\>"},
                    {"\<\"GL_ARB_internalformat_query2\"\>"},
                    {"\<\"GL_NV_internalformat_sample_query\"\>"},
                    {"\<\"GL_ARB_invalidate_subdata\"\>"},
                    {"\<\"GL_ARB_map_buffer_alignment\"\>"},
                    {"\<\"GL_ARB_map_buffer_range\"\>"},
                    {"\<\"GL_ARB_multi_bind\"\>"},
                    {"\<\"GL_ARB_multi_draw_indirect\"\>"},
                    {"\<\"GL_ARB_multisample\"\>"},
                    {"\<\"GL_ARB_multitexture\"\>"},
                    {"\<\"GL_ARB_occlusion_query\"\>"},
                    {"\<\"GL_ARB_occlusion_query2\"\>"},
                    {"\<\"GL_ARB_pipeline_statistics_query\"\>"},
                    {"\<\"GL_ARB_pixel_buffer_object\"\>"},
                    {"\<\"GL_ARB_point_parameters\"\>"},
                    {"\<\"GL_ARB_point_sprite\"\>"},
                    {"\<\"GL_ARB_program_interface_query\"\>"},
                    {"\<\"GL_ARB_provoking_vertex\"\>"},
                    {"\<\"GL_ARB_robust_buffer_access_behavior\"\>"},
                    {"\<\"GL_ARB_robustness\"\>"},
                    {"\<\"GL_ARB_sample_shading\"\>"},
                    {"\<\"GL_ARB_sampler_objects\"\>"},
                    {"\<\"GL_ARB_seamless_cube_map\"\>"},
                    {"\<\"GL_ARB_seamless_cubemap_per_texture\"\>"},
                    {"\<\"GL_ARB_separate_shader_objects\"\>"},
                    {"\<\"GL_ARB_shader_atomic_counters\"\>"},
                    {"\<\"GL_ARB_shader_bit_encoding\"\>"},
                    {"\<\"GL_ARB_shader_draw_parameters\"\>"},
                    {"\<\"GL_ARB_shader_group_vote\"\>"},
                    {"\<\"GL_ARB_shader_image_load_store\"\>"},
                    {"\<\"GL_ARB_shader_image_size\"\>"},
                    {"\<\"GL_ARB_shader_objects\"\>"},
                    {"\<\"GL_ARB_shader_precision\"\>"},
                    {"\<\"GL_ARB_query_buffer_object\"\>"},
                    {"\<\"GL_ARB_shader_storage_buffer_object\"\>"},
                    {"\<\"GL_ARB_shader_subroutine\"\>"},
                    {"\<\"GL_ARB_shader_texture_image_samples\"\>"},
                    {"\<\"GL_ARB_shader_texture_lod\"\>"},
                    {"\<\"GL_ARB_shading_language_100\"\>"},
                    {"\<\"GL_ARB_shading_language_420pack\"\>"},
                    {"\<\"GL_ARB_shading_language_include\"\>"},
                    {"\<\"GL_ARB_shading_language_packing\"\>"},
                    {"\<\"GL_ARB_shadow\"\>"},
                    {"\<\"GL_ARB_sparse_buffer\"\>"},
                    {"\<\"GL_ARB_sparse_texture\"\>"},
                    {"\<\"GL_ARB_stencil_texturing\"\>"},
                    {"\<\"GL_ARB_sync\"\>"},
                    {"\<\"GL_ARB_tessellation_shader\"\>"},
                    {"\<\"GL_ARB_texture_barrier\"\>"},
                    {"\<\"GL_ARB_texture_border_clamp\"\>"},
                    {"\<\"GL_ARB_texture_buffer_object\"\>"},
                    {"\<\"GL_ARB_texture_buffer_object_rgb32\"\>"},
                    {"\<\"GL_ARB_texture_buffer_range\"\>"},
                    {"\<\"GL_ARB_texture_compression\"\>"},
                    {"\<\"GL_ARB_texture_compression_bptc\"\>"},
                    {"\<\"GL_ARB_texture_compression_rgtc\"\>"},
                    {"\<\"GL_ARB_texture_cube_map\"\>"},
                    {"\<\"GL_ARB_texture_cube_map_array\"\>"},
                    {"\<\"GL_ARB_texture_env_add\"\>"},
                    {"\<\"GL_ARB_texture_env_combine\"\>"},
                    {"\<\"GL_ARB_texture_env_crossbar\"\>"},
                    {"\<\"GL_ARB_texture_env_dot3\"\>"},
                    {"\<\"GL_ARB_texture_float\"\>"},
                    {"\<\"GL_ARB_texture_gather\"\>"},
                    {"\<\"GL_ARB_texture_mirror_clamp_to_edge\"\>"},
                    {"\<\"GL_ARB_texture_mirrored_repeat\"\>"},
                    {"\<\"GL_ARB_texture_multisample\"\>"},
                    {"\<\"GL_ARB_texture_non_power_of_two\"\>"},
                    {"\<\"GL_ARB_texture_query_levels\"\>"},
                    {"\<\"GL_ARB_texture_query_lod\"\>"},
                    {"\<\"GL_ARB_texture_rectangle\"\>"},
                    {"\<\"GL_ARB_texture_rg\"\>"},
                    {"\<\"GL_ARB_texture_rgb10_a2ui\"\>"},
                    {"\<\"GL_ARB_texture_stencil8\"\>"},
                    {"\<\"GL_ARB_texture_storage\"\>"},
                    {"\<\"GL_ARB_texture_storage_multisample\"\>"},
                    {"\<\"GL_ARB_texture_swizzle\"\>"},
                    {"\<\"GL_ARB_texture_view\"\>"},
                    {"\<\"GL_ARB_timer_query\"\>"},
                    {"\<\"GL_ARB_transform_feedback2\"\>"},
                    {"\<\"GL_ARB_transform_feedback3\"\>"},
                    {"\<\"GL_ARB_transform_feedback_instanced\"\>"},
                    {"\<\"GL_ARB_transform_feedback_overflow_query\"\>"},
                    {"\<\"GL_ARB_transpose_matrix\"\>"},
                    {"\<\"GL_ARB_uniform_buffer_object\"\>"},
                    {"\<\"GL_ARB_vertex_array_bgra\"\>"},
                    {"\<\"GL_ARB_vertex_array_object\"\>"},
                    {"\<\"GL_ARB_vertex_attrib_64bit\"\>"},
                    {"\<\"GL_ARB_vertex_attrib_binding\"\>"},
                    {"\<\"GL_ARB_vertex_buffer_object\"\>"},
                    {"\<\"GL_ARB_vertex_program\"\>"},
                    {"\<\"GL_ARB_vertex_shader\"\>"},
                    {"\<\"GL_ARB_vertex_type_10f_11f_11f_rev\"\>"},
                    {"\<\"GL_ARB_vertex_type_2_10_10_10_rev\"\>"},
                    {"\<\"GL_ARB_viewport_array\"\>"},
                    {"\<\"GL_ARB_window_pos\"\>"},
                    {"\<\"GL_ATI_draw_buffers\"\>"},
                    {"\<\"GL_ATI_texture_float\"\>"},
                    {"\<\"GL_ATI_texture_mirror_once\"\>"},
                    {"\<\"GL_S3_s3tc\"\>"},
                    {"\<\"GL_EXT_texture_env_add\"\>"},
                    {"\<\"GL_EXT_abgr\"\>"},
                    {"\<\"GL_EXT_bgra\"\>"},
                    {"\<\"GL_EXT_bindable_uniform\"\>"},
                    {"\<\"GL_EXT_blend_color\"\>"},
                    {"\<\"GL_EXT_blend_equation_separate\"\>"},
                    {"\<\"GL_EXT_blend_func_separate\"\>"},
                    {"\<\"GL_EXT_blend_minmax\"\>"},
                    {"\<\"GL_EXT_blend_subtract\"\>"},
                    {"\<\"GL_EXT_compiled_vertex_array\"\>"},
                    {"\<\"GL_EXT_Cg_shader\"\>"},
                    {"\<\"GL_EXT_depth_bounds_test\"\>"},
                    {"\<\"GL_EXT_direct_state_access\"\>"},
                    {"\<\"GL_EXT_draw_buffers2\"\>"},
                    {"\<\"GL_EXT_draw_instanced\"\>"},
                    {"\<\"GL_EXT_draw_range_elements\"\>"},
                    {"\<\"GL_EXT_fog_coord\"\>"},
                    {"\<\"GL_EXT_framebuffer_blit\"\>"},
                    {"\<\"GL_EXT_framebuffer_multisample\"\>"},
                    {"\<\"GL_EXTX_framebuffer_mixed_formats\"\>"},
                    {"\<\"GL_EXT_framebuffer_multisample_blit_scaled\"\>"},
                    {"\<\"GL_EXT_framebuffer_object\"\>"},
                    {"\<\"GL_EXT_framebuffer_sRGB\"\>"},
                    {"\<\"GL_EXT_geometry_shader4\"\>"},
                    {"\<\"GL_EXT_gpu_program_parameters\"\>"},
                    {"\<\"GL_EXT_gpu_shader4\"\>"},
                    {"\<\"GL_EXT_multi_draw_arrays\"\>"},
                    {"\<\"GL_EXT_packed_depth_stencil\"\>"},
                    {"\<\"GL_EXT_packed_float\"\>"},
                    {"\<\"GL_EXT_packed_pixels\"\>"},
                    {"\<\"GL_EXT_pixel_buffer_object\"\>"},
                    {"\<\"GL_EXT_point_parameters\"\>"},
                    {"\<\"GL_EXT_polygon_offset_clamp\"\>"},
                    {"\<\"GL_EXT_provoking_vertex\"\>"},
                    {"\<\"GL_EXT_rescale_normal\"\>"},
                    {"\<\"GL_EXT_secondary_color\"\>"},
                    {"\<\"GL_EXT_separate_shader_objects\"\>"},
                    {"\<\"GL_EXT_separate_specular_color\"\>"},
                    {"\<\"GL_EXT_shader_image_load_formatted\"\>"},
                    {"\<\"GL_EXT_shader_image_load_store\"\>"},
                    {"\<\"GL_EXT_shader_integer_mix\"\>"},
                    {"\<\"GL_EXT_shadow_funcs\"\>"},
                    {"\<\"GL_EXT_stencil_two_side\"\>"},
                    {"\<\"GL_EXT_stencil_wrap\"\>"},
                    {"\<\"GL_EXT_texture3D\"\>"},
                    {"\<\"GL_EXT_texture_array\"\>"},
                    {"\<\"GL_EXT_texture_buffer_object\"\>"},
                    {"\<\"GL_EXT_texture_compression_dxt1\"\>"},
                    {"\<\"GL_EXT_texture_compression_latc\"\>"},
                    {"\<\"GL_EXT_texture_compression_rgtc\"\>"},
                    {"\<\"GL_EXT_texture_compression_s3tc\"\>"},
                    {"\<\"GL_EXT_texture_cube_map\"\>"},
                    {"\<\"GL_EXT_texture_edge_clamp\"\>"},
                    {"\<\"GL_EXT_texture_env_combine\"\>"},
                    {"\<\"GL_EXT_texture_env_dot3\"\>"},
                    {"\<\"GL_EXT_texture_filter_anisotropic\"\>"},
                    {"\<\"GL_EXT_texture_integer\"\>"},
                    {"\<\"GL_EXT_texture_lod\"\>"},
                    {"\<\"GL_EXT_texture_lod_bias\"\>"},
                    {"\<\"GL_EXT_texture_mirror_clamp\"\>"},
                    {"\<\"GL_EXT_texture_object\"\>"},
                    {"\<\"GL_EXT_texture_shared_exponent\"\>"},
                    {"\<\"GL_EXT_texture_sRGB\"\>"},
                    {"\<\"GL_EXT_texture_sRGB_decode\"\>"},
                    {"\<\"GL_EXT_texture_storage\"\>"},
                    {"\<\"GL_EXT_texture_swizzle\"\>"},
                    {"\<\"GL_EXT_timer_query\"\>"},
                    {"\<\"GL_EXT_transform_feedback2\"\>"},
                    {"\<\"GL_EXT_vertex_array\"\>"},
                    {"\<\"GL_EXT_vertex_array_bgra\"\>"},
                    {"\<\"GL_EXT_vertex_attrib_64bit\"\>"},
                    {"\<\"GL_EXT_import_sync_object\"\>"},
                    {"\<\"GL_IBM_rasterpos_clip\"\>"},
                    {"\<\"GL_IBM_texture_mirrored_repeat\"\>"},
                    {"\<\"GL_KHR_context_flush_control\"\>"},
                    {"\<\"GL_KHR_debug\"\>"},
                    {"\<\"GL_KHR_robust_buffer_access_behavior\"\>"},
                    {"\<\"GL_KHR_robustness\"\>"},
                    {"\<\"GL_KTX_buffer_region\"\>"},
                    {"\<\"GL_NV_bindless_multi_draw_indirect\"\>"},
                    {"\<\"GL_NV_bindless_multi_draw_indirect_count\"\>"},
                    {"\<\"GL_NV_bindless_texture\"\>"},
                    {"\<\"GL_NV_blend_equation_advanced\"\>"},
                    {"\<\"GL_NV_blend_equation_advanced_coherent\"\>"},
                    {"\<\"GL_NV_blend_square\"\>"},
                    {"\<\"GL_NV_command_list\"\>"},
                    {"\<\"GL_NV_compute_program5\"\>"},
                    {"\<\"GL_NV_conditional_render\"\>"},
                    {"\<\"GL_NV_copy_depth_to_color\"\>"},
                    {"\<\"GL_NV_copy_image\"\>"},
                    {"\<\"GL_NV_depth_buffer_float\"\>"},
                    {"\<\"GL_NV_depth_clamp\"\>"},
                    {"\<\"GL_NV_draw_texture\"\>"},
                    {"\<\"GL_NV_ES1_1_compatibility\"\>"},
                    {"\<\"GL_NV_ES3_1_compatibility\"\>"},
                    {"\<\"GL_NV_explicit_multisample\"\>"},
                    {"\<\"GL_NV_fence\"\>"},
                    {"\<\"GL_NV_float_buffer\"\>"},
                    {"\<\"GL_NV_fog_distance\"\>"},
                    {"\<\"GL_NV_fragment_program\"\>"},
                    {"\<\"GL_NV_fragment_program_option\"\>"},
                    {"\<\"GL_NV_fragment_program2\"\>"},
                    {"\<\"GL_NV_framebuffer_multisample_coverage\"\>"},
                    {"\<\"GL_NV_geometry_shader4\"\>"},
                    {"\<\"GL_NV_gpu_program4\"\>"},
                    {"\<\"GL_NV_gpu_program4_1\"\>"},
                    {"\<\"GL_NV_gpu_program5\"\>"},
                    {"\<\"GL_NV_gpu_program5_mem_extended\"\>"},
                    {"\<\"GL_NV_gpu_program_fp64\"\>"},
                    {"\<\"GL_NV_gpu_shader5\"\>"},
                    {"\<\"GL_NV_half_float\"\>"},
                    {"\<\"GL_NV_light_max_exponent\"\>"},
                    {"\<\"GL_NV_multisample_coverage\"\>"},
                    {"\<\"GL_NV_multisample_filter_hint\"\>"},
                    {"\<\"GL_NV_occlusion_query\"\>"},
                    {"\<\"GL_NV_packed_depth_stencil\"\>"},
                    {"\<\"GL_NV_parameter_buffer_object\"\>"},
                    {"\<\"GL_NV_parameter_buffer_object2\"\>"},
                    {"\<\"GL_NV_path_rendering\"\>"},
                    {"\<\"GL_NV_pixel_data_range\"\>"},
                    {"\<\"GL_NV_point_sprite\"\>"},
                    {"\<\"GL_NV_primitive_restart\"\>"},
                    {"\<\"GL_NV_register_combiners\"\>"},
                    {"\<\"GL_NV_register_combiners2\"\>"},
                    {"\<\"GL_NV_shader_atomic_counters\"\>"},
                    {"\<\"GL_NV_shader_atomic_float\"\>"},
                    {"\<\"GL_NV_shader_atomic_int64\"\>"},
                    {"\<\"GL_NV_shader_buffer_load\"\>"},
                    {"\<\"GL_NV_shader_storage_buffer_object\"\>"},
                    {"\<\"GL_NV_texgen_reflection\"\>"},
                    {"\<\"GL_NV_texture_barrier\"\>"},
                    {"\<\"GL_NV_texture_compression_vtc\"\>"},
                    {"\<\"GL_NV_texture_env_combine4\"\>"},
                    {"\<\"GL_NV_texture_multisample\"\>"},
                    {"\<\"GL_NV_texture_rectangle\"\>"},
                    {"\<\"GL_NV_texture_shader\"\>"},
                    {"\<\"GL_NV_texture_shader2\"\>"},
                    {"\<\"GL_NV_texture_shader3\"\>"},
                    {"\<\"GL_NV_transform_feedback\"\>"},
                    {"\<\"GL_NV_transform_feedback2\"\>"},
                    {"\<\"GL_NV_uniform_buffer_unified_memory\"\>"},
                    {"\<\"GL_NV_vertex_array_range\"\>"},
                    {"\<\"GL_NV_vertex_array_range2\"\>"},
                    {"\<\"GL_NV_vertex_attrib_integer_64bit\"\>"},
                    {"\<\"GL_NV_vertex_buffer_unified_memory\"\>"},
                    {"\<\"GL_NV_vertex_program\"\>"},
                    {"\<\"GL_NV_vertex_program1_1\"\>"},
                    {"\<\"GL_NV_vertex_program2\"\>"},
                    {"\<\"GL_NV_vertex_program2_option\"\>"},
                    {"\<\"GL_NV_vertex_program3\"\>"},
                    {"\<\"GL_NVX_conditional_render\"\>"},
                    {"\<\"GL_NVX_gpu_memory_info\"\>"},
                    {"\<\"GL_NVX_nvenc_interop\"\>"},
                    {"\<\"GL_NV_shader_thread_group\"\>"},
                    {"\<\"GL_NV_shader_thread_shuffle\"\>"},
                    {"\<\"GL_KHR_blend_equation_advanced\"\>"},
                    {"\<\"GL_KHR_blend_equation_advanced_coherent\"\>"},
                    {"\<\"GL_SGIS_generate_mipmap\"\>"},
                    {"\<\"GL_SGIS_texture_lod\"\>"},
                    {"\<\"GL_SGIX_depth_texture\"\>"},
                    {"\<\"GL_SGIX_shadow\"\>"},
                    {"\<\"GL_SUN_slice_accum\"\>"},
                    {"\<\"GL_WIN_swap_hint\"\>"},
                    {"\<\"WGL_EXT_swap_control\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {"\<\"Optimized 3D Transparency\"\>", "True"},
                 {"\<\"Max Samples\"\>", "32"}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "GraphicsSubsystemText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\": \"","\"Mesa\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "GraphicsSubsystemText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\": \"","\"Mesa\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Typical Uses\"\>", "\<\"Graphics printing\"\>"},
                 {"\<\"Vendor\"\>", "\<\"VMware, Inc.\"\>"},
                 {"\<\"Renderer\"\>", "\<\"Gallium 0.4 on llvmpipe (LLVM 3.6, \
256 bits)\"\>"},
                 {"\<\"Version\"\>", "\<\"3.0 Mesa 10.6.8 (git-fbfd450)\"\>"},
                 {"\<\"Extensions\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"199", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ExtensionsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"199", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ExtensionsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"GL_ARB_multisample\"\>"},
                    {"\<\"GL_EXT_abgr\"\>"},
                    {"\<\"GL_EXT_bgra\"\>"},
                    {"\<\"GL_EXT_blend_color\"\>"},
                    {"\<\"GL_EXT_blend_minmax\"\>"},
                    {"\<\"GL_EXT_blend_subtract\"\>"},
                    {"\<\"GL_EXT_copy_texture\"\>"},
                    {"\<\"GL_EXT_polygon_offset\"\>"},
                    {"\<\"GL_EXT_subtexture\"\>"},
                    {"\<\"GL_EXT_texture_object\"\>"},
                    {"\<\"GL_EXT_vertex_array\"\>"},
                    {"\<\"GL_EXT_compiled_vertex_array\"\>"},
                    {"\<\"GL_EXT_texture\"\>"},
                    {"\<\"GL_EXT_texture3D\"\>"},
                    {"\<\"GL_IBM_rasterpos_clip\"\>"},
                    {"\<\"GL_ARB_point_parameters\"\>"},
                    {"\<\"GL_EXT_draw_range_elements\"\>"},
                    {"\<\"GL_EXT_packed_pixels\"\>"},
                    {"\<\"GL_EXT_point_parameters\"\>"},
                    {"\<\"GL_EXT_rescale_normal\"\>"},
                    {"\<\"GL_EXT_separate_specular_color\"\>"},
                    {"\<\"GL_EXT_texture_edge_clamp\"\>"},
                    {"\<\"GL_SGIS_generate_mipmap\"\>"},
                    {"\<\"GL_SGIS_texture_border_clamp\"\>"},
                    {"\<\"GL_SGIS_texture_edge_clamp\"\>"},
                    {"\<\"GL_SGIS_texture_lod\"\>"},
                    {"\<\"GL_ARB_framebuffer_sRGB\"\>"},
                    {"\<\"GL_ARB_multitexture\"\>"},
                    {"\<\"GL_EXT_framebuffer_sRGB\"\>"},
                    {"\<\"GL_IBM_multimode_draw_arrays\"\>"},
                    {"\<\"GL_IBM_texture_mirrored_repeat\"\>"},
                    {"\<\"GL_ARB_texture_cube_map\"\>"},
                    {"\<\"GL_ARB_texture_env_add\"\>"},
                    {"\<\"GL_ARB_transpose_matrix\"\>"},
                    {"\<\"GL_EXT_blend_func_separate\"\>"},
                    {"\<\"GL_EXT_fog_coord\"\>"},
                    {"\<\"GL_EXT_multi_draw_arrays\"\>"},
                    {"\<\"GL_EXT_secondary_color\"\>"},
                    {"\<\"GL_EXT_texture_env_add\"\>"},
                    {"\<\"GL_EXT_texture_lod_bias\"\>"},
                    {"\<\"GL_INGR_blend_func_separate\"\>"},
                    {"\<\"GL_NV_blend_square\"\>"},
                    {"\<\"GL_NV_light_max_exponent\"\>"},
                    {"\<\"GL_NV_texgen_reflection\"\>"},
                    {"\<\"GL_NV_texture_env_combine4\"\>"},
                    {"\<\"GL_SUN_multi_draw_arrays\"\>"},
                    {"\<\"GL_ARB_texture_border_clamp\"\>"},
                    {"\<\"GL_ARB_texture_compression\"\>"},
                    {"\<\"GL_EXT_framebuffer_object\"\>"},
                    {"\<\"GL_EXT_texture_env_combine\"\>"},
                    {"\<\"GL_EXT_texture_env_dot3\"\>"},
                    {"\<\"GL_MESA_window_pos\"\>"},
                    {"\<\"GL_NV_packed_depth_stencil\"\>"},
                    {"\<\"GL_NV_texture_rectangle\"\>"},
                    {"\<\"GL_ARB_depth_texture\"\>"},
                    {"\<\"GL_ARB_occlusion_query\"\>"},
                    {"\<\"GL_ARB_shadow\"\>"},
                    {"\<\"GL_ARB_texture_env_combine\"\>"},
                    {"\<\"GL_ARB_texture_env_crossbar\"\>"},
                    {"\<\"GL_ARB_texture_env_dot3\"\>"},
                    {"\<\"GL_ARB_texture_mirrored_repeat\"\>"},
                    {"\<\"GL_ARB_window_pos\"\>"},
                    {"\<\"GL_EXT_stencil_two_side\"\>"},
                    {"\<\"GL_EXT_texture_cube_map\"\>"},
                    {"\<\"GL_NV_depth_clamp\"\>"},
                    {"\<\"GL_NV_fog_distance\"\>"},
                    {"\<\"GL_APPLE_packed_pixels\"\>"},
                    {"\<\"GL_APPLE_vertex_array_object\"\>"},
                    {"\<\"GL_ARB_draw_buffers\"\>"},
                    {"\<\"GL_ARB_fragment_program\"\>"},
                    {"\<\"GL_ARB_fragment_shader\"\>"},
                    {"\<\"GL_ARB_shader_objects\"\>"},
                    {"\<\"GL_ARB_vertex_program\"\>"},
                    {"\<\"GL_ARB_vertex_shader\"\>"},
                    {"\<\"GL_ATI_draw_buffers\"\>"},
                    {"\<\"GL_ATI_texture_env_combine3\"\>"},
                    {"\<\"GL_ATI_texture_float\"\>"},
                    {"\<\"GL_EXT_shadow_funcs\"\>"},
                    {"\<\"GL_EXT_stencil_wrap\"\>"},
                    {"\<\"GL_MESA_pack_invert\"\>"},
                    {"\<\"GL_MESA_ycbcr_texture\"\>"},
                    {"\<\"GL_NV_primitive_restart\"\>"},
                    {"\<\"GL_ARB_depth_clamp\"\>"},
                    {"\<\"GL_ARB_fragment_program_shadow\"\>"},
                    {"\<\"GL_ARB_half_float_pixel\"\>"},
                    {"\<\"GL_ARB_occlusion_query2\"\>"},
                    {"\<\"GL_ARB_point_sprite\"\>"},
                    {"\<\"GL_ARB_shading_language_100\"\>"},
                    {"\<\"GL_ARB_sync\"\>"},
                    {"\<\"GL_ARB_texture_non_power_of_two\"\>"},
                    {"\<\"GL_ARB_vertex_buffer_object\"\>"},
                    {"\<\"GL_ATI_blend_equation_separate\"\>"},
                    {"\<\"GL_EXT_blend_equation_separate\"\>"},
                    {"\<\"GL_OES_read_format\"\>"},
                    {"\<\"GL_ARB_color_buffer_float\"\>"},
                    {"\<\"GL_ARB_pixel_buffer_object\"\>"},
                    {"\<\"GL_ARB_texture_compression_rgtc\"\>"},
                    {"\<\"GL_ARB_texture_float\"\>"},
                    {"\<\"GL_ARB_texture_rectangle\"\>"},
                    {"\<\"GL_ATI_texture_compression_3dc\"\>"},
                    {"\<\"GL_EXT_packed_float\"\>"},
                    {"\<\"GL_EXT_pixel_buffer_object\"\>"},
                    {"\<\"GL_EXT_texture_compression_rgtc\"\>"},
                    {"\<\"GL_EXT_texture_mirror_clamp\"\>"},
                    {"\<\"GL_EXT_texture_rectangle\"\>"},
                    {"\<\"GL_EXT_texture_sRGB\"\>"},
                    {"\<\"GL_EXT_texture_shared_exponent\"\>"},
                    {"\<\"GL_ARB_framebuffer_object\"\>"},
                    {"\<\"GL_EXT_framebuffer_blit\"\>"},
                    {"\<\"GL_EXT_framebuffer_multisample\"\>"},
                    {"\<\"GL_EXT_packed_depth_stencil\"\>"},
                    {"\<\"GL_ARB_vertex_array_object\"\>"},
                    {"\<\"GL_ATI_separate_stencil\"\>"},
                    {"\<\"GL_ATI_texture_mirror_once\"\>"},
                    {"\<\"GL_EXT_draw_buffers2\"\>"},
                    {"\<\"GL_EXT_draw_instanced\"\>"},
                    {"\<\"GL_EXT_gpu_program_parameters\"\>"},
                    {"\<\"GL_EXT_texture_array\"\>"},
                    {"\<\"GL_EXT_texture_compression_latc\"\>"},
                    {"\<\"GL_EXT_texture_integer\"\>"},
                    {"\<\"GL_EXT_texture_sRGB_decode\"\>"},
                    {"\<\"GL_EXT_timer_query\"\>"},
                    {"\<\"GL_OES_EGL_image\"\>"},
                    {"\<\"GL_ARB_copy_buffer\"\>"},
                    {"\<\"GL_ARB_depth_buffer_float\"\>"},
                    {"\<\"GL_ARB_draw_instanced\"\>"},
                    {"\<\"GL_ARB_half_float_vertex\"\>"},
                    {"\<\"GL_ARB_instanced_arrays\"\>"},
                    {"\<\"GL_ARB_map_buffer_range\"\>"},
                    {"\<\"GL_ARB_texture_rg\"\>"},
                    {"\<\"GL_ARB_texture_swizzle\"\>"},
                    {"\<\"GL_ARB_vertex_array_bgra\"\>"},
                    {"\<\"GL_EXT_texture_swizzle\"\>"},
                    {"\<\"GL_EXT_vertex_array_bgra\"\>"},
                    {"\<\"GL_NV_conditional_render\"\>"},
                    {"\<\"GL_AMD_conservative_depth\"\>"},
                    {"\<\"GL_AMD_draw_buffers_blend\"\>"},
                    {"\<\"GL_AMD_seamless_cubemap_per_texture\"\>"},
                    {"\<\"GL_ARB_ES2_compatibility\"\>"},
                    {"\<\"GL_ARB_blend_func_extended\"\>"},
                    {"\<\"GL_ARB_debug_output\"\>"},
                    {"\<\"GL_ARB_draw_buffers_blend\"\>"},
                    {"\<\"GL_ARB_draw_elements_base_vertex\"\>"},
                    {"\<\"GL_ARB_explicit_attrib_location\"\>"},
                    {"\<\"GL_ARB_fragment_coord_conventions\"\>"},
                    {"\<\"GL_ARB_provoking_vertex\"\>"},
                    {"\<\"GL_ARB_sampler_objects\"\>"},
                    {"\<\"GL_ARB_seamless_cube_map\"\>"},
                    {"\<\"GL_ARB_shader_texture_lod\"\>"},
                    {"\<\"GL_ARB_texture_cube_map_array\"\>"},
                    {"\<\"GL_ARB_texture_gather\"\>"},
                    {"\<\"GL_ARB_texture_multisample\"\>"},
                    {"\<\"GL_ARB_texture_rgb10_a2ui\"\>"},
                    {"\<\"GL_ARB_uniform_buffer_object\"\>"},
                    {"\<\"GL_ARB_vertex_type_2_10_10_10_rev\"\>"},
                    {"\<\"GL_EXT_provoking_vertex\"\>"},
                    {"\<\"GL_EXT_texture_snorm\"\>"},
                    {"\<\"GL_MESA_texture_signed_rgba\"\>"},
                    {"\<\"GL_ARB_get_program_binary\"\>"},
                    {"\<\"GL_ARB_robustness\"\>"},
                    {"\<\"GL_ARB_separate_shader_objects\"\>"},
                    {"\<\"GL_ARB_shader_bit_encoding\"\>"},
                    {"\<\"GL_ARB_timer_query\"\>"},
                    {"\<\"GL_ARB_transform_feedback2\"\>"},
                    {"\<\"GL_ARB_transform_feedback3\"\>"},
                    {"\<\"GL_ARB_base_instance\"\>"},
                    {"\<\"GL_ARB_compressed_texture_pixel_storage\"\>"},
                    {"\<\"GL_ARB_conservative_depth\"\>"},
                    {"\<\"GL_ARB_internalformat_query\"\>"},
                    {"\<\"GL_ARB_map_buffer_alignment\"\>"},
                    {"\<\"GL_ARB_shading_language_420pack\"\>"},
                    {"\<\"GL_ARB_shading_language_packing\"\>"},
                    {"\<\"GL_ARB_texture_storage\"\>"},
                    {"\<\"GL_ARB_transform_feedback_instanced\"\>"},
                    {"\<\"GL_EXT_framebuffer_multisample_blit_scaled\"\>"},
                    {"\<\"GL_EXT_transform_feedback\"\>"},
                    {"\<\"GL_AMD_shader_trinary_minmax\"\>"},
                    {"\<\"GL_ARB_ES3_compatibility\"\>"},
                    {"\<\"GL_ARB_clear_buffer_object\"\>"},
                    {"\<\"GL_ARB_explicit_uniform_location\"\>"},
                    {"\<\"GL_ARB_invalidate_subdata\"\>"},
                    {"\<\"GL_ARB_program_interface_query\"\>"},
                    {"\<\"GL_ARB_stencil_texturing\"\>"},
                    {"\<\"GL_ARB_texture_query_levels\"\>"},
                    {"\<\"GL_ARB_texture_storage_multisample\"\>"},
                    {"\<\"GL_ARB_texture_view\"\>"},
                    {"\<\"GL_ARB_vertex_attrib_binding\"\>"},
                    {"\<\"GL_KHR_debug\"\>"},
                    {"\<\"GL_ARB_buffer_storage\"\>"},
                    {"\<\"GL_ARB_multi_bind\"\>"},
                    {"\<\"GL_ARB_seamless_cubemap_per_texture\"\>"},
                    {"\<\"GL_ARB_texture_mirror_clamp_to_edge\"\>"},
                    {"\<\"GL_ARB_texture_stencil8\"\>"},
                    {"\<\"GL_ARB_vertex_type_10f_11f_11f_rev\"\>"},
                    {"\<\"GL_EXT_shader_integer_mix\"\>"},
                    {"\<\"GL_ARB_clip_control\"\>"},
                    {"\<\"GL_ARB_conditional_render_inverted\"\>"},
                    {"\<\"GL_EXT_polygon_offset_clamp\"\>"},
                    {"\<\"GL_KHR_context_flush_control\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {"\<\"Optimized 3D Transparency\"\>", "True"},
                 {"\<\"Max Samples\"\>", "0"}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "ControllerDeviceText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\" \"","\"1\"","\": \"","\"USB Receiver\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControllerDeviceText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\" \"","\"1\"","\": \"","\"USB Receiver\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Raw Product Name\"\>", "\<\"\\\"USB Receiver\\\"\"\>"},
                 {"\<\"Raw Product ID\"\>", "50475"},
                 {"\<\"Device Type\"\>", "\<\"Windows DirectInput Device\"\>"},
                 {"\<\"Raw Controller Type\"\>", "\<\"External \
Controller\"\>"},
                 {"\<\"Wolfram Language Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {"\<\"Raw Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"3", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"3", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    
                    DynamicModuleBox[{System`InfoDump`dynamic$$ = True}, 
                    GridBox[{
                    {
                    PaneSelectorBox[{False->GridBox[{
                    {"\<\"SystemSleep Button\"\>", "False"},
                    {"\<\"SystemPowerDown Button\"\>", "False"},
                    {"\<\"SystemWakeUp Button\"\>", "False"}
                    },
                    AutoDelete->False,
                    
                    GridBoxAlignment->{
                    "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    True->
                    DynamicBox[ToBoxes[
                    Grid[
                    
                    Transpose[{{"SystemSleep Button", 
                    "SystemPowerDown Button", "SystemWakeUp Button"}, 
                    ControllerState[
                    1, {"SystemSleep Button", "SystemPowerDown Button", 
                    "SystemWakeUp Button"}]}], 
                    ColumnAlignments -> {Right, Left}, StripOnInput -> True], 
                    StandardForm]]}, Dynamic[System`InfoDump`dynamic$$]]},
                    {
                    TemplateBox[{CheckboxBox[
                    Dynamic[System`InfoDump`dynamic$$], ImageSize -> Small],
                    "\" Show Dynamic Values\""},
                    "RowDefault"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    DynamicModuleValues:>{}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "ControllerDeviceText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\" \"","\"2\"","\": \"","\"USB Receiver\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControllerDeviceText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\" \"","\"2\"","\": \"","\"USB Receiver\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Raw Product Name\"\>", "\<\"\\\"USB Receiver\\\"\"\>"},
                 {"\<\"Raw Product ID\"\>", "50475"},
                 {"\<\"Device Type\"\>", "\<\"Windows DirectInput Device\"\>"},
                 {"\<\"Raw Controller Type\"\>", "\<\"External \
Controller\"\>"},
                 {"\<\"Wolfram Language Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {"\<\"Raw Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "ControllerDeviceText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\" \"","\"3\"","\": \"","\"USB Receiver\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControllerDeviceText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\" \"","\"3\"","\": \"","\"USB Receiver\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Raw Product Name\"\>", "\<\"\\\"USB Receiver\\\"\"\>"},
                 {"\<\"Raw Product ID\"\>", "50475"},
                 {"\<\"Device Type\"\>", "\<\"Windows DirectInput Device\"\>"},
                 {"\<\"Raw Controller Type\"\>", "\<\"External \
Controller\"\>"},
                 {"\<\"Wolfram Language Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {"\<\"Raw Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "ControllerDeviceText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\" \"","\"4\"","\": \"","\"USB Receiver\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControllerDeviceText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\" \"","\"4\"","\": \"","\"USB Receiver\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Raw Product Name\"\>", "\<\"\\\"USB Receiver\\\"\"\>"},
                 {"\<\"Raw Product ID\"\>", "50475"},
                 {"\<\"Device Type\"\>", "\<\"Windows DirectInput Device\"\>"},
                 {"\<\"Raw Controller Type\"\>", "\<\"External \
Controller\"\>"},
                 {"\<\"Wolfram Language Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {"\<\"Raw Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "ControllerDeviceText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\" \"","\"5\"","\": \"","\"USB Receiver\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControllerDeviceText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\" \"","\"5\"","\": \"","\"USB Receiver\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Raw Product Name\"\>", "\<\"\\\"USB Receiver\\\"\"\>"},
                 {"\<\"Raw Product ID\"\>", "50475"},
                 {"\<\"Device Type\"\>", "\<\"Windows DirectInput Device\"\>"},
                 {"\<\"Raw Controller Type\"\>", "\<\"External \
Controller\"\>"},
                 {"\<\"Wolfram Language Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {"\<\"Raw Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "ControllerDeviceText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\" \"","\"6\"","\": \"","\"Yubikey 4 OTP+U2F+CCID\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControllerDeviceText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\" \"","\"6\"","\": \"",
                   "\"Yubikey 4 OTP+U2F+CCID\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Raw Product Name\"\>", "\<\"\\\"Yubikey 4 OTP+U2F+CCID\
\\\"\"\>"},
                 {"\<\"Raw Product ID\"\>", "1031"},
                 {"\<\"Device Type\"\>", "\<\"Windows DirectInput Device\"\>"},
                 {"\<\"Raw Controller Type\"\>", "\<\"External \
Controller\"\>"},
                 {"\<\"Wolfram Language Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {"\<\"Raw Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "ControllerDeviceText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\" \"","\"7\"","\": \"","\"Dell USB Keyboard\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControllerDeviceText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\" \"","\"7\"","\": \"","\"Dell USB Keyboard\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Raw Product Name\"\>", "\<\"\\\"Dell USB \
Keyboard\\\"\"\>"},
                 {"\<\"Raw Product ID\"\>", "8208"},
                 {"\<\"Device Type\"\>", "\<\"Windows DirectInput Device\"\>"},
                 {"\<\"Raw Controller Type\"\>", "\<\"External \
Controller\"\>"},
                 {"\<\"Wolfram Language Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {"\<\"Raw Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"2", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"2", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    
                    DynamicModuleBox[{System`InfoDump`dynamic$$ = True}, 
                    GridBox[{
                    {
                    PaneSelectorBox[{False->GridBox[{
                    {"\<\"Unknown Axis\"\>", "2.3283064365386963`*^-10"},
                    {"\<\"Mute Button\"\>", "False"}
                    },
                    AutoDelete->False,
                    
                    GridBoxAlignment->{
                    "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    True->
                    DynamicBox[ToBoxes[
                    Grid[
                    Transpose[{{"Unknown Axis", "Mute Button"}, 
                    ControllerState[7, {"Unknown Axis", "Mute Button"}]}], 
                    ColumnAlignments -> {Right, Left}, StripOnInput -> True], 
                    StandardForm]]}, Dynamic[System`InfoDump`dynamic$$]]},
                    {
                    TemplateBox[{CheckboxBox[
                    Dynamic[System`InfoDump`dynamic$$], ImageSize -> Small],
                    "\" Show Dynamic Values\""},
                    "RowDefault"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    DynamicModuleValues:>{}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "ControllerDeviceText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\" \"","\"8\"","\": \"","\"Dell USB Keyboard\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControllerDeviceText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\" \"","\"8\"","\": \"","\"Dell USB Keyboard\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Raw Product Name\"\>", "\<\"\\\"Dell USB \
Keyboard\\\"\"\>"},
                 {"\<\"Raw Product ID\"\>", "8208"},
                 {"\<\"Device Type\"\>", "\<\"Windows DirectInput Device\"\>"},
                 {"\<\"Raw Controller Type\"\>", "\<\"External \
Controller\"\>"},
                 {"\<\"Wolfram Language Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {"\<\"Raw Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"3", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"3", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    
                    DynamicModuleBox[{System`InfoDump`dynamic$$ = True}, 
                    GridBox[{
                    {
                    PaneSelectorBox[{False->GridBox[{
                    {"\<\"SystemSleep Button\"\>", "False"},
                    {"\<\"SystemSleep Button 2\"\>", "False"},
                    {"\<\"SystemSleep Button 3\"\>", "False"}
                    },
                    AutoDelete->False,
                    
                    GridBoxAlignment->{
                    "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    True->
                    DynamicBox[ToBoxes[
                    Grid[
                    
                    Transpose[{{"SystemSleep Button", "SystemSleep Button 2", 
                    "SystemSleep Button 3"}, 
                    ControllerState[
                    8, {"SystemSleep Button", "SystemSleep Button 2", 
                    "SystemSleep Button 3"}]}], 
                    ColumnAlignments -> {Right, Left}, StripOnInput -> True], 
                    StandardForm]]}, Dynamic[System`InfoDump`dynamic$$]]},
                    {
                    TemplateBox[{CheckboxBox[
                    Dynamic[System`InfoDump`dynamic$$], ImageSize -> Small],
                    "\" Show Dynamic Values\""},
                    "RowDefault"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    DynamicModuleValues:>{}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "ControllerDeviceText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\" \"","\"9\"","\": \"","\"Dell USB Keyboard\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControllerDeviceText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\" \"","\"9\"","\": \"","\"Dell USB Keyboard\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Raw Product Name\"\>", "\<\"\\\"Dell USB \
Keyboard\\\"\"\>"},
                 {"\<\"Raw Product ID\"\>", "8208"},
                 {"\<\"Device Type\"\>", "\<\"Windows DirectInput Device\"\>"},
                 {"\<\"Raw Controller Type\"\>", "\<\"External \
Controller\"\>"},
                 {"\<\"Wolfram Language Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {"\<\"Raw Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"13", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"13", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    
                    DynamicModuleBox[{System`InfoDump`dynamic$$ = True}, 
                    GridBox[{
                    {
                    PaneSelectorBox[{False->GridBox[{
                    {"\<\"ACRefresh Button\"\>", "False"},
                    {"\<\"ALLocalMachineBrowser Button\"\>", "False"},
                    {"\<\"ACHome Button\"\>", "False"},
                    {"\<\"ALEmailReader Button\"\>", "False"},
                    {"\<\"ALCalculator Button\"\>", "False"},
                    {"\<\"ACStop Button\"\>", "False"},
                    {"\<\"ACForward Button\"\>", "False"},
                    {"\<\"ACBack Button\"\>", "False"},
                    {"\<\"ScanNextTrack Button\"\>", "False"},
                    {"\<\"ScanPreviousTrack Button\"\>", "False"},
                    {"\<\"PlayOrPause Button\"\>", "False"},
                    {"\<\"Stop Button\"\>", "False"},
                    {"\<\"ALConsumerControlConfiguration Button\"\>", "False"}
                    },
                    AutoDelete->False,
                    
                    GridBoxAlignment->{
                    "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    True->
                    DynamicBox[ToBoxes[
                    Grid[
                    
                    Transpose[{{"ACRefresh Button", 
                    "ALLocalMachineBrowser Button", "ACHome Button", 
                    "ALEmailReader Button", "ALCalculator Button", 
                    "ACStop Button", "ACForward Button", "ACBack Button", 
                    "ScanNextTrack Button", "ScanPreviousTrack Button", 
                    "PlayOrPause Button", "Stop Button", 
                    "ALConsumerControlConfiguration Button"}, 
                    ControllerState[
                    9, {"ACRefresh Button", "ALLocalMachineBrowser Button", 
                    "ACHome Button", "ALEmailReader Button", 
                    "ALCalculator Button", "ACStop Button", 
                    "ACForward Button", "ACBack Button", 
                    "ScanNextTrack Button", "ScanPreviousTrack Button", 
                    "PlayOrPause Button", "Stop Button", 
                    "ALConsumerControlConfiguration Button"}]}], 
                    ColumnAlignments -> {Right, Left}, StripOnInput -> True], 
                    StandardForm]]}, Dynamic[System`InfoDump`dynamic$$]]},
                    {
                    TemplateBox[{CheckboxBox[
                    Dynamic[System`InfoDump`dynamic$$], ImageSize -> Small],
                    "\" Show Dynamic Values\""},
                    "RowDefault"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    DynamicModuleValues:>{}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              TemplateBox[{StyleBox[
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource[
                   "SystemInformationDialog", "ControllerDeviceText"], 
                   StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                 False],"\" \"","\"10\"","\": \"","\"USB Receiver\""},
               "RowDefault"],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 TemplateBox[{StyleBox[
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControllerDeviceText"], 
                    StandardForm]], DynamicUpdating -> True, StripOnInput -> 
                    False],"\" \"","\"10\"","\": \"","\"USB Receiver\""},
                  "RowDefault"],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {"\<\"Raw Product Name\"\>", "\<\"\\\"USB Receiver\\\"\"\>"},
                 {"\<\"Raw Product ID\"\>", "50475"},
                 {"\<\"Device Type\"\>", "\<\"Windows DirectInput Device\"\>"},
                 {"\<\"Raw Controller Type\"\>", "\<\"External \
Controller\"\>"},
                 {"\<\"Wolfram Language Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"0", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {"\<\"\[Null]\"\>"}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]},
                 {"\<\"Raw Controls\"\>", 
                  DynamicModuleBox[{System`InfoDump`open$$ = False}, 
                   PaneSelectorBox[{False->
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"652", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}], True->GridBox[{
                    {
                    RowBox[{
                    OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                    StyleBox[
                    RowBox[{"652", "\[InvisibleSpace]", 
                    StyleBox[
                    DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "ControlsSmallText"], 
                    StandardForm]],
                    StripOnInput->False,
                    DynamicUpdating->True]}], "IT",
                    StripOnInput->False]}]},
                    {
                    
                    DynamicModuleBox[{System`InfoDump`dynamic$$ = True}, 
                    GridBox[{
                    {
                    PaneSelectorBox[{False->GridBox[{
                    {"\<\"ConsumerControl Button\"\>", "False"},
                    {"\<\"NumericKeyPad Button\"\>", "False"},
                    {"\<\"ProgrammableButtons\"\>", "False"},
                    {"\<\"Consumer:4 Button\"\>", "False"},
                    {"\<\"Consumer:5 Button\"\>", "False"},
                    {"\<\"Consumer:6 Button\"\>", "False"},
                    {"\<\"Consumer:7 Button\"\>", "False"},
                    {"\<\"Consumer:8 Button\"\>", "False"},
                    {"\<\"Consumer:9 Button\"\>", "False"},
                    {"\<\"Consumer:10 Button\"\>", "False"},
                    {"\<\"Consumer:11 Button\"\>", "False"},
                    {"\<\"Consumer:12 Button\"\>", "False"},
                    {"\<\"Consumer:13 Button\"\>", "False"},
                    {"\<\"Consumer:14 Button\"\>", "False"},
                    {"\<\"Consumer:15 Button\"\>", "False"},
                    {"\<\"Consumer:16 Button\"\>", "False"},
                    {"\<\"Consumer:17 Button\"\>", "False"},
                    {"\<\"Consumer:18 Button\"\>", "False"},
                    {"\<\"Consumer:19 Button\"\>", "False"},
                    {"\<\"Consumer:20 Button\"\>", "False"},
                    {"\<\"Consumer:21 Button\"\>", "False"},
                    {"\<\"Consumer:22 Button\"\>", "False"},
                    {"\<\"Consumer:23 Button\"\>", "False"},
                    {"\<\"Consumer:24 Button\"\>", "False"},
                    {"\<\"Consumer:25 Button\"\>", "False"},
                    {"\<\"Consumer:26 Button\"\>", "False"},
                    {"\<\"Consumer:27 Button\"\>", "False"},
                    {"\<\"Consumer:28 Button\"\>", "False"},
                    {"\<\"Consumer:29 Button\"\>", "False"},
                    {"\<\"Consumer:30 Button\"\>", "False"},
                    {"\<\"Consumer:31 Button\"\>", "False"},
                    {"\<\"Plus10 Button\"\>", "False"},
                    {"\<\"Plus100 Button\"\>", "False"},
                    {"\<\"AMOrPM Button\"\>", "False"},
                    {"\<\"Consumer:35 Button\"\>", "False"},
                    {"\<\"Consumer:36 Button\"\>", "False"},
                    {"\<\"Consumer:37 Button\"\>", "False"},
                    {"\<\"Consumer:38 Button\"\>", "False"},
                    {"\<\"Consumer:39 Button\"\>", "False"},
                    {"\<\"Consumer:40 Button\"\>", "False"},
                    {"\<\"Consumer:41 Button\"\>", "False"},
                    {"\<\"Consumer:42 Button\"\>", "False"},
                    {"\<\"Consumer:43 Button\"\>", "False"},
                    {"\<\"Consumer:44 Button\"\>", "False"},
                    {"\<\"Consumer:45 Button\"\>", "False"},
                    {"\<\"Consumer:46 Button\"\>", "False"},
                    {"\<\"Consumer:47 Button\"\>", "False"},
                    {"\<\"Power Button\"\>", "False"},
                    {"\<\"Reset Button\"\>", "False"},
                    {"\<\"Sleep Button\"\>", "False"},
                    {"\<\"SleepAfter Button\"\>", "False"},
                    {"\<\"SleepMode Button\"\>", "False"},
                    {"\<\"Illumination Button\"\>", "False"},
                    {"\<\"FunctionButtons\"\>", "False"},
                    {"\<\"Consumer:55 Button\"\>", "False"},
                    {"\<\"Consumer:56 Button\"\>", "False"},
                    {"\<\"Consumer:57 Button\"\>", "False"},
                    {"\<\"Consumer:58 Button\"\>", "False"},
                    {"\<\"Consumer:59 Button\"\>", "False"},
                    {"\<\"Consumer:60 Button\"\>", "False"},
                    {"\<\"Consumer:61 Button\"\>", "False"},
                    {"\<\"Consumer:62 Button\"\>", "False"},
                    {"\<\"Consumer:63 Button\"\>", "False"},
                    {"\<\"Menu Button\"\>", "False"},
                    {"\<\"MenuPick Button\"\>", "False"},
                    {"\<\"MenuUp Button\"\>", "False"},
                    {"\<\"MenuDown Button\"\>", "False"},
                    {"\<\"MenuLeft Button\"\>", "False"},
                    {"\<\"MenuRight Button\"\>", "False"},
                    {"\<\"MenuEscape Button\"\>", "False"},
                    {"\<\"MenuValueIncrease Button\"\>", "False"},
                    {"\<\"MenuValueDecrease Button\"\>", "False"},
                    {"\<\"Consumer:73 Button\"\>", "False"},
                    {"\<\"Consumer:74 Button\"\>", "False"},
                    {"\<\"Consumer:75 Button\"\>", "False"},
                    {"\<\"Consumer:76 Button\"\>", "False"},
                    {"\<\"Consumer:77 Button\"\>", "False"},
                    {"\<\"Consumer:78 Button\"\>", "False"},
                    {"\<\"Consumer:79 Button\"\>", "False"},
                    {"\<\"Consumer:80 Button\"\>", "False"},
                    {"\<\"Consumer:81 Button\"\>", "False"},
                    {"\<\"Consumer:82 Button\"\>", "False"},
                    {"\<\"Consumer:83 Button\"\>", "False"},
                    {"\<\"Consumer:84 Button\"\>", "False"},
                    {"\<\"Consumer:85 Button\"\>", "False"},
                    {"\<\"Consumer:86 Button\"\>", "False"},
                    {"\<\"Consumer:87 Button\"\>", "False"},
                    {"\<\"Consumer:88 Button\"\>", "False"},
                    {"\<\"Consumer:89 Button\"\>", "False"},
                    {"\<\"Consumer:90 Button\"\>", "False"},
                    {"\<\"Consumer:91 Button\"\>", "False"},
                    {"\<\"Consumer:92 Button\"\>", "False"},
                    {"\<\"Consumer:93 Button\"\>", "False"},
                    {"\<\"Consumer:94 Button\"\>", "False"},
                    {"\<\"Consumer:95 Button\"\>", "False"},
                    {"\<\"DataOnScreen Button\"\>", "False"},
                    {"\<\"ClosedCaption Button\"\>", "False"},
                    {"\<\"ClosedCaptionSelect Button\"\>", "False"},
                    {"\<\"VCROrTV Button\"\>", "False"},
                    {"\<\"BroadcastMode Button\"\>", "False"},
                    {"\<\"Snapshot Button\"\>", "False"},
                    {"\<\"Still Button\"\>", "False"},
                    {"\<\"Consumer:103 Button\"\>", "False"},
                    {"\<\"Consumer:104 Button\"\>", "False"},
                    {"\<\"Consumer:105 Button\"\>", "False"},
                    {"\<\"Consumer:106 Button\"\>", "False"},
                    {"\<\"Consumer:107 Button\"\>", "False"},
                    {"\<\"Consumer:108 Button\"\>", "False"},
                    {"\<\"Consumer:109 Button\"\>", "False"},
                    {"\<\"Consumer:110 Button\"\>", "False"},
                    {"\<\"Consumer:111 Button\"\>", "False"},
                    {"\<\"Consumer:112 Button\"\>", "False"},
                    {"\<\"Consumer:113 Button\"\>", "False"},
                    {"\<\"Consumer:114 Button\"\>", "False"},
                    {"\<\"Consumer:115 Button\"\>", "False"},
                    {"\<\"Consumer:116 Button\"\>", "False"},
                    {"\<\"Consumer:117 Button\"\>", "False"},
                    {"\<\"Consumer:118 Button\"\>", "False"},
                    {"\<\"Consumer:119 Button\"\>", "False"},
                    {"\<\"Consumer:120 Button\"\>", "False"},
                    {"\<\"Consumer:121 Button\"\>", "False"},
                    {"\<\"Consumer:122 Button\"\>", "False"},
                    {"\<\"Consumer:123 Button\"\>", "False"},
                    {"\<\"Consumer:124 Button\"\>", "False"},
                    {"\<\"Consumer:125 Button\"\>", "False"},
                    {"\<\"Consumer:126 Button\"\>", "False"},
                    {"\<\"Consumer:127 Button\"\>", "False"},
                    {"\<\"Selection Button\"\>", "False"},
                    {"\<\"Assign Button\"\>", "False"},
                    {"\<\"ModeStep Button\"\>", "False"},
                    {"\<\"RecallLast Button\"\>", "False"},
                    {"\<\"EnterChannel Button\"\>", "False"},
                    {"\<\"OrderMovie Button\"\>", "False"},
                    {"\<\"Channel Button\"\>", "False"},
                    {"\<\"MediaSelection Button\"\>", "False"},
                    {"\<\"MediaSelectComputer Button\"\>", "False"},
                    {"\<\"MediaSelectTV Button\"\>", "False"},
                    {"\<\"MediaSelectWWW Button\"\>", "False"},
                    {"\<\"MediaSelectDVD Button\"\>", "False"},
                    {"\<\"MediaSelectTelephone Button\"\>", "False"},
                    {"\<\"MediaSelectProgramGuide Button\"\>", "False"},
                    {"\<\"MediaSelectVideoPhone Button\"\>", "False"},
                    {"\<\"MediaSelectGames Button\"\>", "False"},
                    {"\<\"MediaSelectMessages Button\"\>", "False"},
                    {"\<\"MediaSelectCD Button\"\>", "False"},
                    {"\<\"MediaSelectVCR Button\"\>", "False"},
                    {"\<\"MediaSelectTuner Button\"\>", "False"},
                    {"\<\"Quit Button\"\>", "False"},
                    {"\<\"Help Button\"\>", "False"},
                    {"\<\"MediaSelectTape Button\"\>", "False"},
                    {"\<\"MediaSelectCable Button\"\>", "False"},
                    {"\<\"MediaSelectSatellite Button\"\>", "False"},
                    {"\<\"MediaSelectSecurity Button\"\>", "False"},
                    {"\<\"MediaSelectHome Button\"\>", "False"},
                    {"\<\"MediaSelectCall Button\"\>", "False"},
                    {"\<\"ChannelIncrement Button\"\>", "False"},
                    {"\<\"ChannelDecrement Button\"\>", "False"},
                    {"\<\"Media Button\"\>", "False"},
                    {"\<\"Consumer:159 Button\"\>", "False"},
                    {"\<\"VCRPlus Button\"\>", "False"},
                    {"\<\"Once Button\"\>", "False"},
                    {"\<\"Daily Button\"\>", "False"},
                    {"\<\"Weekly Button\"\>", "False"},
                    {"\<\"Monthly Button\"\>", "False"},
                    {"\<\"Consumer:165 Button\"\>", "False"},
                    {"\<\"Consumer:166 Button\"\>", "False"},
                    {"\<\"Consumer:167 Button\"\>", "False"},
                    {"\<\"Consumer:168 Button\"\>", "False"},
                    {"\<\"Consumer:169 Button\"\>", "False"},
                    {"\<\"Consumer:170 Button\"\>", "False"},
                    {"\<\"Consumer:171 Button\"\>", "False"},
                    {"\<\"Consumer:172 Button\"\>", "False"},
                    {"\<\"Consumer:173 Button\"\>", "False"},
                    {"\<\"Consumer:174 Button\"\>", "False"},
                    {"\<\"Consumer:175 Button\"\>", "False"},
                    {"\<\"Play Button\"\>", "False"},
                    {"\<\"Pause Button\"\>", "False"},
                    {"\<\"Record Button\"\>", "False"},
                    {"\<\"FastForward Button\"\>", "False"},
                    {"\<\"Rewind Button\"\>", "False"},
                    {"\<\"ScanNextTrack Button\"\>", "False"},
                    {"\<\"ScanPreviousTrack Button\"\>", "False"},
                    {"\<\"Stop Button\"\>", "False"},
                    {"\<\"Eject Button\"\>", "False"},
                    {"\<\"RandomPlay Button\"\>", "False"},
                    {"\<\"SelectDisc Button\"\>", "False"},
                    {"\<\"EnterDisc Button\"\>", "False"},
                    {"\<\"Repeat Button\"\>", "False"},
                    {"\<\"Tracking Button\"\>", "False"},
                    {"\<\"TrackNormal Button\"\>", "False"},
                    {"\<\"SlowTracking Button\"\>", "False"},
                    {"\<\"FrameForward Button\"\>", "False"},
                    {"\<\"FrameBack Button\"\>", "False"},
                    {"\<\"Mark Button\"\>", "False"},
                    {"\<\"ClearMark Button\"\>", "False"},
                    {"\<\"RepeatFromMark Button\"\>", "False"},
                    {"\<\"ReturnToMark Button\"\>", "False"},
                    {"\<\"SearchMarkForward Button\"\>", "False"},
                    {"\<\"SearchMarkBackwards Button\"\>", "False"},
                    {"\<\"CounterReset Button\"\>", "False"},
                    {"\<\"ShowCounter Button\"\>", "False"},
                    {"\<\"TrackingIncrement Button\"\>", "False"},
                    {"\<\"TrackingDecrement Button\"\>", "False"},
                    {"\<\"StopOrEject Button\"\>", "False"},
                    {"\<\"PlayOrPause Button\"\>", "False"},
                    {"\<\"PlayOrSkip Button\"\>", "False"},
                    {"\<\"Consumer:207 Button\"\>", "False"},
                    {"\<\"Consumer:208 Button\"\>", "False"},
                    {"\<\"Consumer:209 Button\"\>", "False"},
                    {"\<\"Consumer:210 Button\"\>", "False"},
                    {"\<\"Consumer:211 Button\"\>", "False"},
                    {"\<\"Consumer:212 Button\"\>", "False"},
                    {"\<\"Consumer:213 Button\"\>", "False"},
                    {"\<\"Consumer:214 Button\"\>", "False"},
                    {"\<\"Consumer:215 Button\"\>", "False"},
                    {"\<\"Consumer:216 Button\"\>", "False"},
                    {"\<\"Consumer:217 Button\"\>", "False"},
                    {"\<\"Consumer:218 Button\"\>", "False"},
                    {"\<\"Consumer:219 Button\"\>", "False"},
                    {"\<\"Consumer:220 Button\"\>", "False"},
                    {"\<\"Consumer:221 Button\"\>", "False"},
                    {"\<\"Consumer:222 Button\"\>", "False"},
                    {"\<\"Consumer:223 Button\"\>", "False"},
                    {"\<\"Volume Button\"\>", "False"},
                    {"\<\"Balance Button\"\>", "False"},
                    {"\<\"Mute Button\"\>", "False"},
                    {"\<\"Bass Button\"\>", "False"},
                    {"\<\"Treble Button\"\>", "False"},
                    {"\<\"BassBoost Button\"\>", "False"},
                    {"\<\"SurroundMode Button\"\>", "False"},
                    {"\<\"Loudness Button\"\>", "False"},
                    {"\<\"MPX Button\"\>", "False"},
                    {"\<\"VolumeIncrement Button\"\>", "False"},
                    {"\<\"VolumeDecrement Button\"\>", "False"},
                    {"\<\"Consumer:235 Button\"\>", "False"},
                    {"\<\"Consumer:236 Button\"\>", "False"},
                    {"\<\"Consumer:237 Button\"\>", "False"},
                    {"\<\"Consumer:238 Button\"\>", "False"},
                    {"\<\"Consumer:239 Button\"\>", "False"},
                    {"\<\"Speed Button\"\>", "False"},
                    {"\<\"PlaybackSpeed Button\"\>", "False"},
                    {"\<\"StandardPlay Button\"\>", "False"},
                    {"\<\"LongPlay Button\"\>", "False"},
                    {"\<\"ExtendedPlay Button\"\>", "False"},
                    {"\<\"Slow Button\"\>", "False"},
                    {"\<\"Consumer:246 Button\"\>", "False"},
                    {"\<\"Consumer:247 Button\"\>", "False"},
                    {"\<\"Consumer:248 Button\"\>", "False"},
                    {"\<\"Consumer:249 Button\"\>", "False"},
                    {"\<\"Consumer:250 Button\"\>", "False"},
                    {"\<\"Consumer:251 Button\"\>", "False"},
                    {"\<\"Consumer:252 Button\"\>", "False"},
                    {"\<\"Consumer:253 Button\"\>", "False"},
                    {"\<\"Consumer:254 Button\"\>", "False"},
                    {"\<\"Consumer:255 Button\"\>", "False"},
                    {"\<\"FanEnable Button\"\>", "False"},
                    {"\<\"FanSpeed Button\"\>", "False"},
                    {"\<\"LightEnable Button\"\>", "False"},
                    {"\<\"LightIlluminationLevel Button\"\>", "False"},
                    {"\<\"ClimateControlEnable Button\"\>", "False"},
                    {"\<\"RoomTemperature Button\"\>", "False"},
                    {"\<\"SecurityEnable Button\"\>", "False"},
                    {"\<\"FireAlarm Button\"\>", "False"},
                    {"\<\"PoliceAlarm Button\"\>", "False"},
                    {"\<\"Consumer:265 Button\"\>", "False"},
                    {"\<\"Consumer:266 Button\"\>", "False"},
                    {"\<\"Consumer:267 Button\"\>", "False"},
                    {"\<\"Consumer:268 Button\"\>", "False"},
                    {"\<\"Consumer:269 Button\"\>", "False"},
                    {"\<\"Consumer:270 Button\"\>", "False"},
                    {"\<\"Consumer:271 Button\"\>", "False"},
                    {"\<\"Consumer:272 Button\"\>", "False"},
                    {"\<\"Consumer:273 Button\"\>", "False"},
                    {"\<\"Consumer:274 Button\"\>", "False"},
                    {"\<\"Consumer:275 Button\"\>", "False"},
                    {"\<\"Consumer:276 Button\"\>", "False"},
                    {"\<\"Consumer:277 Button\"\>", "False"},
                    {"\<\"Consumer:278 Button\"\>", "False"},
                    {"\<\"Consumer:279 Button\"\>", "False"},
                    {"\<\"Consumer:280 Button\"\>", "False"},
                    {"\<\"Consumer:281 Button\"\>", "False"},
                    {"\<\"Consumer:282 Button\"\>", "False"},
                    {"\<\"Consumer:283 Button\"\>", "False"},
                    {"\<\"Consumer:284 Button\"\>", "False"},
                    {"\<\"Consumer:285 Button\"\>", "False"},
                    {"\<\"Consumer:286 Button\"\>", "False"},
                    {"\<\"Consumer:287 Button\"\>", "False"},
                    {"\<\"Consumer:288 Button\"\>", "False"},
                    {"\<\"Consumer:289 Button\"\>", "False"},
                    {"\<\"Consumer:290 Button\"\>", "False"},
                    {"\<\"Consumer:291 Button\"\>", "False"},
                    {"\<\"Consumer:292 Button\"\>", "False"},
                    {"\<\"Consumer:293 Button\"\>", "False"},
                    {"\<\"Consumer:294 Button\"\>", "False"},
                    {"\<\"Consumer:295 Button\"\>", "False"},
                    {"\<\"Consumer:296 Button\"\>", "False"},
                    {"\<\"Consumer:297 Button\"\>", "False"},
                    {"\<\"Consumer:298 Button\"\>", "False"},
                    {"\<\"Consumer:299 Button\"\>", "False"},
                    {"\<\"Consumer:300 Button\"\>", "False"},
                    {"\<\"Consumer:301 Button\"\>", "False"},
                    {"\<\"Consumer:302 Button\"\>", "False"},
                    {"\<\"Consumer:303 Button\"\>", "False"},
                    {"\<\"Consumer:304 Button\"\>", "False"},
                    {"\<\"Consumer:305 Button\"\>", "False"},
                    {"\<\"Consumer:306 Button\"\>", "False"},
                    {"\<\"Consumer:307 Button\"\>", "False"},
                    {"\<\"Consumer:308 Button\"\>", "False"},
                    {"\<\"Consumer:309 Button\"\>", "False"},
                    {"\<\"Consumer:310 Button\"\>", "False"},
                    {"\<\"Consumer:311 Button\"\>", "False"},
                    {"\<\"Consumer:312 Button\"\>", "False"},
                    {"\<\"Consumer:313 Button\"\>", "False"},
                    {"\<\"Consumer:314 Button\"\>", "False"},
                    {"\<\"Consumer:315 Button\"\>", "False"},
                    {"\<\"Consumer:316 Button\"\>", "False"},
                    {"\<\"Consumer:317 Button\"\>", "False"},
                    {"\<\"Consumer:318 Button\"\>", "False"},
                    {"\<\"Consumer:319 Button\"\>", "False"},
                    {"\<\"Consumer:320 Button\"\>", "False"},
                    {"\<\"Consumer:321 Button\"\>", "False"},
                    {"\<\"Consumer:322 Button\"\>", "False"},
                    {"\<\"ALNextTaskOrApplication Button\"\>", "False"},
                    {"\<\"Consumer:324 Button\"\>", "False"},
                    {"\<\"Consumer:325 Button\"\>", "False"},
                    {"\<\"Consumer:326 Button\"\>", "False"},
                    {"\<\"Consumer:327 Button\"\>", "False"},
                    {"\<\"Consumer:328 Button\"\>", "False"},
                    {"\<\"Consumer:329 Button\"\>", "False"},
                    {"\<\"Consumer:330 Button\"\>", "False"},
                    {"\<\"Consumer:331 Button\"\>", "False"},
                    {"\<\"Consumer:332 Button\"\>", "False"},
                    {"\<\"Consumer:333 Button\"\>", "False"},
                    {"\<\"Consumer:334 Button\"\>", "False"},
                    {"\<\"Consumer:335 Button\"\>", "False"},
                    {"\<\"BalanceRight Button\"\>", "False"},
                    {"\<\"BalanceLeft Button\"\>", "False"},
                    {"\<\"BassIncrement Button\"\>", "False"},
                    {"\<\"BassDecrement Button\"\>", "False"},
                    {"\<\"TrebleIncrement Button\"\>", "False"},
                    {"\<\"TrebleDecrement Button\"\>", "False"},
                    {"\<\"Consumer:342 Button\"\>", "False"},
                    {"\<\"Consumer:343 Button\"\>", "False"},
                    {"\<\"Consumer:344 Button\"\>", "False"},
                    {"\<\"Consumer:345 Button\"\>", "False"},
                    {"\<\"Consumer:346 Button\"\>", "False"},
                    {"\<\"Consumer:347 Button\"\>", "False"},
                    {"\<\"Consumer:348 Button\"\>", "False"},
                    {"\<\"Consumer:349 Button\"\>", "False"},
                    {"\<\"Consumer:350 Button\"\>", "False"},
                    {"\<\"Consumer:351 Button\"\>", "False"},
                    {"\<\"SpeakerSystem Button\"\>", "False"},
                    {"\<\"ChannelLeft Button\"\>", "False"},
                    {"\<\"ChannelRight Button\"\>", "False"},
                    {"\<\"ChannelCenter Button\"\>", "False"},
                    {"\<\"ChannelFront Button\"\>", "False"},
                    {"\<\"ChannelCenterFront Button\"\>", "False"},
                    {"\<\"ChannelSide Button\"\>", "False"},
                    {"\<\"ChannelSurround Button\"\>", "False"},
                    {"\<\"ChannelLowFrequencyEnhancement Button\"\>", "False"},
                    {"\<\"ChannelTop Button\"\>", "False"},
                    {"\<\"ChannelUnknown Button\"\>", "False"},
                    {"\<\"Consumer:363 Button\"\>", "False"},
                    {"\<\"Consumer:364 Button\"\>", "False"},
                    {"\<\"Consumer:365 Button\"\>", "False"},
                    {"\<\"Consumer:366 Button\"\>", "False"},
                    {"\<\"Consumer:367 Button\"\>", "False"},
                    {"\<\"SubChannel Button\"\>", "False"},
                    {"\<\"SubChannelIncrement Button\"\>", "False"},
                    {"\<\"SubChannelDecrement Button\"\>", "False"},
                    {"\<\"AlternateAudioIncrement Button\"\>", "False"},
                    {"\<\"AlternateAudioDecrement Button\"\>", "False"},
                    {"\<\"Consumer:373 Button\"\>", "False"},
                    {"\<\"Consumer:374 Button\"\>", "False"},
                    {"\<\"Consumer:375 Button\"\>", "False"},
                    {"\<\"Consumer:376 Button\"\>", "False"},
                    {"\<\"Consumer:377 Button\"\>", "False"},
                    {"\<\"Consumer:378 Button\"\>", "False"},
                    {"\<\"Consumer:379 Button\"\>", "False"},
                    {"\<\"Consumer:380 Button\"\>", "False"},
                    {"\<\"Consumer:381 Button\"\>", "False"},
                    {"\<\"Consumer:382 Button\"\>", "False"},
                    {"\<\"Consumer:383 Button\"\>", "False"},
                    {"\<\"ApplicationLaunchButtons\"\>", "False"},
                    {"\<\"ALLaunchButtonConfigurationTool\"\>", "False"},
                    {"\<\"ALProgrammableButtonConfiguration\"\>", "False"},
                    {"\<\"ALConsumerControlConfiguration Button\"\>", "False"},
                    {"\<\"ALWordProcessor Button\"\>", "False"},
                    {"\<\"ALTextEditor Button\"\>", "False"},
                    {"\<\"ALSpreadsheet Button\"\>", "False"},
                    {"\<\"ALGraphicsEditor Button\"\>", "False"},
                    {"\<\"ALPresentationApp Button\"\>", "False"},
                    {"\<\"ALDatabaseApp Button\"\>", "False"},
                    {"\<\"ALEmailReader Button\"\>", "False"},
                    {"\<\"ALNewsreader Button\"\>", "False"},
                    {"\<\"ALVoicemail Button\"\>", "False"},
                    {"\<\"ALContactsOrAddressBook Button\"\>", "False"},
                    {"\<\"ALCalendarOrSchedule Button\"\>", "False"},
                    {"\<\"ALTaskOrProjectManager Button\"\>", "False"},
                    {"\<\"ALLogOrJournalOrTimecard Button\"\>", "False"},
                    {"\<\"ALCheckbookOrFinance Button\"\>", "False"},
                    {"\<\"ALCalculator Button\"\>", "False"},
                    {"\<\"ALAOrVCaptureOrPlayback Button\"\>", "False"},
                    {"\<\"ALLocalMachineBrowser Button\"\>", "False"},
                    {"\<\"ALLANOrWANBrowser Button\"\>", "False"},
                    {"\<\"ALInternetBrowser Button\"\>", "False"},
                    {"\<\"ALRemoteNetworkingOrISPConnect Button\"\>", "False"},
                    {"\<\"ALNetworkConference Button\"\>", "False"},
                    {"\<\"ALNetworkChat Button\"\>", "False"},
                    {"\<\"ALTelephonyOrDialer Button\"\>", "False"},
                    {"\<\"ALLogon Button\"\>", "False"},
                    {"\<\"ALLogoff Button\"\>", "False"},
                    {"\<\"ALLogonOrLogoff Button\"\>", "False"},
                    {"\<\"ALTerminalLockOrScreensaver Button\"\>", "False"},
                    {"\<\"ALControlPanel Button\"\>", "False"},
                    {"\<\"ALCommandLineProcessorOrRun Button\"\>", "False"},
                    {"\<\"ALProcessOrTaskManager Button\"\>", "False"},
                    {"\<\"AL Button\"\>", "False"},
                    {"\<\"Consumer:419 Button\"\>", "False"},
                    {"\<\"ALPreviousTaskOrApplication Button\"\>", "False"},
                    {"\<\"ALPreemptiveHaltTaskOrApplication Button\"\>", 
                    "False"},
                    {"\<\"Consumer:422 Button\"\>", "False"},
                    {"\<\"Consumer:423 Button\"\>", "False"},
                    {"\<\"Consumer:424 Button\"\>", "False"},
                    {"\<\"Consumer:425 Button\"\>", "False"},
                    {"\<\"Consumer:426 Button\"\>", "False"},
                    {"\<\"Consumer:427 Button\"\>", "False"},
                    {"\<\"Consumer:428 Button\"\>", "False"},
                    {"\<\"Consumer:429 Button\"\>", "False"},
                    {"\<\"Consumer:430 Button\"\>", "False"},
                    {"\<\"Consumer:431 Button\"\>", "False"},
                    {"\<\"Consumer:432 Button\"\>", "False"},
                    {"\<\"Consumer:433 Button\"\>", "False"},
                    {"\<\"Consumer:434 Button\"\>", "False"},
                    {"\<\"Consumer:435 Button\"\>", "False"},
                    {"\<\"Consumer:436 Button\"\>", "False"},
                    {"\<\"Consumer:437 Button\"\>", "False"},
                    {"\<\"Consumer:438 Button\"\>", "False"},
                    {"\<\"Consumer:439 Button\"\>", "False"},
                    {"\<\"Consumer:440 Button\"\>", "False"},
                    {"\<\"Consumer:441 Button\"\>", "False"},
                    {"\<\"Consumer:442 Button\"\>", "False"},
                    {"\<\"Consumer:443 Button\"\>", "False"},
                    {"\<\"Consumer:444 Button\"\>", "False"},
                    {"\<\"Consumer:445 Button\"\>", "False"},
                    {"\<\"Consumer:446 Button\"\>", "False"},
                    {"\<\"Consumer:447 Button\"\>", "False"},
                    {"\<\"Consumer:448 Button\"\>", "False"},
                    {"\<\"Consumer:449 Button\"\>", "False"},
                    {"\<\"Consumer:450 Button\"\>", "False"},
                    {"\<\"Consumer:451 Button\"\>", "False"},
                    {"\<\"Consumer:452 Button\"\>", "False"},
                    {"\<\"Consumer:453 Button\"\>", "False"},
                    {"\<\"Consumer:454 Button\"\>", "False"},
                    {"\<\"Consumer:455 Button\"\>", "False"},
                    {"\<\"Consumer:456 Button\"\>", "False"},
                    {"\<\"Consumer:457 Button\"\>", "False"},
                    {"\<\"Consumer:458 Button\"\>", "False"},
                    {"\<\"Consumer:459 Button\"\>", "False"},
                    {"\<\"Consumer:460 Button\"\>", "False"},
                    {"\<\"Consumer:461 Button\"\>", "False"},
                    {"\<\"Consumer:462 Button\"\>", "False"},
                    {"\<\"Consumer:463 Button\"\>", "False"},
                    {"\<\"Consumer:464 Button\"\>", "False"},
                    {"\<\"Consumer:465 Button\"\>", "False"},
                    {"\<\"Consumer:466 Button\"\>", "False"},
                    {"\<\"Consumer:467 Button\"\>", "False"},
                    {"\<\"Consumer:468 Button\"\>", "False"},
                    {"\<\"Consumer:469 Button\"\>", "False"},
                    {"\<\"Consumer:470 Button\"\>", "False"},
                    {"\<\"Consumer:471 Button\"\>", "False"},
                    {"\<\"Consumer:472 Button\"\>", "False"},
                    {"\<\"Consumer:473 Button\"\>", "False"},
                    {"\<\"Consumer:474 Button\"\>", "False"},
                    {"\<\"Consumer:475 Button\"\>", "False"},
                    {"\<\"Consumer:476 Button\"\>", "False"},
                    {"\<\"Consumer:477 Button\"\>", "False"},
                    {"\<\"Consumer:478 Button\"\>", "False"},
                    {"\<\"Consumer:479 Button\"\>", "False"},
                    {"\<\"Consumer:480 Button\"\>", "False"},
                    {"\<\"Consumer:481 Button\"\>", "False"},
                    {"\<\"Consumer:482 Button\"\>", "False"},
                    {"\<\"Consumer:483 Button\"\>", "False"},
                    {"\<\"Consumer:484 Button\"\>", "False"},
                    {"\<\"Consumer:485 Button\"\>", "False"},
                    {"\<\"Consumer:486 Button\"\>", "False"},
                    {"\<\"Consumer:487 Button\"\>", "False"},
                    {"\<\"Consumer:488 Button\"\>", "False"},
                    {"\<\"Consumer:489 Button\"\>", "False"},
                    {"\<\"Consumer:490 Button\"\>", "False"},
                    {"\<\"Consumer:491 Button\"\>", "False"},
                    {"\<\"Consumer:492 Button\"\>", "False"},
                    {"\<\"Consumer:493 Button\"\>", "False"},
                    {"\<\"Consumer:494 Button\"\>", "False"},
                    {"\<\"Consumer:495 Button\"\>", "False"},
                    {"\<\"Consumer:496 Button\"\>", "False"},
                    {"\<\"Consumer:497 Button\"\>", "False"},
                    {"\<\"Consumer:498 Button\"\>", "False"},
                    {"\<\"Consumer:499 Button\"\>", "False"},
                    {"\<\"Consumer:500 Button\"\>", "False"},
                    {"\<\"Consumer:501 Button\"\>", "False"},
                    {"\<\"Consumer:502 Button\"\>", "False"},
                    {"\<\"Consumer:503 Button\"\>", "False"},
                    {"\<\"Consumer:504 Button\"\>", "False"},
                    {"\<\"Consumer:505 Button\"\>", "False"},
                    {"\<\"Consumer:506 Button\"\>", "False"},
                    {"\<\"Consumer:507 Button\"\>", "False"},
                    {"\<\"Consumer:508 Button\"\>", "False"},
                    {"\<\"Consumer:509 Button\"\>", "False"},
                    {"\<\"Consumer:510 Button\"\>", "False"},
                    {"\<\"Consumer:511 Button\"\>", "False"},
                    {"\<\"GenericGUIApplicationControls Button\"\>", "False"},
                    {"\<\"ACNew Button\"\>", "False"},
                    {"\<\"ACOpen Button\"\>", "False"},
                    {"\<\"ACClose Button\"\>", "False"},
                    {"\<\"ACExit Button\"\>", "False"},
                    {"\<\"ACMaximize Button\"\>", "False"},
                    {"\<\"ACMinimize Button\"\>", "False"},
                    {"\<\"ACSave Button\"\>", "False"},
                    {"\<\"ACPrint Button\"\>", "False"},
                    {"\<\"ACProperties Button\"\>", "False"},
                    {"\<\"Consumer:522 Button\"\>", "False"},
                    {"\<\"Consumer:523 Button\"\>", "False"},
                    {"\<\"Consumer:524 Button\"\>", "False"},
                    {"\<\"Consumer:525 Button\"\>", "False"},
                    {"\<\"Consumer:526 Button\"\>", "False"},
                    {"\<\"Consumer:527 Button\"\>", "False"},
                    {"\<\"Consumer:528 Button\"\>", "False"},
                    {"\<\"Consumer:529 Button\"\>", "False"},
                    {"\<\"Consumer:530 Button\"\>", "False"},
                    {"\<\"Consumer:531 Button\"\>", "False"},
                    {"\<\"Consumer:532 Button\"\>", "False"},
                    {"\<\"Consumer:533 Button\"\>", "False"},
                    {"\<\"Consumer:534 Button\"\>", "False"},
                    {"\<\"Consumer:535 Button\"\>", "False"},
                    {"\<\"Consumer:536 Button\"\>", "False"},
                    {"\<\"Consumer:537 Button\"\>", "False"},
                    {"\<\"ACUndo Button\"\>", "False"},
                    {"\<\"ACCopy Button\"\>", "False"},
                    {"\<\"ACCut Button\"\>", "False"},
                    {"\<\"ACPaste Button\"\>", "False"},
                    {"\<\"AC Button\"\>", "False"},
                    {"\<\"ACFind Button\"\>", "False"},
                    {"\<\"ACFindandReplace Button\"\>", "False"},
                    {"\<\"ACSearch Button\"\>", "False"},
                    {"\<\"ACGoTo Button\"\>", "False"},
                    {"\<\"ACHome Button\"\>", "False"},
                    {"\<\"ACBack Button\"\>", "False"},
                    {"\<\"ACForward Button\"\>", "False"},
                    {"\<\"ACStop Button\"\>", "False"},
                    {"\<\"ACRefresh Button\"\>", "False"},
                    {"\<\"ACPreviousLink Button\"\>", "False"},
                    {"\<\"ACNextLink Button\"\>", "False"},
                    {"\<\"ACBookmarks Button\"\>", "False"},
                    {"\<\"ACHistory Button\"\>", "False"},
                    {"\<\"ACSubscriptions Button\"\>", "False"},
                    {"\<\"ACZoomIn Button\"\>", "False"},
                    {"\<\"ACZoomOut Button\"\>", "False"},
                    {"\<\"ACZoom Button\"\>", "False"},
                    {"\<\"ACFullScreenView Button\"\>", "False"},
                    {"\<\"ACNormalView Button\"\>", "False"},
                    {"\<\"ACViewToggle Button\"\>", "False"},
                    {"\<\"ACScrollUp Button\"\>", "False"},
                    {"\<\"ACScrollDown Button\"\>", "False"},
                    {"\<\"ACScroll Button\"\>", "False"},
                    {"\<\"ACPanLeft Button\"\>", "False"},
                    {"\<\"ACPanRight Button\"\>", "False"},
                    {"\<\"ACPan Button\"\>", "False"},
                    {"\<\"ACNewWindow Button\"\>", "False"},
                    {"\<\"ACTileHorizontally Button\"\>", "False"},
                    {"\<\"ACTileVertically Button\"\>", "False"},
                    {"\<\"ACFormat Button\"\>", "False"},
                    {"\<\"Consumer:573 Button\"\>", "False"},
                    {"\<\"Consumer:574 Button\"\>", "False"},
                    {"\<\"Consumer:575 Button\"\>", "False"},
                    {"\<\"Consumer:576 Button\"\>", "False"},
                    {"\<\"Consumer:577 Button\"\>", "False"},
                    {"\<\"Consumer:578 Button\"\>", "False"},
                    {"\<\"Consumer:579 Button\"\>", "False"},
                    {"\<\"Consumer:580 Button\"\>", "False"},
                    {"\<\"Consumer:581 Button\"\>", "False"},
                    {"\<\"Consumer:582 Button\"\>", "False"},
                    {"\<\"Consumer:583 Button\"\>", "False"},
                    {"\<\"Consumer:584 Button\"\>", "False"},
                    {"\<\"Consumer:585 Button\"\>", "False"},
                    {"\<\"Consumer:586 Button\"\>", "False"},
                    {"\<\"Consumer:587 Button\"\>", "False"},
                    {"\<\"Consumer:588 Button\"\>", "False"},
                    {"\<\"Consumer:589 Button\"\>", "False"},
                    {"\<\"Consumer:590 Button\"\>", "False"},
                    {"\<\"Consumer:591 Button\"\>", "False"},
                    {"\<\"Consumer:592 Button\"\>", "False"},
                    {"\<\"Consumer:593 Button\"\>", "False"},
                    {"\<\"Consumer:594 Button\"\>", "False"},
                    {"\<\"Consumer:595 Button\"\>", "False"},
                    {"\<\"Consumer:596 Button\"\>", "False"},
                    {"\<\"Consumer:597 Button\"\>", "False"},
                    {"\<\"Consumer:598 Button\"\>", "False"},
                    {"\<\"Consumer:599 Button\"\>", "False"},
                    {"\<\"Consumer:600 Button\"\>", "False"},
                    {"\<\"Consumer:601 Button\"\>", "False"},
                    {"\<\"Consumer:602 Button\"\>", "False"},
                    {"\<\"Consumer:603 Button\"\>", "False"},
                    {"\<\"Consumer:604 Button\"\>", "False"},
                    {"\<\"Consumer:605 Button\"\>", "False"},
                    {"\<\"Consumer:606 Button\"\>", "False"},
                    {"\<\"Consumer:607 Button\"\>", "False"},
                    {"\<\"Consumer:608 Button\"\>", "False"},
                    {"\<\"Consumer:609 Button\"\>", "False"},
                    {"\<\"Consumer:610 Button\"\>", "False"},
                    {"\<\"Consumer:611 Button\"\>", "False"},
                    {"\<\"Consumer:612 Button\"\>", "False"},
                    {"\<\"Consumer:613 Button\"\>", "False"},
                    {"\<\"Consumer:614 Button\"\>", "False"},
                    {"\<\"Consumer:615 Button\"\>", "False"},
                    {"\<\"Consumer:616 Button\"\>", "False"},
                    {"\<\"Consumer:617 Button\"\>", "False"},
                    {"\<\"Consumer:618 Button\"\>", "False"},
                    {"\<\"Consumer:619 Button\"\>", "False"},
                    {"\<\"Consumer:620 Button\"\>", "False"},
                    {"\<\"Consumer:621 Button\"\>", "False"},
                    {"\<\"Consumer:622 Button\"\>", "False"},
                    {"\<\"Consumer:623 Button\"\>", "False"},
                    {"\<\"Consumer:624 Button\"\>", "False"},
                    {"\<\"Consumer:625 Button\"\>", "False"},
                    {"\<\"Consumer:626 Button\"\>", "False"},
                    {"\<\"Consumer:627 Button\"\>", "False"},
                    {"\<\"Consumer:628 Button\"\>", "False"},
                    {"\<\"Consumer:629 Button\"\>", "False"},
                    {"\<\"Consumer:630 Button\"\>", "False"},
                    {"\<\"Consumer:631 Button\"\>", "False"},
                    {"\<\"Consumer:632 Button\"\>", "False"},
                    {"\<\"Consumer:633 Button\"\>", "False"},
                    {"\<\"Consumer:634 Button\"\>", "False"},
                    {"\<\"Consumer:635 Button\"\>", "False"},
                    {"\<\"Consumer:636 Button\"\>", "False"},
                    {"\<\"Consumer:637 Button\"\>", "False"},
                    {"\<\"Consumer:638 Button\"\>", "False"},
                    {"\<\"Consumer:639 Button\"\>", "False"},
                    {"\<\"Consumer:640 Button\"\>", "False"},
                    {"\<\"Consumer:641 Button\"\>", "False"},
                    {"\<\"Consumer:642 Button\"\>", "False"},
                    {"\<\"Consumer:643 Button\"\>", "False"},
                    {"\<\"Consumer:644 Button\"\>", "False"},
                    {"\<\"Consumer:645 Button\"\>", "False"},
                    {"\<\"Consumer:646 Button\"\>", "False"},
                    {"\<\"Consumer:647 Button\"\>", "False"},
                    {"\<\"Consumer:648 Button\"\>", "False"},
                    {"\<\"Consumer:649 Button\"\>", "False"},
                    {"\<\"Consumer:650 Button\"\>", "False"},
                    {"\<\"Consumer:651 Button\"\>", "False"},
                    {"\<\"Consumer:652 Button\"\>", "False"}
                    },
                    AutoDelete->False,
                    
                    GridBoxAlignment->{
                    "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    True->
                    DynamicBox[ToBoxes[
                    Grid[
                    
                    Transpose[{{"ConsumerControl Button", 
                    "NumericKeyPad Button", "ProgrammableButtons", 
                    "Consumer:4 Button", "Consumer:5 Button", 
                    "Consumer:6 Button", "Consumer:7 Button", 
                    "Consumer:8 Button", "Consumer:9 Button", 
                    "Consumer:10 Button", "Consumer:11 Button", 
                    "Consumer:12 Button", "Consumer:13 Button", 
                    "Consumer:14 Button", "Consumer:15 Button", 
                    "Consumer:16 Button", "Consumer:17 Button", 
                    "Consumer:18 Button", "Consumer:19 Button", 
                    "Consumer:20 Button", "Consumer:21 Button", 
                    "Consumer:22 Button", "Consumer:23 Button", 
                    "Consumer:24 Button", "Consumer:25 Button", 
                    "Consumer:26 Button", "Consumer:27 Button", 
                    "Consumer:28 Button", "Consumer:29 Button", 
                    "Consumer:30 Button", "Consumer:31 Button", 
                    "Plus10 Button", "Plus100 Button", "AMOrPM Button", 
                    "Consumer:35 Button", "Consumer:36 Button", 
                    "Consumer:37 Button", "Consumer:38 Button", 
                    "Consumer:39 Button", "Consumer:40 Button", 
                    "Consumer:41 Button", "Consumer:42 Button", 
                    "Consumer:43 Button", "Consumer:44 Button", 
                    "Consumer:45 Button", "Consumer:46 Button", 
                    "Consumer:47 Button", "Power Button", "Reset Button", 
                    "Sleep Button", "SleepAfter Button", "SleepMode Button", 
                    "Illumination Button", "FunctionButtons", 
                    "Consumer:55 Button", "Consumer:56 Button", 
                    "Consumer:57 Button", "Consumer:58 Button", 
                    "Consumer:59 Button", "Consumer:60 Button", 
                    "Consumer:61 Button", "Consumer:62 Button", 
                    "Consumer:63 Button", "Menu Button", "MenuPick Button", 
                    "MenuUp Button", "MenuDown Button", "MenuLeft Button", 
                    "MenuRight Button", "MenuEscape Button", 
                    "MenuValueIncrease Button", "MenuValueDecrease Button", 
                    "Consumer:73 Button", "Consumer:74 Button", 
                    "Consumer:75 Button", "Consumer:76 Button", 
                    "Consumer:77 Button", "Consumer:78 Button", 
                    "Consumer:79 Button", "Consumer:80 Button", 
                    "Consumer:81 Button", "Consumer:82 Button", 
                    "Consumer:83 Button", "Consumer:84 Button", 
                    "Consumer:85 Button", "Consumer:86 Button", 
                    "Consumer:87 Button", "Consumer:88 Button", 
                    "Consumer:89 Button", "Consumer:90 Button", 
                    "Consumer:91 Button", "Consumer:92 Button", 
                    "Consumer:93 Button", "Consumer:94 Button", 
                    "Consumer:95 Button", "DataOnScreen Button", 
                    "ClosedCaption Button", "ClosedCaptionSelect Button", 
                    "VCROrTV Button", "BroadcastMode Button", 
                    "Snapshot Button", "Still Button", "Consumer:103 Button", 
                    "Consumer:104 Button", "Consumer:105 Button", 
                    "Consumer:106 Button", "Consumer:107 Button", 
                    "Consumer:108 Button", "Consumer:109 Button", 
                    "Consumer:110 Button", "Consumer:111 Button", 
                    "Consumer:112 Button", "Consumer:113 Button", 
                    "Consumer:114 Button", "Consumer:115 Button", 
                    "Consumer:116 Button", "Consumer:117 Button", 
                    "Consumer:118 Button", "Consumer:119 Button", 
                    "Consumer:120 Button", "Consumer:121 Button", 
                    "Consumer:122 Button", "Consumer:123 Button", 
                    "Consumer:124 Button", "Consumer:125 Button", 
                    "Consumer:126 Button", "Consumer:127 Button", 
                    "Selection Button", "Assign Button", "ModeStep Button", 
                    "RecallLast Button", "EnterChannel Button", 
                    "OrderMovie Button", "Channel Button", 
                    "MediaSelection Button", "MediaSelectComputer Button", 
                    "MediaSelectTV Button", "MediaSelectWWW Button", 
                    "MediaSelectDVD Button", "MediaSelectTelephone Button", 
                    "MediaSelectProgramGuide Button", 
                    "MediaSelectVideoPhone Button", "MediaSelectGames Button",
                     "MediaSelectMessages Button", "MediaSelectCD Button", 
                    "MediaSelectVCR Button", "MediaSelectTuner Button", 
                    "Quit Button", "Help Button", "MediaSelectTape Button", 
                    "MediaSelectCable Button", "MediaSelectSatellite Button", 
                    "MediaSelectSecurity Button", "MediaSelectHome Button", 
                    "MediaSelectCall Button", "ChannelIncrement Button", 
                    "ChannelDecrement Button", "Media Button", 
                    "Consumer:159 Button", "VCRPlus Button", "Once Button", 
                    "Daily Button", "Weekly Button", "Monthly Button", 
                    "Consumer:165 Button", "Consumer:166 Button", 
                    "Consumer:167 Button", "Consumer:168 Button", 
                    "Consumer:169 Button", "Consumer:170 Button", 
                    "Consumer:171 Button", "Consumer:172 Button", 
                    "Consumer:173 Button", "Consumer:174 Button", 
                    "Consumer:175 Button", "Play Button", "Pause Button", 
                    "Record Button", "FastForward Button", "Rewind Button", 
                    "ScanNextTrack Button", "ScanPreviousTrack Button", 
                    "Stop Button", "Eject Button", "RandomPlay Button", 
                    "SelectDisc Button", "EnterDisc Button", "Repeat Button", 
                    "Tracking Button", "TrackNormal Button", 
                    "SlowTracking Button", "FrameForward Button", 
                    "FrameBack Button", "Mark Button", "ClearMark Button", 
                    "RepeatFromMark Button", "ReturnToMark Button", 
                    "SearchMarkForward Button", "SearchMarkBackwards Button", 
                    "CounterReset Button", "ShowCounter Button", 
                    "TrackingIncrement Button", "TrackingDecrement Button", 
                    "StopOrEject Button", "PlayOrPause Button", 
                    "PlayOrSkip Button", "Consumer:207 Button", 
                    "Consumer:208 Button", "Consumer:209 Button", 
                    "Consumer:210 Button", "Consumer:211 Button", 
                    "Consumer:212 Button", "Consumer:213 Button", 
                    "Consumer:214 Button", "Consumer:215 Button", 
                    "Consumer:216 Button", "Consumer:217 Button", 
                    "Consumer:218 Button", "Consumer:219 Button", 
                    "Consumer:220 Button", "Consumer:221 Button", 
                    "Consumer:222 Button", "Consumer:223 Button", 
                    "Volume Button", "Balance Button", "Mute Button", 
                    "Bass Button", "Treble Button", "BassBoost Button", 
                    "SurroundMode Button", "Loudness Button", "MPX Button", 
                    "VolumeIncrement Button", "VolumeDecrement Button", 
                    "Consumer:235 Button", "Consumer:236 Button", 
                    "Consumer:237 Button", "Consumer:238 Button", 
                    "Consumer:239 Button", "Speed Button", 
                    "PlaybackSpeed Button", "StandardPlay Button", 
                    "LongPlay Button", "ExtendedPlay Button", "Slow Button", 
                    "Consumer:246 Button", "Consumer:247 Button", 
                    "Consumer:248 Button", "Consumer:249 Button", 
                    "Consumer:250 Button", "Consumer:251 Button", 
                    "Consumer:252 Button", "Consumer:253 Button", 
                    "Consumer:254 Button", "Consumer:255 Button", 
                    "FanEnable Button", "FanSpeed Button", 
                    "LightEnable Button", "LightIlluminationLevel Button", 
                    "ClimateControlEnable Button", "RoomTemperature Button", 
                    "SecurityEnable Button", "FireAlarm Button", 
                    "PoliceAlarm Button", "Consumer:265 Button", 
                    "Consumer:266 Button", "Consumer:267 Button", 
                    "Consumer:268 Button", "Consumer:269 Button", 
                    "Consumer:270 Button", "Consumer:271 Button", 
                    "Consumer:272 Button", "Consumer:273 Button", 
                    "Consumer:274 Button", "Consumer:275 Button", 
                    "Consumer:276 Button", "Consumer:277 Button", 
                    "Consumer:278 Button", "Consumer:279 Button", 
                    "Consumer:280 Button", "Consumer:281 Button", 
                    "Consumer:282 Button", "Consumer:283 Button", 
                    "Consumer:284 Button", "Consumer:285 Button", 
                    "Consumer:286 Button", "Consumer:287 Button", 
                    "Consumer:288 Button", "Consumer:289 Button", 
                    "Consumer:290 Button", "Consumer:291 Button", 
                    "Consumer:292 Button", "Consumer:293 Button", 
                    "Consumer:294 Button", "Consumer:295 Button", 
                    "Consumer:296 Button", "Consumer:297 Button", 
                    "Consumer:298 Button", "Consumer:299 Button", 
                    "Consumer:300 Button", "Consumer:301 Button", 
                    "Consumer:302 Button", "Consumer:303 Button", 
                    "Consumer:304 Button", "Consumer:305 Button", 
                    "Consumer:306 Button", "Consumer:307 Button", 
                    "Consumer:308 Button", "Consumer:309 Button", 
                    "Consumer:310 Button", "Consumer:311 Button", 
                    "Consumer:312 Button", "Consumer:313 Button", 
                    "Consumer:314 Button", "Consumer:315 Button", 
                    "Consumer:316 Button", "Consumer:317 Button", 
                    "Consumer:318 Button", "Consumer:319 Button", 
                    "Consumer:320 Button", "Consumer:321 Button", 
                    "Consumer:322 Button", "ALNextTaskOrApplication Button", 
                    "Consumer:324 Button", "Consumer:325 Button", 
                    "Consumer:326 Button", "Consumer:327 Button", 
                    "Consumer:328 Button", "Consumer:329 Button", 
                    "Consumer:330 Button", "Consumer:331 Button", 
                    "Consumer:332 Button", "Consumer:333 Button", 
                    "Consumer:334 Button", "Consumer:335 Button", 
                    "BalanceRight Button", "BalanceLeft Button", 
                    "BassIncrement Button", "BassDecrement Button", 
                    "TrebleIncrement Button", "TrebleDecrement Button", 
                    "Consumer:342 Button", "Consumer:343 Button", 
                    "Consumer:344 Button", "Consumer:345 Button", 
                    "Consumer:346 Button", "Consumer:347 Button", 
                    "Consumer:348 Button", "Consumer:349 Button", 
                    "Consumer:350 Button", "Consumer:351 Button", 
                    "SpeakerSystem Button", "ChannelLeft Button", 
                    "ChannelRight Button", "ChannelCenter Button", 
                    "ChannelFront Button", "ChannelCenterFront Button", 
                    "ChannelSide Button", "ChannelSurround Button", 
                    "ChannelLowFrequencyEnhancement Button", 
                    "ChannelTop Button", "ChannelUnknown Button", 
                    "Consumer:363 Button", "Consumer:364 Button", 
                    "Consumer:365 Button", "Consumer:366 Button", 
                    "Consumer:367 Button", "SubChannel Button", 
                    "SubChannelIncrement Button", 
                    "SubChannelDecrement Button", 
                    "AlternateAudioIncrement Button", 
                    "AlternateAudioDecrement Button", "Consumer:373 Button", 
                    "Consumer:374 Button", "Consumer:375 Button", 
                    "Consumer:376 Button", "Consumer:377 Button", 
                    "Consumer:378 Button", "Consumer:379 Button", 
                    "Consumer:380 Button", "Consumer:381 Button", 
                    "Consumer:382 Button", "Consumer:383 Button", 
                    "ApplicationLaunchButtons", 
                    "ALLaunchButtonConfigurationTool", 
                    "ALProgrammableButtonConfiguration", 
                    "ALConsumerControlConfiguration Button", 
                    "ALWordProcessor Button", "ALTextEditor Button", 
                    "ALSpreadsheet Button", "ALGraphicsEditor Button", 
                    "ALPresentationApp Button", "ALDatabaseApp Button", 
                    "ALEmailReader Button", "ALNewsreader Button", 
                    "ALVoicemail Button", "ALContactsOrAddressBook Button", 
                    "ALCalendarOrSchedule Button", 
                    "ALTaskOrProjectManager Button", 
                    "ALLogOrJournalOrTimecard Button", 
                    "ALCheckbookOrFinance Button", "ALCalculator Button", 
                    "ALAOrVCaptureOrPlayback Button", 
                    "ALLocalMachineBrowser Button", 
                    "ALLANOrWANBrowser Button", "ALInternetBrowser Button", 
                    "ALRemoteNetworkingOrISPConnect Button", 
                    "ALNetworkConference Button", "ALNetworkChat Button", 
                    "ALTelephonyOrDialer Button", "ALLogon Button", 
                    "ALLogoff Button", "ALLogonOrLogoff Button", 
                    "ALTerminalLockOrScreensaver Button", 
                    "ALControlPanel Button", 
                    "ALCommandLineProcessorOrRun Button", 
                    "ALProcessOrTaskManager Button", "AL Button", 
                    "Consumer:419 Button", 
                    "ALPreviousTaskOrApplication Button", 
                    "ALPreemptiveHaltTaskOrApplication Button", 
                    "Consumer:422 Button", "Consumer:423 Button", 
                    "Consumer:424 Button", "Consumer:425 Button", 
                    "Consumer:426 Button", "Consumer:427 Button", 
                    "Consumer:428 Button", "Consumer:429 Button", 
                    "Consumer:430 Button", "Consumer:431 Button", 
                    "Consumer:432 Button", "Consumer:433 Button", 
                    "Consumer:434 Button", "Consumer:435 Button", 
                    "Consumer:436 Button", "Consumer:437 Button", 
                    "Consumer:438 Button", "Consumer:439 Button", 
                    "Consumer:440 Button", "Consumer:441 Button", 
                    "Consumer:442 Button", "Consumer:443 Button", 
                    "Consumer:444 Button", "Consumer:445 Button", 
                    "Consumer:446 Button", "Consumer:447 Button", 
                    "Consumer:448 Button", "Consumer:449 Button", 
                    "Consumer:450 Button", "Consumer:451 Button", 
                    "Consumer:452 Button", "Consumer:453 Button", 
                    "Consumer:454 Button", "Consumer:455 Button", 
                    "Consumer:456 Button", "Consumer:457 Button", 
                    "Consumer:458 Button", "Consumer:459 Button", 
                    "Consumer:460 Button", "Consumer:461 Button", 
                    "Consumer:462 Button", "Consumer:463 Button", 
                    "Consumer:464 Button", "Consumer:465 Button", 
                    "Consumer:466 Button", "Consumer:467 Button", 
                    "Consumer:468 Button", "Consumer:469 Button", 
                    "Consumer:470 Button", "Consumer:471 Button", 
                    "Consumer:472 Button", "Consumer:473 Button", 
                    "Consumer:474 Button", "Consumer:475 Button", 
                    "Consumer:476 Button", "Consumer:477 Button", 
                    "Consumer:478 Button", "Consumer:479 Button", 
                    "Consumer:480 Button", "Consumer:481 Button", 
                    "Consumer:482 Button", "Consumer:483 Button", 
                    "Consumer:484 Button", "Consumer:485 Button", 
                    "Consumer:486 Button", "Consumer:487 Button", 
                    "Consumer:488 Button", "Consumer:489 Button", 
                    "Consumer:490 Button", "Consumer:491 Button", 
                    "Consumer:492 Button", "Consumer:493 Button", 
                    "Consumer:494 Button", "Consumer:495 Button", 
                    "Consumer:496 Button", "Consumer:497 Button", 
                    "Consumer:498 Button", "Consumer:499 Button", 
                    "Consumer:500 Button", "Consumer:501 Button", 
                    "Consumer:502 Button", "Consumer:503 Button", 
                    "Consumer:504 Button", "Consumer:505 Button", 
                    "Consumer:506 Button", "Consumer:507 Button", 
                    "Consumer:508 Button", "Consumer:509 Button", 
                    "Consumer:510 Button", "Consumer:511 Button", 
                    "GenericGUIApplicationControls Button", "ACNew Button", 
                    "ACOpen Button", "ACClose Button", "ACExit Button", 
                    "ACMaximize Button", "ACMinimize Button", "ACSave Button",
                     "ACPrint Button", "ACProperties Button", 
                    "Consumer:522 Button", "Consumer:523 Button", 
                    "Consumer:524 Button", "Consumer:525 Button", 
                    "Consumer:526 Button", "Consumer:527 Button", 
                    "Consumer:528 Button", "Consumer:529 Button", 
                    "Consumer:530 Button", "Consumer:531 Button", 
                    "Consumer:532 Button", "Consumer:533 Button", 
                    "Consumer:534 Button", "Consumer:535 Button", 
                    "Consumer:536 Button", "Consumer:537 Button", 
                    "ACUndo Button", "ACCopy Button", "ACCut Button", 
                    "ACPaste Button", "AC Button", "ACFind Button", 
                    "ACFindandReplace Button", "ACSearch Button", 
                    "ACGoTo Button", "ACHome Button", "ACBack Button", 
                    "ACForward Button", "ACStop Button", "ACRefresh Button", 
                    "ACPreviousLink Button", "ACNextLink Button", 
                    "ACBookmarks Button", "ACHistory Button", 
                    "ACSubscriptions Button", "ACZoomIn Button", 
                    "ACZoomOut Button", "ACZoom Button", 
                    "ACFullScreenView Button", "ACNormalView Button", 
                    "ACViewToggle Button", "ACScrollUp Button", 
                    "ACScrollDown Button", "ACScroll Button", 
                    "ACPanLeft Button", "ACPanRight Button", "ACPan Button", 
                    "ACNewWindow Button", "ACTileHorizontally Button", 
                    "ACTileVertically Button", "ACFormat Button", 
                    "Consumer:573 Button", "Consumer:574 Button", 
                    "Consumer:575 Button", "Consumer:576 Button", 
                    "Consumer:577 Button", "Consumer:578 Button", 
                    "Consumer:579 Button", "Consumer:580 Button", 
                    "Consumer:581 Button", "Consumer:582 Button", 
                    "Consumer:583 Button", "Consumer:584 Button", 
                    "Consumer:585 Button", "Consumer:586 Button", 
                    "Consumer:587 Button", "Consumer:588 Button", 
                    "Consumer:589 Button", "Consumer:590 Button", 
                    "Consumer:591 Button", "Consumer:592 Button", 
                    "Consumer:593 Button", "Consumer:594 Button", 
                    "Consumer:595 Button", "Consumer:596 Button", 
                    "Consumer:597 Button", "Consumer:598 Button", 
                    "Consumer:599 Button", "Consumer:600 Button", 
                    "Consumer:601 Button", "Consumer:602 Button", 
                    "Consumer:603 Button", "Consumer:604 Button", 
                    "Consumer:605 Button", "Consumer:606 Button", 
                    "Consumer:607 Button", "Consumer:608 Button", 
                    "Consumer:609 Button", "Consumer:610 Button", 
                    "Consumer:611 Button", "Consumer:612 Button", 
                    "Consumer:613 Button", "Consumer:614 Button", 
                    "Consumer:615 Button", "Consumer:616 Button", 
                    "Consumer:617 Button", "Consumer:618 Button", 
                    "Consumer:619 Button", "Consumer:620 Button", 
                    "Consumer:621 Button", "Consumer:622 Button", 
                    "Consumer:623 Button", "Consumer:624 Button", 
                    "Consumer:625 Button", "Consumer:626 Button", 
                    "Consumer:627 Button", "Consumer:628 Button", 
                    "Consumer:629 Button", "Consumer:630 Button", 
                    "Consumer:631 Button", "Consumer:632 Button", 
                    "Consumer:633 Button", "Consumer:634 Button", 
                    "Consumer:635 Button", "Consumer:636 Button", 
                    "Consumer:637 Button", "Consumer:638 Button", 
                    "Consumer:639 Button", "Consumer:640 Button", 
                    "Consumer:641 Button", "Consumer:642 Button", 
                    "Consumer:643 Button", "Consumer:644 Button", 
                    "Consumer:645 Button", "Consumer:646 Button", 
                    "Consumer:647 Button", "Consumer:648 Button", 
                    "Consumer:649 Button", "Consumer:650 Button", 
                    "Consumer:651 Button", "Consumer:652 Button"}, 
                    ControllerState[
                    10, {"ConsumerControl Button", "NumericKeyPad Button", 
                    "ProgrammableButtons", "Consumer:4 Button", 
                    "Consumer:5 Button", "Consumer:6 Button", 
                    "Consumer:7 Button", "Consumer:8 Button", 
                    "Consumer:9 Button", "Consumer:10 Button", 
                    "Consumer:11 Button", "Consumer:12 Button", 
                    "Consumer:13 Button", "Consumer:14 Button", 
                    "Consumer:15 Button", "Consumer:16 Button", 
                    "Consumer:17 Button", "Consumer:18 Button", 
                    "Consumer:19 Button", "Consumer:20 Button", 
                    "Consumer:21 Button", "Consumer:22 Button", 
                    "Consumer:23 Button", "Consumer:24 Button", 
                    "Consumer:25 Button", "Consumer:26 Button", 
                    "Consumer:27 Button", "Consumer:28 Button", 
                    "Consumer:29 Button", "Consumer:30 Button", 
                    "Consumer:31 Button", "Plus10 Button", "Plus100 Button", 
                    "AMOrPM Button", "Consumer:35 Button", 
                    "Consumer:36 Button", "Consumer:37 Button", 
                    "Consumer:38 Button", "Consumer:39 Button", 
                    "Consumer:40 Button", "Consumer:41 Button", 
                    "Consumer:42 Button", "Consumer:43 Button", 
                    "Consumer:44 Button", "Consumer:45 Button", 
                    "Consumer:46 Button", "Consumer:47 Button", 
                    "Power Button", "Reset Button", "Sleep Button", 
                    "SleepAfter Button", "SleepMode Button", 
                    "Illumination Button", "FunctionButtons", 
                    "Consumer:55 Button", "Consumer:56 Button", 
                    "Consumer:57 Button", "Consumer:58 Button", 
                    "Consumer:59 Button", "Consumer:60 Button", 
                    "Consumer:61 Button", "Consumer:62 Button", 
                    "Consumer:63 Button", "Menu Button", "MenuPick Button", 
                    "MenuUp Button", "MenuDown Button", "MenuLeft Button", 
                    "MenuRight Button", "MenuEscape Button", 
                    "MenuValueIncrease Button", "MenuValueDecrease Button", 
                    "Consumer:73 Button", "Consumer:74 Button", 
                    "Consumer:75 Button", "Consumer:76 Button", 
                    "Consumer:77 Button", "Consumer:78 Button", 
                    "Consumer:79 Button", "Consumer:80 Button", 
                    "Consumer:81 Button", "Consumer:82 Button", 
                    "Consumer:83 Button", "Consumer:84 Button", 
                    "Consumer:85 Button", "Consumer:86 Button", 
                    "Consumer:87 Button", "Consumer:88 Button", 
                    "Consumer:89 Button", "Consumer:90 Button", 
                    "Consumer:91 Button", "Consumer:92 Button", 
                    "Consumer:93 Button", "Consumer:94 Button", 
                    "Consumer:95 Button", "DataOnScreen Button", 
                    "ClosedCaption Button", "ClosedCaptionSelect Button", 
                    "VCROrTV Button", "BroadcastMode Button", 
                    "Snapshot Button", "Still Button", "Consumer:103 Button", 
                    "Consumer:104 Button", "Consumer:105 Button", 
                    "Consumer:106 Button", "Consumer:107 Button", 
                    "Consumer:108 Button", "Consumer:109 Button", 
                    "Consumer:110 Button", "Consumer:111 Button", 
                    "Consumer:112 Button", "Consumer:113 Button", 
                    "Consumer:114 Button", "Consumer:115 Button", 
                    "Consumer:116 Button", "Consumer:117 Button", 
                    "Consumer:118 Button", "Consumer:119 Button", 
                    "Consumer:120 Button", "Consumer:121 Button", 
                    "Consumer:122 Button", "Consumer:123 Button", 
                    "Consumer:124 Button", "Consumer:125 Button", 
                    "Consumer:126 Button", "Consumer:127 Button", 
                    "Selection Button", "Assign Button", "ModeStep Button", 
                    "RecallLast Button", "EnterChannel Button", 
                    "OrderMovie Button", "Channel Button", 
                    "MediaSelection Button", "MediaSelectComputer Button", 
                    "MediaSelectTV Button", "MediaSelectWWW Button", 
                    "MediaSelectDVD Button", "MediaSelectTelephone Button", 
                    "MediaSelectProgramGuide Button", 
                    "MediaSelectVideoPhone Button", "MediaSelectGames Button",
                     "MediaSelectMessages Button", "MediaSelectCD Button", 
                    "MediaSelectVCR Button", "MediaSelectTuner Button", 
                    "Quit Button", "Help Button", "MediaSelectTape Button", 
                    "MediaSelectCable Button", "MediaSelectSatellite Button", 
                    "MediaSelectSecurity Button", "MediaSelectHome Button", 
                    "MediaSelectCall Button", "ChannelIncrement Button", 
                    "ChannelDecrement Button", "Media Button", 
                    "Consumer:159 Button", "VCRPlus Button", "Once Button", 
                    "Daily Button", "Weekly Button", "Monthly Button", 
                    "Consumer:165 Button", "Consumer:166 Button", 
                    "Consumer:167 Button", "Consumer:168 Button", 
                    "Consumer:169 Button", "Consumer:170 Button", 
                    "Consumer:171 Button", "Consumer:172 Button", 
                    "Consumer:173 Button", "Consumer:174 Button", 
                    "Consumer:175 Button", "Play Button", "Pause Button", 
                    "Record Button", "FastForward Button", "Rewind Button", 
                    "ScanNextTrack Button", "ScanPreviousTrack Button", 
                    "Stop Button", "Eject Button", "RandomPlay Button", 
                    "SelectDisc Button", "EnterDisc Button", "Repeat Button", 
                    "Tracking Button", "TrackNormal Button", 
                    "SlowTracking Button", "FrameForward Button", 
                    "FrameBack Button", "Mark Button", "ClearMark Button", 
                    "RepeatFromMark Button", "ReturnToMark Button", 
                    "SearchMarkForward Button", "SearchMarkBackwards Button", 
                    "CounterReset Button", "ShowCounter Button", 
                    "TrackingIncrement Button", "TrackingDecrement Button", 
                    "StopOrEject Button", "PlayOrPause Button", 
                    "PlayOrSkip Button", "Consumer:207 Button", 
                    "Consumer:208 Button", "Consumer:209 Button", 
                    "Consumer:210 Button", "Consumer:211 Button", 
                    "Consumer:212 Button", "Consumer:213 Button", 
                    "Consumer:214 Button", "Consumer:215 Button", 
                    "Consumer:216 Button", "Consumer:217 Button", 
                    "Consumer:218 Button", "Consumer:219 Button", 
                    "Consumer:220 Button", "Consumer:221 Button", 
                    "Consumer:222 Button", "Consumer:223 Button", 
                    "Volume Button", "Balance Button", "Mute Button", 
                    "Bass Button", "Treble Button", "BassBoost Button", 
                    "SurroundMode Button", "Loudness Button", "MPX Button", 
                    "VolumeIncrement Button", "VolumeDecrement Button", 
                    "Consumer:235 Button", "Consumer:236 Button", 
                    "Consumer:237 Button", "Consumer:238 Button", 
                    "Consumer:239 Button", "Speed Button", 
                    "PlaybackSpeed Button", "StandardPlay Button", 
                    "LongPlay Button", "ExtendedPlay Button", "Slow Button", 
                    "Consumer:246 Button", "Consumer:247 Button", 
                    "Consumer:248 Button", "Consumer:249 Button", 
                    "Consumer:250 Button", "Consumer:251 Button", 
                    "Consumer:252 Button", "Consumer:253 Button", 
                    "Consumer:254 Button", "Consumer:255 Button", 
                    "FanEnable Button", "FanSpeed Button", 
                    "LightEnable Button", "LightIlluminationLevel Button", 
                    "ClimateControlEnable Button", "RoomTemperature Button", 
                    "SecurityEnable Button", "FireAlarm Button", 
                    "PoliceAlarm Button", "Consumer:265 Button", 
                    "Consumer:266 Button", "Consumer:267 Button", 
                    "Consumer:268 Button", "Consumer:269 Button", 
                    "Consumer:270 Button", "Consumer:271 Button", 
                    "Consumer:272 Button", "Consumer:273 Button", 
                    "Consumer:274 Button", "Consumer:275 Button", 
                    "Consumer:276 Button", "Consumer:277 Button", 
                    "Consumer:278 Button", "Consumer:279 Button", 
                    "Consumer:280 Button", "Consumer:281 Button", 
                    "Consumer:282 Button", "Consumer:283 Button", 
                    "Consumer:284 Button", "Consumer:285 Button", 
                    "Consumer:286 Button", "Consumer:287 Button", 
                    "Consumer:288 Button", "Consumer:289 Button", 
                    "Consumer:290 Button", "Consumer:291 Button", 
                    "Consumer:292 Button", "Consumer:293 Button", 
                    "Consumer:294 Button", "Consumer:295 Button", 
                    "Consumer:296 Button", "Consumer:297 Button", 
                    "Consumer:298 Button", "Consumer:299 Button", 
                    "Consumer:300 Button", "Consumer:301 Button", 
                    "Consumer:302 Button", "Consumer:303 Button", 
                    "Consumer:304 Button", "Consumer:305 Button", 
                    "Consumer:306 Button", "Consumer:307 Button", 
                    "Consumer:308 Button", "Consumer:309 Button", 
                    "Consumer:310 Button", "Consumer:311 Button", 
                    "Consumer:312 Button", "Consumer:313 Button", 
                    "Consumer:314 Button", "Consumer:315 Button", 
                    "Consumer:316 Button", "Consumer:317 Button", 
                    "Consumer:318 Button", "Consumer:319 Button", 
                    "Consumer:320 Button", "Consumer:321 Button", 
                    "Consumer:322 Button", "ALNextTaskOrApplication Button", 
                    "Consumer:324 Button", "Consumer:325 Button", 
                    "Consumer:326 Button", "Consumer:327 Button", 
                    "Consumer:328 Button", "Consumer:329 Button", 
                    "Consumer:330 Button", "Consumer:331 Button", 
                    "Consumer:332 Button", "Consumer:333 Button", 
                    "Consumer:334 Button", "Consumer:335 Button", 
                    "BalanceRight Button", "BalanceLeft Button", 
                    "BassIncrement Button", "BassDecrement Button", 
                    "TrebleIncrement Button", "TrebleDecrement Button", 
                    "Consumer:342 Button", "Consumer:343 Button", 
                    "Consumer:344 Button", "Consumer:345 Button", 
                    "Consumer:346 Button", "Consumer:347 Button", 
                    "Consumer:348 Button", "Consumer:349 Button", 
                    "Consumer:350 Button", "Consumer:351 Button", 
                    "SpeakerSystem Button", "ChannelLeft Button", 
                    "ChannelRight Button", "ChannelCenter Button", 
                    "ChannelFront Button", "ChannelCenterFront Button", 
                    "ChannelSide Button", "ChannelSurround Button", 
                    "ChannelLowFrequencyEnhancement Button", 
                    "ChannelTop Button", "ChannelUnknown Button", 
                    "Consumer:363 Button", "Consumer:364 Button", 
                    "Consumer:365 Button", "Consumer:366 Button", 
                    "Consumer:367 Button", "SubChannel Button", 
                    "SubChannelIncrement Button", 
                    "SubChannelDecrement Button", 
                    "AlternateAudioIncrement Button", 
                    "AlternateAudioDecrement Button", "Consumer:373 Button", 
                    "Consumer:374 Button", "Consumer:375 Button", 
                    "Consumer:376 Button", "Consumer:377 Button", 
                    "Consumer:378 Button", "Consumer:379 Button", 
                    "Consumer:380 Button", "Consumer:381 Button", 
                    "Consumer:382 Button", "Consumer:383 Button", 
                    "ApplicationLaunchButtons", 
                    "ALLaunchButtonConfigurationTool", 
                    "ALProgrammableButtonConfiguration", 
                    "ALConsumerControlConfiguration Button", 
                    "ALWordProcessor Button", "ALTextEditor Button", 
                    "ALSpreadsheet Button", "ALGraphicsEditor Button", 
                    "ALPresentationApp Button", "ALDatabaseApp Button", 
                    "ALEmailReader Button", "ALNewsreader Button", 
                    "ALVoicemail Button", "ALContactsOrAddressBook Button", 
                    "ALCalendarOrSchedule Button", 
                    "ALTaskOrProjectManager Button", 
                    "ALLogOrJournalOrTimecard Button", 
                    "ALCheckbookOrFinance Button", "ALCalculator Button", 
                    "ALAOrVCaptureOrPlayback Button", 
                    "ALLocalMachineBrowser Button", 
                    "ALLANOrWANBrowser Button", "ALInternetBrowser Button", 
                    "ALRemoteNetworkingOrISPConnect Button", 
                    "ALNetworkConference Button", "ALNetworkChat Button", 
                    "ALTelephonyOrDialer Button", "ALLogon Button", 
                    "ALLogoff Button", "ALLogonOrLogoff Button", 
                    "ALTerminalLockOrScreensaver Button", 
                    "ALControlPanel Button", 
                    "ALCommandLineProcessorOrRun Button", 
                    "ALProcessOrTaskManager Button", "AL Button", 
                    "Consumer:419 Button", 
                    "ALPreviousTaskOrApplication Button", 
                    "ALPreemptiveHaltTaskOrApplication Button", 
                    "Consumer:422 Button", "Consumer:423 Button", 
                    "Consumer:424 Button", "Consumer:425 Button", 
                    "Consumer:426 Button", "Consumer:427 Button", 
                    "Consumer:428 Button", "Consumer:429 Button", 
                    "Consumer:430 Button", "Consumer:431 Button", 
                    "Consumer:432 Button", "Consumer:433 Button", 
                    "Consumer:434 Button", "Consumer:435 Button", 
                    "Consumer:436 Button", "Consumer:437 Button", 
                    "Consumer:438 Button", "Consumer:439 Button", 
                    "Consumer:440 Button", "Consumer:441 Button", 
                    "Consumer:442 Button", "Consumer:443 Button", 
                    "Consumer:444 Button", "Consumer:445 Button", 
                    "Consumer:446 Button", "Consumer:447 Button", 
                    "Consumer:448 Button", "Consumer:449 Button", 
                    "Consumer:450 Button", "Consumer:451 Button", 
                    "Consumer:452 Button", "Consumer:453 Button", 
                    "Consumer:454 Button", "Consumer:455 Button", 
                    "Consumer:456 Button", "Consumer:457 Button", 
                    "Consumer:458 Button", "Consumer:459 Button", 
                    "Consumer:460 Button", "Consumer:461 Button", 
                    "Consumer:462 Button", "Consumer:463 Button", 
                    "Consumer:464 Button", "Consumer:465 Button", 
                    "Consumer:466 Button", "Consumer:467 Button", 
                    "Consumer:468 Button", "Consumer:469 Button", 
                    "Consumer:470 Button", "Consumer:471 Button", 
                    "Consumer:472 Button", "Consumer:473 Button", 
                    "Consumer:474 Button", "Consumer:475 Button", 
                    "Consumer:476 Button", "Consumer:477 Button", 
                    "Consumer:478 Button", "Consumer:479 Button", 
                    "Consumer:480 Button", "Consumer:481 Button", 
                    "Consumer:482 Button", "Consumer:483 Button", 
                    "Consumer:484 Button", "Consumer:485 Button", 
                    "Consumer:486 Button", "Consumer:487 Button", 
                    "Consumer:488 Button", "Consumer:489 Button", 
                    "Consumer:490 Button", "Consumer:491 Button", 
                    "Consumer:492 Button", "Consumer:493 Button", 
                    "Consumer:494 Button", "Consumer:495 Button", 
                    "Consumer:496 Button", "Consumer:497 Button", 
                    "Consumer:498 Button", "Consumer:499 Button", 
                    "Consumer:500 Button", "Consumer:501 Button", 
                    "Consumer:502 Button", "Consumer:503 Button", 
                    "Consumer:504 Button", "Consumer:505 Button", 
                    "Consumer:506 Button", "Consumer:507 Button", 
                    "Consumer:508 Button", "Consumer:509 Button", 
                    "Consumer:510 Button", "Consumer:511 Button", 
                    "GenericGUIApplicationControls Button", "ACNew Button", 
                    "ACOpen Button", "ACClose Button", "ACExit Button", 
                    "ACMaximize Button", "ACMinimize Button", "ACSave Button",
                     "ACPrint Button", "ACProperties Button", 
                    "Consumer:522 Button", "Consumer:523 Button", 
                    "Consumer:524 Button", "Consumer:525 Button", 
                    "Consumer:526 Button", "Consumer:527 Button", 
                    "Consumer:528 Button", "Consumer:529 Button", 
                    "Consumer:530 Button", "Consumer:531 Button", 
                    "Consumer:532 Button", "Consumer:533 Button", 
                    "Consumer:534 Button", "Consumer:535 Button", 
                    "Consumer:536 Button", "Consumer:537 Button", 
                    "ACUndo Button", "ACCopy Button", "ACCut Button", 
                    "ACPaste Button", "AC Button", "ACFind Button", 
                    "ACFindandReplace Button", "ACSearch Button", 
                    "ACGoTo Button", "ACHome Button", "ACBack Button", 
                    "ACForward Button", "ACStop Button", "ACRefresh Button", 
                    "ACPreviousLink Button", "ACNextLink Button", 
                    "ACBookmarks Button", "ACHistory Button", 
                    "ACSubscriptions Button", "ACZoomIn Button", 
                    "ACZoomOut Button", "ACZoom Button", 
                    "ACFullScreenView Button", "ACNormalView Button", 
                    "ACViewToggle Button", "ACScrollUp Button", 
                    "ACScrollDown Button", "ACScroll Button", 
                    "ACPanLeft Button", "ACPanRight Button", "ACPan Button", 
                    "ACNewWindow Button", "ACTileHorizontally Button", 
                    "ACTileVertically Button", "ACFormat Button", 
                    "Consumer:573 Button", "Consumer:574 Button", 
                    "Consumer:575 Button", "Consumer:576 Button", 
                    "Consumer:577 Button", "Consumer:578 Button", 
                    "Consumer:579 Button", "Consumer:580 Button", 
                    "Consumer:581 Button", "Consumer:582 Button", 
                    "Consumer:583 Button", "Consumer:584 Button", 
                    "Consumer:585 Button", "Consumer:586 Button", 
                    "Consumer:587 Button", "Consumer:588 Button", 
                    "Consumer:589 Button", "Consumer:590 Button", 
                    "Consumer:591 Button", "Consumer:592 Button", 
                    "Consumer:593 Button", "Consumer:594 Button", 
                    "Consumer:595 Button", "Consumer:596 Button", 
                    "Consumer:597 Button", "Consumer:598 Button", 
                    "Consumer:599 Button", "Consumer:600 Button", 
                    "Consumer:601 Button", "Consumer:602 Button", 
                    "Consumer:603 Button", "Consumer:604 Button", 
                    "Consumer:605 Button", "Consumer:606 Button", 
                    "Consumer:607 Button", "Consumer:608 Button", 
                    "Consumer:609 Button", "Consumer:610 Button", 
                    "Consumer:611 Button", "Consumer:612 Button", 
                    "Consumer:613 Button", "Consumer:614 Button", 
                    "Consumer:615 Button", "Consumer:616 Button", 
                    "Consumer:617 Button", "Consumer:618 Button", 
                    "Consumer:619 Button", "Consumer:620 Button", 
                    "Consumer:621 Button", "Consumer:622 Button", 
                    "Consumer:623 Button", "Consumer:624 Button", 
                    "Consumer:625 Button", "Consumer:626 Button", 
                    "Consumer:627 Button", "Consumer:628 Button", 
                    "Consumer:629 Button", "Consumer:630 Button", 
                    "Consumer:631 Button", "Consumer:632 Button", 
                    "Consumer:633 Button", "Consumer:634 Button", 
                    "Consumer:635 Button", "Consumer:636 Button", 
                    "Consumer:637 Button", "Consumer:638 Button", 
                    "Consumer:639 Button", "Consumer:640 Button", 
                    "Consumer:641 Button", "Consumer:642 Button", 
                    "Consumer:643 Button", "Consumer:644 Button", 
                    "Consumer:645 Button", "Consumer:646 Button", 
                    "Consumer:647 Button", "Consumer:648 Button", 
                    "Consumer:649 Button", "Consumer:650 Button", 
                    "Consumer:651 Button", "Consumer:652 Button"}]}], 
                    ColumnAlignments -> {Right, Left}, StripOnInput -> True], 
                    StandardForm]]}, Dynamic[System`InfoDump`dynamic$$]]},
                    {
                    TemplateBox[{CheckboxBox[
                    Dynamic[System`InfoDump`dynamic$$], ImageSize -> Small],
                    "\" Show Dynamic Values\""},
                    "RowDefault"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    DynamicModuleValues:>{}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {{1.}}, "RowsIndexed" -> {}}]}, Dynamic[
                    System`InfoDump`open$$],
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                   DynamicModuleValues:>{}]}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{"Rows" -> {{False}, 
                    GrayLevel[0, 0.2]}},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.32]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}]}, {6,
       TagBox[
        TooltipBox[
         StyleBox[
          DynamicBox[ToBoxes[
            FEPrivate`FrontEndResource[
            "SystemInformationDialog", "NetworkTabLabel"], StandardForm],
           ImageSizeCache->{67., {0., 14.}}],
          StripOnInput->False,
          DynamicUpdating->True],
         "\"SystemInformation[\\\"Network\\\"]\"",
         TooltipStyle->"TextStyling"],
        Annotation[#, "SystemInformation[\"Network\"]", "Tooltip"]& ]->
       GridBox[{
         {GridBox[{
            {
             TagBox[
              TooltipBox["\<\" IP Addresses\"\>",
               "\"SystemInformation[\\\"Network\\\", \\\"IPAddresses\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, "SystemInformation[\"Network\", \"IPAddresses\"]",
                "Tooltip"]& ], 
             RowBox[{"{", 
              
              RowBox[{"\<\"fe80::d9ed:bd8e:6ef8:232c\"\>", 
               ",", "\<\"fe80::5efe:192.168.0.5\"\>", 
               ",", "\<\"fe80::497e:3d0c:c148:34a9\"\>", 
               ",", "\<\"fe80::429:578:4c21:ac9c\"\>", 
               ",", "\<\"fe80::2445:d56f:bc83:b129\"\>", 
               ",", "\<\"2804:14d:148b:5:e421:e76e:5c58:7347\"\>", 
               ",", "\<\"2804:14d:148b:5:497e:3d0c:c148:34a9\"\>", 
               ",", "\<\"2001:0:9d38:90d7:429:578:4c21:ac9c\"\>", 
               ",", "\<\"192.168.0.5\"\>", ",", "\<\"169.254.35.44\"\>", 
               ",", "\<\"169.254.177.41\"\>"}], "}"}]},
            {
             TagBox[
              TooltipBox["\<\" Allow Internet Use\"\>",
               
               "\"SystemInformation[\\\"Network\\\", \
\\\"AllowInternetUse\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Network\", \"AllowInternetUse\"]", 
               "Tooltip"]& ], "True"},
            {
             TagBox[
              TooltipBox["\<\" Load On Demand\"\>",
               "\"SystemInformation[\\\"Network\\\", \\\"LoadOnDemand\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Network\", \"LoadOnDemand\"]", 
               "Tooltip"]& ], "True"},
            {
             TagBox[
              TooltipBox["\<\" Load On Demand Servers\"\>",
               
               "\"SystemInformation[\\\"Network\\\", \
\\\"LoadOnDemandServers\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Network\", \"LoadOnDemandServers\"]", 
               "Tooltip"]& ], 
             RowBox[{"{", "\<\"http://pacletserver.wolfram.com\"\>", "}"}]},
            {"\<\"\"\>", 
             ButtonBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "SystemInformationDialog", "TestConnectivityButtonText"], 
                 StandardForm],
                ImageSizeCache->{151., {4., 13.}}],
               StripOnInput->False,
               DynamicUpdating->True],
              Appearance->Automatic,
              BaseStyle->"DialogStyle",
              
              ButtonFunction:>(Needs["PacletManager`"]; 
               PacletManager`Package`testConnectivity[]),
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Queued"]},
            {
             TagBox[
              TooltipBox["\<\" Latest Transaction\"\>",
               
               "\"SystemInformation[\\\"Network\\\", \
\\\"LatestTransaction\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Network\", \"LatestTransaction\"]", 
               "Tooltip"]& ], "\<\"No information available.\"\>"},
            {
             TagBox[
              TooltipBox["\<\" Last Local Index Update\"\>",
               
               "\"SystemInformation[\\\"Network\\\", \\\"LastLocalIndexUpdate\
\\\"]\"",
               TooltipStyle->"TextStyling"],
              
              Annotation[#, 
               "SystemInformation[\"Network\", \"LastLocalIndexUpdate\"]", 
               "Tooltip"]& ], "\<\"Fri 12 Aug 2016 15:04:38\"\>"},
            {"\<\"\"\>", 
             ButtonBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "SystemInformationDialog", "UpdateLocalIndexButtonText"], 
                 StandardForm],
                ImageSizeCache->{168., {4., 14.}}],
               StripOnInput->False,
               DynamicUpdating->True],
              Appearance->Automatic,
              BaseStyle->"DialogStyle",
              
              ButtonFunction:>(Needs["PacletManager`"]; 
               PacletManager`PacletSiteUpdate[
                "http://pacletserver.wolfram.com", Interactive -> True]),
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Queued"]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {Right, Left}},
           GridBoxDividers->{"Rows" -> {{False}, 
               GrayLevel[0, 0.2]}},
           GridBoxItemSize->{"Columns" -> {14, 24.9375}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.28], {
                Offset[0.84]}, 
               Offset[0.28]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.48]}, 
               Offset[0.2]}}]},
         {
          DynamicModuleBox[{System`InfoDump`open$$ = False}, 
           PaneSelectorBox[{False->
            RowBox[{
             OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "SystemInformationDialog", "AdvancedText"], StandardForm],
                ImageSizeCache->{85., {0., 14.}}],
               StripOnInput->False,
               DynamicUpdating->True],
              StripOnInput->False,
              FontWeight->Bold]}], True->GridBox[{
              {
               RowBox[{
                OpenerBox[Dynamic[System`InfoDump`open$$]], "   ", 
                StyleBox[
                 StyleBox[
                  DynamicBox[ToBoxes[
                    FEPrivate`FrontEndResource[
                    "SystemInformationDialog", "AdvancedText"], StandardForm]],
                  StripOnInput->False,
                  DynamicUpdating->True],
                 StripOnInput->False,
                 FontWeight->Bold]}]},
              {GridBox[{
                 {
                  TagBox[
                   TooltipBox["\<\"Paclets\"\>",
                    TagBox["PacletManager`Information`$Version", HoldForm]],
                   Annotation[#, 
                    HoldForm[PacletManager`Information`$Version], 
                    "Tooltip"]& ], "\<\"PacletManager Version 3.0.0\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" Total Downloads\"\>",
                    
                    "\"SystemInformation[\\\"Network\\\", \
\\\"TotalDownloads\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Network\", \"TotalDownloads\"]", 
                    "Tooltip"]& ], "\<\"No information available.\"\>"},
                 {
                  TagBox[
                   TooltipBox["\<\" Downloads Directory\"\>",
                    
                    "\"SystemInformation[\\\"Network\\\", \
\\\"DownloadsDirectory\\\"]\"",
                    TooltipStyle->"TextStyling"],
                   
                   Annotation[#, 
                    "SystemInformation[\"Network\", \"DownloadsDirectory\"]", 
                    "Tooltip"]& ], "\<\"No information available.\"\>"}
                },
                AutoDelete->False,
                GridBoxAlignment->{"Columns" -> {Right, Left}},
                GridBoxDividers->{},
                GridBoxItemSize->{"Columns" -> {14, 24.9375}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.28], {
                    Offset[0.84]}, 
                    Offset[0.28]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.48]}, 
                    Offset[0.2]}}]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
            System`InfoDump`open$$],
            ImageSize->Automatic],
           DynamicModuleValues:>{}]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.8]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}]}}, 1,
       DefaultBaseStyle->"DialogStyle",
       ImageSize->{All, Automatic}]},
     {
      TagBox[
       TooltipBox[
        ButtonBox[
         StyleBox[
          DynamicBox[ToBoxes[
            FEPrivate`FrontEndResource[
            "SystemInformationDialog", "CopyButtonText"], StandardForm],
           ImageSizeCache->{52., {4., 13.}}],
          StripOnInput->False,
          DynamicUpdating->True],
         Appearance->Automatic,
         BaseStyle->"DialogStyle",
         ButtonFunction:>System`InfoDump`copytoclipboard[
           
           SystemInformationData[{
            "Kernel" -> {
              "Version" -> 
               "11.0.0 for Microsoft Windows (64-bit) (July 28, 2016)", 
               "ReleaseID" -> "11.0.0.0 (5570737, 2016072801)", "LicenseID" -> 
               "L2482-2405", "PatchLevel" -> "0", "ActivationKey" -> 
               "2482-2405-4UTTYK", "ActivationGroupID" -> "L2482-2405", 
               "MachineID" -> "6240-36636-61900", "UserName" -> "smartin", 
               "MachineName" -> "alienwarex51", "MachineDomains" -> {}, 
               "LicenseServer" -> "alienwarex51", "MaxLicenseProcesses" -> 8, 
               "LicenseExpirationDate" -> DateObject[{2017, 7, 8}], 
               "MachineType" -> "PC", "OperatingSystem" -> "Windows", 
               "ProcessorType" -> "x86-64", "Language" -> "English", 
               "CharacterEncoding" -> "WindowsANSI", 
               "SystemCharacterEncoding" -> "WindowsANSI", "TimeZone" -> -4., 
               "CreationDate" -> DateObject[{2016, 7, 28}, 
                 TimeObject[{18, 52, 37.}, TimeZone -> -4.], TimeZone -> -4.],
                "InstallationDirectory" -> 
               "C:\\Program Files\\Wolfram Research\\Mathematica\\11.0", 
               "InitializationFiles" -> {
                "C:\\ProgramData\\Mathematica\\Kernel\\init.m", 
                 "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\Kernel\\\
init.m"}, "CurrentDirectory" -> 
               "C:\\Users\\smartin\\Desktop\\HDF5WrappersForMathematica  Ver \
12 August 2016", "HomeDirectory" -> "C:\\Users\\smartin", 
               "UserDocumentsDirectory" -> "C:\\Users\\smartin\\Documents", 
               "UserBaseDirectory" -> 
               "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica", 
               "BaseDirectory" -> "C:\\ProgramData\\Mathematica", 
               "Path" -> {
                "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links", 
                 "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\Kernel", 
                 "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\\
Autoload", "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\Applications", 
                 "C:\\ProgramData\\Mathematica\\Kernel", 
                 "C:\\ProgramData\\Mathematica\\Autoload", 
                 "C:\\ProgramData\\Mathematica\\Applications", ".", 
                 "C:\\Users\\smartin", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Autoload", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\ExtraPackages", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\Packages", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\Documentation\\English\\System", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Data\\ICC"}, 
               "PackagesLoaded" -> {
                "JLink`", "NETLink`", "GetFEKernelInit`", 
                 "SymbolicMachineLearningLoader`", "StreamingLoader`", 
                 "NeuralNetworks`", "IconizeLoader`", "HTTPHandlingLoader`", 
                 "CloudObjectLoader`", "ResourceLocator`", "PacletManager`", 
                 "System`", "Global`"}, 
               "AllFilesLoaded" -> {
                "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\CharacterEncodings\\WindowsANSI.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\sysinit.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\mainload.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\InactivateExclusions.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\Parallel\\Kernel\\sysload.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\Parallel\\SysInfo.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\SystemInformation.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Converters.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
init.m", "C:\\Program Files\\Wolfram Research\\Mathematica\\11.0\\SystemFiles\
\\Autoload\\PacletManager\\PacletManager.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Utils.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Paclet.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Roots.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\CharacterEncodings\\Unicode.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Collection.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
LayoutDocsCollection.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
MemoryCollection.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Extension.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Documentation.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Notebook.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Services.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\AlphaIntegration.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Packer.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Zip.m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\ResourceLocator\\Kernel\\\
init.m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\ResourceLocator\\\
ResourceLocator.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Manager.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\DateTime\\DateObject.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\DataPaclets\\CalendarData.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\ExternalService\\URITools.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\CharacterEncodings\\UTF8.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\CharacterFunctions\\CharacterFunctions.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\StringPattern.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\CharacterEncodings\\ASCII.m", 
                 "C:\\ProgramData\\Mathematica\\Kernel\\init.m", 
                 "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\Kernel\\\
init.m", "C:\\Program Files\\Wolfram Research\\Mathematica\\11.0\\SystemFiles\
\\Kernel\\SystemResources\\Windows-x86-64\\FEKernelInit.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\TextResources\\English\\\
FunctionInformation.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Notebook.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\OutputSizeLimit.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\RuntimeTools.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\DateTime\\DateString.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Explore\\Explore.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\NETLink.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\JLink\\JLink.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\JLink\\Kernel\\\
SystemResources\\Windows-x86-64\\JLink.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\InstallNET.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\CallNET.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\NET.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\NETBlock.m",
                  "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\\
MakeNETObject.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\Reflection.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\Delegates.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\DLL.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\UI.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\ComplexType.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\Exceptions.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\Utils.m", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\JLinkCommon.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\MathKernel.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\COM.m"}, 
               "ContextPath" -> {
                "NETLink`", "JLink`", "SymbolicMachineLearningLoader`", 
                 "StreamingLoader`", "NeuralNetworks`", "IconizeLoader`", 
                 "HTTPHandlingLoader`", "CloudObjectLoader`", 
                 "PacletManager`", "System`", "Global`"}, 
               "AvailableAddOns" -> {
                "AstronomyConvenienceFunctions", "AuthorTools", 
                 "ClusterIntegration", "CompiledFunctionTools", 
                 "DataDropClient", "DemoChannels", "DemonstrationsTools", 
                 "DocumentationSearch", "EntityFramework", "FormulaData", 
                 "GeoFieldModelData", "HumanGrowthData", "InflationAdjust", 
                 "LightweightGridClient", "NotebookTemplating", "OAuth", 
                 "PacletManager", "Parallel", "QuantityUnits", 
                 "ResourceLocator", "Security", "StandardOceanData", 
                 "SubKernels", "SymbolicC"}, "OpenStreams" -> {
                 OutputStream["stdout", 1], 
                 OutputStream["stderr", 2]}, "OpenWSTPConnections" -> {
                 LinkObject["w6xk8_shm", 3, 1], 
                 LinkObject["pkbgn_shm", 49, 2], 
                 LinkObject["i68nv_shm", 50, 3], 
                 LinkObject[
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\InstallableNET.exe",
                   88, 4], 
                 LinkObject["vkctp_shm", 89, 5]}, "InstalledPrograms" -> {
                 LinkObject[
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\InstallableNET.exe",
                   88, 4]}, "DefaultCCompiler" -> Missing["NotActive"], 
               "CCompilers" -> Missing["NotActive"], "SystemID" -> 
               "Windows-x86-64", 
               "CommandLine" -> {
                "WolframKernel", "-wstp", "-noicon", "-mathlink", 
                 "-linkprotocol", "SharedMemory", "-linkmode", "connect", 
                 "-linkname", "w6xk8_shm"}, "ProcessID" -> 3360, 
               "ParentProcessID" -> 0, "WSTPVersion" -> "4.37 (2016072801)", 
               "ProcessorCount" -> 4, "SystemMemory" -> 8589934592, 
               "LicenseSubprocesses" -> 0, "MaxLicenseSubprocesses" -> 16, 
               "EvaluatorName" -> "Local", "EvaluatorNames" -> {"Local"}, 
               "ByteOrdering" -> -1, "PathnameSeparator" -> "\\", 
               "MachinePrecision" -> 15.954589770191003`, "MachineEpsilon" -> 
               2.220446049250313*^-16, "MinMachineNumber" -> 
               2.2250738585072014`*^-308, "MaxMachineNumber" -> 
               1.7976931348623157`*^308, "MinNumberString" -> 
               "6.22968824967532196119819746965503015872`15.954589770191005*^-\
1355718576299610", "MaxNumber" -> 
               1.60521676193366172702774105306375828321`15.954589770191005*^\
1355718576299609}, 
             "FrontEnd" -> {
              "Version" -> 
               "11.0 for Microsoft Windows (64-bit) (July 28, 2016)", 
               "ReleaseID" -> "11.0.0.0 (5570737, 2016072801)", "LicenseID" -> 
               "L2482-2405", "PatchLevel" -> "0", "ActivationKey" -> 
               "2482-2405-4UTTYK", "ActivationGroupID" -> "L2482-2405", 
               "MachineID" -> "6240-36636-61900", "UserName" -> "smartin", 
               "MachineName" -> "alienwarex51", "MachineDomains" -> {}, 
               "LicenseServer" -> "alienwarex51", "MaxLicenseProcesses" -> 8, 
               "LicenseExpirationDate" -> {2017, 7, 8, 0, 0, 0}, 
               "MachineType" -> "PC", "OperatingSystem" -> "Windows", 
               "ProcessorType" -> "x86-64", "Language" -> "English", 
               "ExternalCharacterEncoding" -> "WindowsANSI", 
               "TimeZone" -> -4., "CurrentDirectory" -> 
               "C:\\Users\\smartin\\Documents", "HomeDirectory" -> 
               "C:\\Users\\smartin\\", "UserDocumentsDirectory" -> 
               "C:\\Users\\smartin\\Documents\\", "UserBaseDirectory" -> 
               "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\", 
               "BaseDirectory" -> "C:\\ProgramData\\Mathematica\\", 
               "NotebookPath" -> {
                "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\Autoload\\\
*\\FrontEnd\\Palettes\\", 
                 "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\\
Applications\\*\\FrontEnd\\Palettes\\", 
                 "C:\\ProgramData\\Mathematica\\Autoload\\*\\FrontEnd\\\
Palettes\\", 
                 "C:\\ProgramData\\Mathematica\\Applications\\*\\FrontEnd\\\
Palettes\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Autoload\\*\\FrontEnd\\Palettes\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\*\\FrontEnd\\Palettes\\", 
                 "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\\
SystemFiles\\FrontEnd\\Palettes\\", 
                 "C:\\ProgramData\\Mathematica\\SystemFiles\\FrontEnd\\\
Palettes\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\Configuration\\FrontEnd\\Palettes\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Components\\*\\FrontEnd\\Palettes\\\
", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\*\\FrontEnd\\Palettes\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\FrontEnd\\Palettes\\", 
                 "C:\\Users\\smartin\\", 
                 "C:\\Program Files\\Wolfram Research\\Mathematica\\11.0\\"}, 
               "InstallationDirectory" -> 
               "C:\\Program Files\\Wolfram Research\\Mathematica\\11.0\\", 
               "InitializationFiles" -> {
                "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Notebook.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\FEKernelInit.mx", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Notebook.mx"}, "CreationDate" -> DateObject[{2016, 7, 28}, 
                 TimeObject[{18, 26, 11.}, TimeZone -> -4.], TimeZone -> -4.],
                "TrustedPath" -> {
                "C:\\Users\\smartin\\Documents\\Wolfram Mathematica\\", 
                 "C:\\Program Files\\Wolfram Research\\Mathematica\\11.0\\", 
                 "C:\\ProgramData\\Mathematica\\", 
                 "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\"}, 
               "UntrustedPath" -> {
                "C:\\Users\\smartin\\Desktop\\", 
                 "C:\\Users\\smartin\\Downloads\\", 
                 "C:\\Users\\smartin\\AppData\\Local\\", 
                 "C:\\Users\\smartin\\AppData\\Roaming\\", 
                 "C:\\Program Files\\", "C:\\Program Files (x86)\\", 
                 "C:\\Users\\smartin\\AppData\\Local\\Programs\\", 
                 "C:\\Users\\smartin\\AppData\\Local\\Temp\\", 
                 "C:\\Users\\smartin\\AppData\\Local\\Microsoft\\Windows\\\
INetCache\\"}, "TrustByDefault" -> Automatic, "InitializationCellWarning" -> 
               True, "SystemID" -> "Windows-x86-64", "ProcessID" -> 6580, 
               "WSTPVersion" -> "4.37 (2016072801)", "OperatingSystemVersion" -> 
               "10.0 (Build 10586)", "LicenseSubprocesses" -> 0, 
               "MaxLicenseSubprocesses" -> 16, "SyntaxColoringEnabled" -> 
               True, "DebuggerEnabled" -> False, "NotebookIndexers" -> 
               "Windows Search (10.0.1.36)", "BrowserPlugin" -> 
               "Internet Explorer x64 (11.0.30762.54369), Internet Explorer \
(11.0.30762.54369), Netscape (11.0.30762.54369)", 
               "DefaultFormatTypes" -> {StandardForm, StandardForm}}, 
             "Links" -> {"OpenStreams" -> {
                 OutputStream["stdout", 1], 
                 OutputStream["stderr", 2]}, "OpenWSTPConnections" -> {
                 LinkObject["w6xk8_shm", 3, 1], 
                 LinkObject["pkbgn_shm", 49, 2], 
                 LinkObject["i68nv_shm", 50, 3], 
                 LinkObject[
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\InstallableNET.exe",
                   88, 4], 
                 LinkObject["vkctp_shm", 89, 5]}, "InstalledPrograms" -> {
                 LinkObject[
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\InstallableNET.exe",
                   88, 4]}, "JLinkVersion" -> "J/Link Version 4.9.1", 
               "JavaRunning" -> False, "JavaVersion" -> Missing["NotActive"], 
               "JLinkClasspath" -> {
                "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Java\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Java\\WolframSSH.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Java\\WolframSSHKeyGen.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Java\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Java\\\
antlr.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Java\\\
mexpr.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Java\\\
mexprparser.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Java\\\
PacletManager.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Java\\\
WRIjdbm.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\activation.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\bzip2.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\commons-codec-1.3.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\commons-\
collections-3.2.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\commons-\
httpclient-3.0.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\commons-lang-2.1.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\commons-logging-1.\
1.1.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\Convert.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\core-3.0.0.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\customizer.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\dom4j-1.6.1.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\Exif.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\externalservice.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\gnu-regexp-1.1.4.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\grib-8.0.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\jackcess-1.1.18.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\javase-3.0.0.jar",
                  "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\jdbf.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\jdom.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\jmf.jar", 
                 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\JPEG2000b.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\JSON.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\jxl.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\ldap.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\mail.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\mediaplayer.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\multiplayer.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\netcdf-4.2.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\poi-3.11-20150702.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\poi-examples-3.11-\
20150702.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\poi-excelant-3.11-\
20150702.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\poi-ooxml-3.11-\
20150702.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\poi-ooxml-schemas-\
3.11-20150702.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\poi-scratchpad-3.\
11-20150702.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\prefsAll.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\resourcesOptional.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\stax-api-1.0.1.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\tagsoup-1.0rc9.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\tar.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\xercesImpl.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\xml-apis.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\xmlbeans-2.3.0.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\zxing-client.jar",
                  "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\bsf-Wolfram.jar",
                  "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\bsf.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\concurrent.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\diva-canvas-core.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\GUIKit.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\OculusLayout.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\xercesImpl.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\xmlParserAPIs.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\commons-\
collections-3.1.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\commons-\
dbcp-1.2.1.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\commons-\
pool-1.2.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\derby.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\\
derbyclient.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\drizzle-\
jdbc-1.3.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\\
glazedlists.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\h2-1.3.\
176.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\hsqldb.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\jaybird-\
full-2.2.9.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\jtds-1.3.\
1.jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\mariadb-\
java-client-1.3.4.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\mysql-\
connector-java-5.1.38-bin.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\\
postgresql-9.4-1206-jdbc4.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\sqlite-\
jdbc-3.8.11.2.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\jna.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\JRI.jar", 
                 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\JRIEngine.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\log4j-1.2.16.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\REngine.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\RLink.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\WebServices\\Java\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\WebServices\\Java\\commons-\
httpclient-3.0.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\WebServices\\Java\\commons-\
logging-1.0.4.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\WebServices\\Java\\junit-3.8.\
1.jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\XMLSchema\\Java\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\XMLSchema\\Java\\commons-\
codec-1.3.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\ClusterIntegration\\Java\\\
", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\ClusterIntegration\\Java\\\
Wolfram_SGE.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\DocumentationSearch\\Java\\\
", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\LightweightGridClient\\\
Java\\", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\LightweightGridClient\\\
Java\\wolfram-remote-services-client.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Components\\Interpreter\\Java\\", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Components\\Interpreter\\Java\\\
libphonenumber-7.4.4.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Components\\Interpreter\\Java\\\
ParseTelephoneNumber.jar", 
                 "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Java\\Windows-x86-64\\lib\\tools.\
jar"}, "LoadedJavaClasses" -> {}, ".NetLinkVersion" -> 
               "NET/Link Version 1.6.2", ".NETRunning" -> True, ".NETVersion" -> 
               "4.0.30319.42000", "LoadedNETTypes" -> {
                 NETLink`NETType["System.Version", 2], 
                 NETLink`NETType["System.Environment", 1]}, 
               "LoadedNETAssemblies" -> {
                 NETLink`NETAssembly["mscorlib", 2], 
                 NETLink`NETAssembly["InstallableNET", 3], 
                 NETLink`NETAssembly["Wolfram.NETLink", 4], 
                 NETLink`NETAssembly["System", 5], 
                 NETLink`NETAssembly["System.Windows.Forms", 6], 
                 NETLink`NETAssembly["System.Drawing", 7], 
                 NETLink`NETAssembly["HDF.PInvoke", 1]}, "CUDAQ" -> 
               Missing["NotActive"], "CUDALink" -> Missing["NotActive"], 
               "OpenCLQ" -> Missing["NotActive"], "OpenCLLink" -> 
               Missing["NotActive"], "DatabaseLinkVersion" -> 
               Missing["NotActive"], "OpenDatabaseConnections" -> 
               Missing["NotActive"], "ConfiguredDatabases" -> 
               Missing["NotActive"], "DatabaseSearchPath" -> 
               Missing["NotActive"], "SupportedDatabaseTypes" -> 
               Missing["NotActive"], "WebServicesVersion" -> 
               Missing["NotActive"], "InstalledWebServices" -> 
               Missing["NotActive"]}, 
             "Parallel" -> {
              "KernelCount" -> 0, "RunningKernels" -> {}, "Debugging" -> True,
                "AutomaticLaunching" -> Automatic, "FailedKernelRelaunching" -> 
               True, "EvaluationFailureRecovery" -> "Retry", "ProcessorCount" -> 
               4, "KernelConfiguration" -> {
                 SubKernels`LocalKernels`LocalMachine[
                 4, SubKernels`LocalKernels`LowerPriority -> True]}, 
               "AvailableConnectionMethods" -> {
                "SubKernels`LocalKernels`", "LightweightGridClient`", 
                 "ClusterIntegration`", "SubKernels`RemoteKernels`"}, 
               "LoadedConnectionMethods" -> {"SubKernels`LocalKernels`"}, 
               "DistributedDefinitions" -> {}, "ParallelPackages" -> 
               Missing["NotActive"], "SharedVariables" -> {}, 
               "SharedFunctions" -> {}, "ParallelToolsVersion" -> 
               NumberForm[8., {3, 1}]}, 
             "Devices" -> {
              "ScreenInformation" -> {{
                 "ScreenArea" -> {{0, 1600}, {0, 860}}, 
                  "FullScreenArea" -> {{0, 1600}, {0, 900}}, "BitDepth" -> 32,
                   "Resolution" -> 96}}, 
               "GraphicsDevices" -> {
                "DirectX" -> {
                  "Version" -> "9", "Driver" -> "nvd3dumx.dll", "Description" -> 
                   "NVIDIA GeForce GTX 745", "DeviceName" -> "\\.\\DISPLAY1", 
                   "VendorId" -> "4318", "DeviceId" -> "4994", "SubSysId" -> 
                   "275058910", "Revision" -> "162", 
                   "DeviceIdentifier" -> {
                    "D7B71E3E-50C2-11CF-6866-68301FC2C735"}, "DriverVersion" -> 
                   "10.18.13.5382", "Optimized 3D Transparency" -> True}, 
                 "OpenGL" -> {
                  "OnScreen" -> {
                    "Vendor" -> "NVIDIA Corporation", "Renderer" -> 
                    "GeForce GTX 745/PCIe/SSE2", "Version" -> 
                    "4.5.0 NVIDIA 353.82", 
                    "Extensions" -> {
                    "GL_AMD_multi_draw_indirect", 
                    "GL_AMD_seamless_cubemap_per_texture", 
                    "GL_ARB_arrays_of_arrays", "GL_ARB_base_instance", 
                    "GL_ARB_bindless_texture", "GL_ARB_blend_func_extended", 
                    "GL_ARB_buffer_storage", "GL_ARB_clear_buffer_object", 
                    "GL_ARB_clear_texture", "GL_ARB_clip_control", 
                    "GL_ARB_color_buffer_float", "GL_ARB_compatibility", 
                    "GL_ARB_compressed_texture_pixel_storage", 
                    "GL_ARB_conservative_depth", "GL_ARB_compute_shader", 
                    "GL_ARB_compute_variable_group_size", 
                    "GL_ARB_conditional_render_inverted", 
                    "GL_ARB_copy_buffer", "GL_ARB_copy_image", 
                    "GL_ARB_cull_distance", "GL_ARB_debug_output", 
                    "GL_ARB_depth_buffer_float", "GL_ARB_depth_clamp", 
                    "GL_ARB_depth_texture", "GL_ARB_derivative_control", 
                    "GL_ARB_direct_state_access", "GL_ARB_draw_buffers", 
                    "GL_ARB_draw_buffers_blend", "GL_ARB_draw_indirect", 
                    "GL_ARB_draw_elements_base_vertex", 
                    "GL_ARB_draw_instanced", "GL_ARB_enhanced_layouts", 
                    "GL_ARB_ES2_compatibility", "GL_ARB_ES3_compatibility", 
                    "GL_ARB_ES3_1_compatibility", 
                    "GL_ARB_explicit_attrib_location", 
                    "GL_ARB_explicit_uniform_location", 
                    "GL_ARB_fragment_coord_conventions", 
                    "GL_ARB_fragment_layer_viewport", 
                    "GL_ARB_fragment_program", 
                    "GL_ARB_fragment_program_shadow", 
                    "GL_ARB_fragment_shader", 
                    "GL_ARB_framebuffer_no_attachments", 
                    "GL_ARB_framebuffer_object", "GL_ARB_framebuffer_sRGB", 
                    "GL_ARB_geometry_shader4", "GL_ARB_get_program_binary", 
                    "GL_ARB_get_texture_sub_image", "GL_ARB_gpu_shader5", 
                    "GL_ARB_gpu_shader_fp64", "GL_ARB_half_float_pixel", 
                    "GL_ARB_half_float_vertex", "GL_ARB_imaging", 
                    "GL_ARB_indirect_parameters", "GL_ARB_instanced_arrays", 
                    "GL_ARB_internalformat_query", 
                    "GL_ARB_internalformat_query2", 
                    "GL_NV_internalformat_sample_query", 
                    "GL_ARB_invalidate_subdata", 
                    "GL_ARB_map_buffer_alignment", "GL_ARB_map_buffer_range", 
                    "GL_ARB_multi_bind", "GL_ARB_multi_draw_indirect", 
                    "GL_ARB_multisample", "GL_ARB_multitexture", 
                    "GL_ARB_occlusion_query", "GL_ARB_occlusion_query2", 
                    "GL_ARB_pipeline_statistics_query", 
                    "GL_ARB_pixel_buffer_object", "GL_ARB_point_parameters", 
                    "GL_ARB_point_sprite", "GL_ARB_program_interface_query", 
                    "GL_ARB_provoking_vertex", 
                    "GL_ARB_robust_buffer_access_behavior", 
                    "GL_ARB_robustness", "GL_ARB_sample_shading", 
                    "GL_ARB_sampler_objects", "GL_ARB_seamless_cube_map", 
                    "GL_ARB_seamless_cubemap_per_texture", 
                    "GL_ARB_separate_shader_objects", 
                    "GL_ARB_shader_atomic_counters", 
                    "GL_ARB_shader_bit_encoding", 
                    "GL_ARB_shader_draw_parameters", 
                    "GL_ARB_shader_group_vote", 
                    "GL_ARB_shader_image_load_store", 
                    "GL_ARB_shader_image_size", "GL_ARB_shader_objects", 
                    "GL_ARB_shader_precision", "GL_ARB_query_buffer_object", 
                    "GL_ARB_shader_storage_buffer_object", 
                    "GL_ARB_shader_subroutine", 
                    "GL_ARB_shader_texture_image_samples", 
                    "GL_ARB_shader_texture_lod", 
                    "GL_ARB_shading_language_100", 
                    "GL_ARB_shading_language_420pack", 
                    "GL_ARB_shading_language_include", 
                    "GL_ARB_shading_language_packing", "GL_ARB_shadow", 
                    "GL_ARB_sparse_buffer", "GL_ARB_sparse_texture", 
                    "GL_ARB_stencil_texturing", "GL_ARB_sync", 
                    "GL_ARB_tessellation_shader", "GL_ARB_texture_barrier", 
                    "GL_ARB_texture_border_clamp", 
                    "GL_ARB_texture_buffer_object", 
                    "GL_ARB_texture_buffer_object_rgb32", 
                    "GL_ARB_texture_buffer_range", 
                    "GL_ARB_texture_compression", 
                    "GL_ARB_texture_compression_bptc", 
                    "GL_ARB_texture_compression_rgtc", 
                    "GL_ARB_texture_cube_map", 
                    "GL_ARB_texture_cube_map_array", "GL_ARB_texture_env_add",
                     "GL_ARB_texture_env_combine", 
                    "GL_ARB_texture_env_crossbar", "GL_ARB_texture_env_dot3", 
                    "GL_ARB_texture_float", "GL_ARB_texture_gather", 
                    "GL_ARB_texture_mirror_clamp_to_edge", 
                    "GL_ARB_texture_mirrored_repeat", 
                    "GL_ARB_texture_multisample", 
                    "GL_ARB_texture_non_power_of_two", 
                    "GL_ARB_texture_query_levels", "GL_ARB_texture_query_lod",
                     "GL_ARB_texture_rectangle", "GL_ARB_texture_rg", 
                    "GL_ARB_texture_rgb10_a2ui", "GL_ARB_texture_stencil8", 
                    "GL_ARB_texture_storage", 
                    "GL_ARB_texture_storage_multisample", 
                    "GL_ARB_texture_swizzle", "GL_ARB_texture_view", 
                    "GL_ARB_timer_query", "GL_ARB_transform_feedback2", 
                    "GL_ARB_transform_feedback3", 
                    "GL_ARB_transform_feedback_instanced", 
                    "GL_ARB_transform_feedback_overflow_query", 
                    "GL_ARB_transpose_matrix", "GL_ARB_uniform_buffer_object",
                     "GL_ARB_vertex_array_bgra", "GL_ARB_vertex_array_object",
                     "GL_ARB_vertex_attrib_64bit", 
                    "GL_ARB_vertex_attrib_binding", 
                    "GL_ARB_vertex_buffer_object", "GL_ARB_vertex_program", 
                    "GL_ARB_vertex_shader", 
                    "GL_ARB_vertex_type_10f_11f_11f_rev", 
                    "GL_ARB_vertex_type_2_10_10_10_rev", 
                    "GL_ARB_viewport_array", "GL_ARB_window_pos", 
                    "GL_ATI_draw_buffers", "GL_ATI_texture_float", 
                    "GL_ATI_texture_mirror_once", "GL_S3_s3tc", 
                    "GL_EXT_texture_env_add", "GL_EXT_abgr", "GL_EXT_bgra", 
                    "GL_EXT_bindable_uniform", "GL_EXT_blend_color", 
                    "GL_EXT_blend_equation_separate", 
                    "GL_EXT_blend_func_separate", "GL_EXT_blend_minmax", 
                    "GL_EXT_blend_subtract", "GL_EXT_compiled_vertex_array", 
                    "GL_EXT_Cg_shader", "GL_EXT_depth_bounds_test", 
                    "GL_EXT_direct_state_access", "GL_EXT_draw_buffers2", 
                    "GL_EXT_draw_instanced", "GL_EXT_draw_range_elements", 
                    "GL_EXT_fog_coord", "GL_EXT_framebuffer_blit", 
                    "GL_EXT_framebuffer_multisample", 
                    "GL_EXTX_framebuffer_mixed_formats", 
                    "GL_EXT_framebuffer_multisample_blit_scaled", 
                    "GL_EXT_framebuffer_object", "GL_EXT_framebuffer_sRGB", 
                    "GL_EXT_geometry_shader4", 
                    "GL_EXT_gpu_program_parameters", "GL_EXT_gpu_shader4", 
                    "GL_EXT_multi_draw_arrays", "GL_EXT_packed_depth_stencil",
                     "GL_EXT_packed_float", "GL_EXT_packed_pixels", 
                    "GL_EXT_pixel_buffer_object", "GL_EXT_point_parameters", 
                    "GL_EXT_polygon_offset_clamp", "GL_EXT_provoking_vertex", 
                    "GL_EXT_rescale_normal", "GL_EXT_secondary_color", 
                    "GL_EXT_separate_shader_objects", 
                    "GL_EXT_separate_specular_color", 
                    "GL_EXT_shader_image_load_formatted", 
                    "GL_EXT_shader_image_load_store", 
                    "GL_EXT_shader_integer_mix", "GL_EXT_shadow_funcs", 
                    "GL_EXT_stencil_two_side", "GL_EXT_stencil_wrap", 
                    "GL_EXT_texture3D", "GL_EXT_texture_array", 
                    "GL_EXT_texture_buffer_object", 
                    "GL_EXT_texture_compression_dxt1", 
                    "GL_EXT_texture_compression_latc", 
                    "GL_EXT_texture_compression_rgtc", 
                    "GL_EXT_texture_compression_s3tc", 
                    "GL_EXT_texture_cube_map", "GL_EXT_texture_edge_clamp", 
                    "GL_EXT_texture_env_combine", "GL_EXT_texture_env_dot3", 
                    "GL_EXT_texture_filter_anisotropic", 
                    "GL_EXT_texture_integer", "GL_EXT_texture_lod", 
                    "GL_EXT_texture_lod_bias", "GL_EXT_texture_mirror_clamp", 
                    "GL_EXT_texture_object", "GL_EXT_texture_shared_exponent",
                     "GL_EXT_texture_sRGB", "GL_EXT_texture_sRGB_decode", 
                    "GL_EXT_texture_storage", "GL_EXT_texture_swizzle", 
                    "GL_EXT_timer_query", "GL_EXT_transform_feedback2", 
                    "GL_EXT_vertex_array", "GL_EXT_vertex_array_bgra", 
                    "GL_EXT_vertex_attrib_64bit", "GL_EXT_import_sync_object",
                     "GL_IBM_rasterpos_clip", 
                    "GL_IBM_texture_mirrored_repeat", 
                    "GL_KHR_context_flush_control", "GL_KHR_debug", 
                    "GL_KHR_robust_buffer_access_behavior", 
                    "GL_KHR_robustness", "GL_KTX_buffer_region", 
                    "GL_NV_bindless_multi_draw_indirect", 
                    "GL_NV_bindless_multi_draw_indirect_count", 
                    "GL_NV_bindless_texture", "GL_NV_blend_equation_advanced",
                     "GL_NV_blend_equation_advanced_coherent", 
                    "GL_NV_blend_square", "GL_NV_command_list", 
                    "GL_NV_compute_program5", "GL_NV_conditional_render", 
                    "GL_NV_copy_depth_to_color", "GL_NV_copy_image", 
                    "GL_NV_depth_buffer_float", "GL_NV_depth_clamp", 
                    "GL_NV_draw_texture", "GL_NV_ES1_1_compatibility", 
                    "GL_NV_ES3_1_compatibility", "GL_NV_explicit_multisample",
                     "GL_NV_fence", "GL_NV_float_buffer", 
                    "GL_NV_fog_distance", "GL_NV_fragment_program", 
                    "GL_NV_fragment_program_option", 
                    "GL_NV_fragment_program2", 
                    "GL_NV_framebuffer_multisample_coverage", 
                    "GL_NV_geometry_shader4", "GL_NV_gpu_program4", 
                    "GL_NV_gpu_program4_1", "GL_NV_gpu_program5", 
                    "GL_NV_gpu_program5_mem_extended", 
                    "GL_NV_gpu_program_fp64", "GL_NV_gpu_shader5", 
                    "GL_NV_half_float", "GL_NV_light_max_exponent", 
                    "GL_NV_multisample_coverage", 
                    "GL_NV_multisample_filter_hint", "GL_NV_occlusion_query", 
                    "GL_NV_packed_depth_stencil", 
                    "GL_NV_parameter_buffer_object", 
                    "GL_NV_parameter_buffer_object2", "GL_NV_path_rendering", 
                    "GL_NV_pixel_data_range", "GL_NV_point_sprite", 
                    "GL_NV_primitive_restart", "GL_NV_register_combiners", 
                    "GL_NV_register_combiners2", 
                    "GL_NV_shader_atomic_counters", 
                    "GL_NV_shader_atomic_float", "GL_NV_shader_atomic_int64", 
                    "GL_NV_shader_buffer_load", 
                    "GL_NV_shader_storage_buffer_object", 
                    "GL_NV_texgen_reflection", "GL_NV_texture_barrier", 
                    "GL_NV_texture_compression_vtc", 
                    "GL_NV_texture_env_combine4", "GL_NV_texture_multisample",
                     "GL_NV_texture_rectangle", "GL_NV_texture_shader", 
                    "GL_NV_texture_shader2", "GL_NV_texture_shader3", 
                    "GL_NV_transform_feedback", "GL_NV_transform_feedback2", 
                    "GL_NV_uniform_buffer_unified_memory", 
                    "GL_NV_vertex_array_range", "GL_NV_vertex_array_range2", 
                    "GL_NV_vertex_attrib_integer_64bit", 
                    "GL_NV_vertex_buffer_unified_memory", 
                    "GL_NV_vertex_program", "GL_NV_vertex_program1_1", 
                    "GL_NV_vertex_program2", "GL_NV_vertex_program2_option", 
                    "GL_NV_vertex_program3", "GL_NVX_conditional_render", 
                    "GL_NVX_gpu_memory_info", "GL_NVX_nvenc_interop", 
                    "GL_NV_shader_thread_group", 
                    "GL_NV_shader_thread_shuffle", 
                    "GL_KHR_blend_equation_advanced", 
                    "GL_KHR_blend_equation_advanced_coherent", 
                    "GL_SGIS_generate_mipmap", "GL_SGIS_texture_lod", 
                    "GL_SGIX_depth_texture", "GL_SGIX_shadow", 
                    "GL_SUN_slice_accum", "GL_WIN_swap_hint", 
                    "WGL_EXT_swap_control"}, "Optimized 3D Transparency" -> 
                    True, "Max Samples" -> 32}, 
                   "OffScreen" -> {
                    "Vendor" -> "NVIDIA Corporation", "Renderer" -> 
                    "GeForce GTX 745/PCIe/SSE2", "Version" -> 
                    "4.5.0 NVIDIA 353.82", 
                    "Extensions" -> {
                    "GL_AMD_multi_draw_indirect", 
                    "GL_AMD_seamless_cubemap_per_texture", 
                    "GL_ARB_arrays_of_arrays", "GL_ARB_base_instance", 
                    "GL_ARB_bindless_texture", "GL_ARB_blend_func_extended", 
                    "GL_ARB_buffer_storage", "GL_ARB_clear_buffer_object", 
                    "GL_ARB_clear_texture", "GL_ARB_clip_control", 
                    "GL_ARB_color_buffer_float", "GL_ARB_compatibility", 
                    "GL_ARB_compressed_texture_pixel_storage", 
                    "GL_ARB_conservative_depth", "GL_ARB_compute_shader", 
                    "GL_ARB_compute_variable_group_size", 
                    "GL_ARB_conditional_render_inverted", 
                    "GL_ARB_copy_buffer", "GL_ARB_copy_image", 
                    "GL_ARB_cull_distance", "GL_ARB_debug_output", 
                    "GL_ARB_depth_buffer_float", "GL_ARB_depth_clamp", 
                    "GL_ARB_depth_texture", "GL_ARB_derivative_control", 
                    "GL_ARB_direct_state_access", "GL_ARB_draw_buffers", 
                    "GL_ARB_draw_buffers_blend", "GL_ARB_draw_indirect", 
                    "GL_ARB_draw_elements_base_vertex", 
                    "GL_ARB_draw_instanced", "GL_ARB_enhanced_layouts", 
                    "GL_ARB_ES2_compatibility", "GL_ARB_ES3_compatibility", 
                    "GL_ARB_ES3_1_compatibility", 
                    "GL_ARB_explicit_attrib_location", 
                    "GL_ARB_explicit_uniform_location", 
                    "GL_ARB_fragment_coord_conventions", 
                    "GL_ARB_fragment_layer_viewport", 
                    "GL_ARB_fragment_program", 
                    "GL_ARB_fragment_program_shadow", 
                    "GL_ARB_fragment_shader", 
                    "GL_ARB_framebuffer_no_attachments", 
                    "GL_ARB_framebuffer_object", "GL_ARB_framebuffer_sRGB", 
                    "GL_ARB_geometry_shader4", "GL_ARB_get_program_binary", 
                    "GL_ARB_get_texture_sub_image", "GL_ARB_gpu_shader5", 
                    "GL_ARB_gpu_shader_fp64", "GL_ARB_half_float_pixel", 
                    "GL_ARB_half_float_vertex", "GL_ARB_imaging", 
                    "GL_ARB_indirect_parameters", "GL_ARB_instanced_arrays", 
                    "GL_ARB_internalformat_query", 
                    "GL_ARB_internalformat_query2", 
                    "GL_NV_internalformat_sample_query", 
                    "GL_ARB_invalidate_subdata", 
                    "GL_ARB_map_buffer_alignment", "GL_ARB_map_buffer_range", 
                    "GL_ARB_multi_bind", "GL_ARB_multi_draw_indirect", 
                    "GL_ARB_multisample", "GL_ARB_multitexture", 
                    "GL_ARB_occlusion_query", "GL_ARB_occlusion_query2", 
                    "GL_ARB_pipeline_statistics_query", 
                    "GL_ARB_pixel_buffer_object", "GL_ARB_point_parameters", 
                    "GL_ARB_point_sprite", "GL_ARB_program_interface_query", 
                    "GL_ARB_provoking_vertex", 
                    "GL_ARB_robust_buffer_access_behavior", 
                    "GL_ARB_robustness", "GL_ARB_sample_shading", 
                    "GL_ARB_sampler_objects", "GL_ARB_seamless_cube_map", 
                    "GL_ARB_seamless_cubemap_per_texture", 
                    "GL_ARB_separate_shader_objects", 
                    "GL_ARB_shader_atomic_counters", 
                    "GL_ARB_shader_bit_encoding", 
                    "GL_ARB_shader_draw_parameters", 
                    "GL_ARB_shader_group_vote", 
                    "GL_ARB_shader_image_load_store", 
                    "GL_ARB_shader_image_size", "GL_ARB_shader_objects", 
                    "GL_ARB_shader_precision", "GL_ARB_query_buffer_object", 
                    "GL_ARB_shader_storage_buffer_object", 
                    "GL_ARB_shader_subroutine", 
                    "GL_ARB_shader_texture_image_samples", 
                    "GL_ARB_shader_texture_lod", 
                    "GL_ARB_shading_language_100", 
                    "GL_ARB_shading_language_420pack", 
                    "GL_ARB_shading_language_include", 
                    "GL_ARB_shading_language_packing", "GL_ARB_shadow", 
                    "GL_ARB_sparse_buffer", "GL_ARB_sparse_texture", 
                    "GL_ARB_stencil_texturing", "GL_ARB_sync", 
                    "GL_ARB_tessellation_shader", "GL_ARB_texture_barrier", 
                    "GL_ARB_texture_border_clamp", 
                    "GL_ARB_texture_buffer_object", 
                    "GL_ARB_texture_buffer_object_rgb32", 
                    "GL_ARB_texture_buffer_range", 
                    "GL_ARB_texture_compression", 
                    "GL_ARB_texture_compression_bptc", 
                    "GL_ARB_texture_compression_rgtc", 
                    "GL_ARB_texture_cube_map", 
                    "GL_ARB_texture_cube_map_array", "GL_ARB_texture_env_add",
                     "GL_ARB_texture_env_combine", 
                    "GL_ARB_texture_env_crossbar", "GL_ARB_texture_env_dot3", 
                    "GL_ARB_texture_float", "GL_ARB_texture_gather", 
                    "GL_ARB_texture_mirror_clamp_to_edge", 
                    "GL_ARB_texture_mirrored_repeat", 
                    "GL_ARB_texture_multisample", 
                    "GL_ARB_texture_non_power_of_two", 
                    "GL_ARB_texture_query_levels", "GL_ARB_texture_query_lod",
                     "GL_ARB_texture_rectangle", "GL_ARB_texture_rg", 
                    "GL_ARB_texture_rgb10_a2ui", "GL_ARB_texture_stencil8", 
                    "GL_ARB_texture_storage", 
                    "GL_ARB_texture_storage_multisample", 
                    "GL_ARB_texture_swizzle", "GL_ARB_texture_view", 
                    "GL_ARB_timer_query", "GL_ARB_transform_feedback2", 
                    "GL_ARB_transform_feedback3", 
                    "GL_ARB_transform_feedback_instanced", 
                    "GL_ARB_transform_feedback_overflow_query", 
                    "GL_ARB_transpose_matrix", "GL_ARB_uniform_buffer_object",
                     "GL_ARB_vertex_array_bgra", "GL_ARB_vertex_array_object",
                     "GL_ARB_vertex_attrib_64bit", 
                    "GL_ARB_vertex_attrib_binding", 
                    "GL_ARB_vertex_buffer_object", "GL_ARB_vertex_program", 
                    "GL_ARB_vertex_shader", 
                    "GL_ARB_vertex_type_10f_11f_11f_rev", 
                    "GL_ARB_vertex_type_2_10_10_10_rev", 
                    "GL_ARB_viewport_array", "GL_ARB_window_pos", 
                    "GL_ATI_draw_buffers", "GL_ATI_texture_float", 
                    "GL_ATI_texture_mirror_once", "GL_S3_s3tc", 
                    "GL_EXT_texture_env_add", "GL_EXT_abgr", "GL_EXT_bgra", 
                    "GL_EXT_bindable_uniform", "GL_EXT_blend_color", 
                    "GL_EXT_blend_equation_separate", 
                    "GL_EXT_blend_func_separate", "GL_EXT_blend_minmax", 
                    "GL_EXT_blend_subtract", "GL_EXT_compiled_vertex_array", 
                    "GL_EXT_Cg_shader", "GL_EXT_depth_bounds_test", 
                    "GL_EXT_direct_state_access", "GL_EXT_draw_buffers2", 
                    "GL_EXT_draw_instanced", "GL_EXT_draw_range_elements", 
                    "GL_EXT_fog_coord", "GL_EXT_framebuffer_blit", 
                    "GL_EXT_framebuffer_multisample", 
                    "GL_EXTX_framebuffer_mixed_formats", 
                    "GL_EXT_framebuffer_multisample_blit_scaled", 
                    "GL_EXT_framebuffer_object", "GL_EXT_framebuffer_sRGB", 
                    "GL_EXT_geometry_shader4", 
                    "GL_EXT_gpu_program_parameters", "GL_EXT_gpu_shader4", 
                    "GL_EXT_multi_draw_arrays", "GL_EXT_packed_depth_stencil",
                     "GL_EXT_packed_float", "GL_EXT_packed_pixels", 
                    "GL_EXT_pixel_buffer_object", "GL_EXT_point_parameters", 
                    "GL_EXT_polygon_offset_clamp", "GL_EXT_provoking_vertex", 
                    "GL_EXT_rescale_normal", "GL_EXT_secondary_color", 
                    "GL_EXT_separate_shader_objects", 
                    "GL_EXT_separate_specular_color", 
                    "GL_EXT_shader_image_load_formatted", 
                    "GL_EXT_shader_image_load_store", 
                    "GL_EXT_shader_integer_mix", "GL_EXT_shadow_funcs", 
                    "GL_EXT_stencil_two_side", "GL_EXT_stencil_wrap", 
                    "GL_EXT_texture3D", "GL_EXT_texture_array", 
                    "GL_EXT_texture_buffer_object", 
                    "GL_EXT_texture_compression_dxt1", 
                    "GL_EXT_texture_compression_latc", 
                    "GL_EXT_texture_compression_rgtc", 
                    "GL_EXT_texture_compression_s3tc", 
                    "GL_EXT_texture_cube_map", "GL_EXT_texture_edge_clamp", 
                    "GL_EXT_texture_env_combine", "GL_EXT_texture_env_dot3", 
                    "GL_EXT_texture_filter_anisotropic", 
                    "GL_EXT_texture_integer", "GL_EXT_texture_lod", 
                    "GL_EXT_texture_lod_bias", "GL_EXT_texture_mirror_clamp", 
                    "GL_EXT_texture_object", "GL_EXT_texture_shared_exponent",
                     "GL_EXT_texture_sRGB", "GL_EXT_texture_sRGB_decode", 
                    "GL_EXT_texture_storage", "GL_EXT_texture_swizzle", 
                    "GL_EXT_timer_query", "GL_EXT_transform_feedback2", 
                    "GL_EXT_vertex_array", "GL_EXT_vertex_array_bgra", 
                    "GL_EXT_vertex_attrib_64bit", "GL_EXT_import_sync_object",
                     "GL_IBM_rasterpos_clip", 
                    "GL_IBM_texture_mirrored_repeat", 
                    "GL_KHR_context_flush_control", "GL_KHR_debug", 
                    "GL_KHR_robust_buffer_access_behavior", 
                    "GL_KHR_robustness", "GL_KTX_buffer_region", 
                    "GL_NV_bindless_multi_draw_indirect", 
                    "GL_NV_bindless_multi_draw_indirect_count", 
                    "GL_NV_bindless_texture", "GL_NV_blend_equation_advanced",
                     "GL_NV_blend_equation_advanced_coherent", 
                    "GL_NV_blend_square", "GL_NV_command_list", 
                    "GL_NV_compute_program5", "GL_NV_conditional_render", 
                    "GL_NV_copy_depth_to_color", "GL_NV_copy_image", 
                    "GL_NV_depth_buffer_float", "GL_NV_depth_clamp", 
                    "GL_NV_draw_texture", "GL_NV_ES1_1_compatibility", 
                    "GL_NV_ES3_1_compatibility", "GL_NV_explicit_multisample",
                     "GL_NV_fence", "GL_NV_float_buffer", 
                    "GL_NV_fog_distance", "GL_NV_fragment_program", 
                    "GL_NV_fragment_program_option", 
                    "GL_NV_fragment_program2", 
                    "GL_NV_framebuffer_multisample_coverage", 
                    "GL_NV_geometry_shader4", "GL_NV_gpu_program4", 
                    "GL_NV_gpu_program4_1", "GL_NV_gpu_program5", 
                    "GL_NV_gpu_program5_mem_extended", 
                    "GL_NV_gpu_program_fp64", "GL_NV_gpu_shader5", 
                    "GL_NV_half_float", "GL_NV_light_max_exponent", 
                    "GL_NV_multisample_coverage", 
                    "GL_NV_multisample_filter_hint", "GL_NV_occlusion_query", 
                    "GL_NV_packed_depth_stencil", 
                    "GL_NV_parameter_buffer_object", 
                    "GL_NV_parameter_buffer_object2", "GL_NV_path_rendering", 
                    "GL_NV_pixel_data_range", "GL_NV_point_sprite", 
                    "GL_NV_primitive_restart", "GL_NV_register_combiners", 
                    "GL_NV_register_combiners2", 
                    "GL_NV_shader_atomic_counters", 
                    "GL_NV_shader_atomic_float", "GL_NV_shader_atomic_int64", 
                    "GL_NV_shader_buffer_load", 
                    "GL_NV_shader_storage_buffer_object", 
                    "GL_NV_texgen_reflection", "GL_NV_texture_barrier", 
                    "GL_NV_texture_compression_vtc", 
                    "GL_NV_texture_env_combine4", "GL_NV_texture_multisample",
                     "GL_NV_texture_rectangle", "GL_NV_texture_shader", 
                    "GL_NV_texture_shader2", "GL_NV_texture_shader3", 
                    "GL_NV_transform_feedback", "GL_NV_transform_feedback2", 
                    "GL_NV_uniform_buffer_unified_memory", 
                    "GL_NV_vertex_array_range", "GL_NV_vertex_array_range2", 
                    "GL_NV_vertex_attrib_integer_64bit", 
                    "GL_NV_vertex_buffer_unified_memory", 
                    "GL_NV_vertex_program", "GL_NV_vertex_program1_1", 
                    "GL_NV_vertex_program2", "GL_NV_vertex_program2_option", 
                    "GL_NV_vertex_program3", "GL_NVX_conditional_render", 
                    "GL_NVX_gpu_memory_info", "GL_NVX_nvenc_interop", 
                    "GL_NV_shader_thread_group", 
                    "GL_NV_shader_thread_shuffle", 
                    "GL_KHR_blend_equation_advanced", 
                    "GL_KHR_blend_equation_advanced_coherent", 
                    "GL_SGIS_generate_mipmap", "GL_SGIS_texture_lod", 
                    "GL_SGIX_depth_texture", "GL_SGIX_shadow", 
                    "GL_SUN_slice_accum", "GL_WIN_swap_hint", 
                    "WGL_EXT_swap_control"}, "Optimized 3D Transparency" -> 
                    True, "Max Samples" -> 32}}, 
                 "Mesa" -> {
                  "Vendor" -> "VMware, Inc.", "Renderer" -> 
                   "Gallium 0.4 on llvmpipe (LLVM 3.6, 256 bits)", "Version" -> 
                   "3.0 Mesa 10.6.8 (git-fbfd450)", 
                   "Extensions" -> {
                    "GL_ARB_multisample", "GL_EXT_abgr", "GL_EXT_bgra", 
                    "GL_EXT_blend_color", "GL_EXT_blend_minmax", 
                    "GL_EXT_blend_subtract", "GL_EXT_copy_texture", 
                    "GL_EXT_polygon_offset", "GL_EXT_subtexture", 
                    "GL_EXT_texture_object", "GL_EXT_vertex_array", 
                    "GL_EXT_compiled_vertex_array", "GL_EXT_texture", 
                    "GL_EXT_texture3D", "GL_IBM_rasterpos_clip", 
                    "GL_ARB_point_parameters", "GL_EXT_draw_range_elements", 
                    "GL_EXT_packed_pixels", "GL_EXT_point_parameters", 
                    "GL_EXT_rescale_normal", "GL_EXT_separate_specular_color",
                     "GL_EXT_texture_edge_clamp", "GL_SGIS_generate_mipmap", 
                    "GL_SGIS_texture_border_clamp", 
                    "GL_SGIS_texture_edge_clamp", "GL_SGIS_texture_lod", 
                    "GL_ARB_framebuffer_sRGB", "GL_ARB_multitexture", 
                    "GL_EXT_framebuffer_sRGB", "GL_IBM_multimode_draw_arrays",
                     "GL_IBM_texture_mirrored_repeat", 
                    "GL_ARB_texture_cube_map", "GL_ARB_texture_env_add", 
                    "GL_ARB_transpose_matrix", "GL_EXT_blend_func_separate", 
                    "GL_EXT_fog_coord", "GL_EXT_multi_draw_arrays", 
                    "GL_EXT_secondary_color", "GL_EXT_texture_env_add", 
                    "GL_EXT_texture_lod_bias", "GL_INGR_blend_func_separate", 
                    "GL_NV_blend_square", "GL_NV_light_max_exponent", 
                    "GL_NV_texgen_reflection", "GL_NV_texture_env_combine4", 
                    "GL_SUN_multi_draw_arrays", "GL_ARB_texture_border_clamp",
                     "GL_ARB_texture_compression", 
                    "GL_EXT_framebuffer_object", "GL_EXT_texture_env_combine",
                     "GL_EXT_texture_env_dot3", "GL_MESA_window_pos", 
                    "GL_NV_packed_depth_stencil", "GL_NV_texture_rectangle", 
                    "GL_ARB_depth_texture", "GL_ARB_occlusion_query", 
                    "GL_ARB_shadow", "GL_ARB_texture_env_combine", 
                    "GL_ARB_texture_env_crossbar", "GL_ARB_texture_env_dot3", 
                    "GL_ARB_texture_mirrored_repeat", "GL_ARB_window_pos", 
                    "GL_EXT_stencil_two_side", "GL_EXT_texture_cube_map", 
                    "GL_NV_depth_clamp", "GL_NV_fog_distance", 
                    "GL_APPLE_packed_pixels", "GL_APPLE_vertex_array_object", 
                    "GL_ARB_draw_buffers", "GL_ARB_fragment_program", 
                    "GL_ARB_fragment_shader", "GL_ARB_shader_objects", 
                    "GL_ARB_vertex_program", "GL_ARB_vertex_shader", 
                    "GL_ATI_draw_buffers", "GL_ATI_texture_env_combine3", 
                    "GL_ATI_texture_float", "GL_EXT_shadow_funcs", 
                    "GL_EXT_stencil_wrap", "GL_MESA_pack_invert", 
                    "GL_MESA_ycbcr_texture", "GL_NV_primitive_restart", 
                    "GL_ARB_depth_clamp", "GL_ARB_fragment_program_shadow", 
                    "GL_ARB_half_float_pixel", "GL_ARB_occlusion_query2", 
                    "GL_ARB_point_sprite", "GL_ARB_shading_language_100", 
                    "GL_ARB_sync", "GL_ARB_texture_non_power_of_two", 
                    "GL_ARB_vertex_buffer_object", 
                    "GL_ATI_blend_equation_separate", 
                    "GL_EXT_blend_equation_separate", "GL_OES_read_format", 
                    "GL_ARB_color_buffer_float", "GL_ARB_pixel_buffer_object",
                     "GL_ARB_texture_compression_rgtc", 
                    "GL_ARB_texture_float", "GL_ARB_texture_rectangle", 
                    "GL_ATI_texture_compression_3dc", "GL_EXT_packed_float", 
                    "GL_EXT_pixel_buffer_object", 
                    "GL_EXT_texture_compression_rgtc", 
                    "GL_EXT_texture_mirror_clamp", "GL_EXT_texture_rectangle",
                     "GL_EXT_texture_sRGB", "GL_EXT_texture_shared_exponent", 
                    "GL_ARB_framebuffer_object", "GL_EXT_framebuffer_blit", 
                    "GL_EXT_framebuffer_multisample", 
                    "GL_EXT_packed_depth_stencil", 
                    "GL_ARB_vertex_array_object", "GL_ATI_separate_stencil", 
                    "GL_ATI_texture_mirror_once", "GL_EXT_draw_buffers2", 
                    "GL_EXT_draw_instanced", "GL_EXT_gpu_program_parameters", 
                    "GL_EXT_texture_array", "GL_EXT_texture_compression_latc",
                     "GL_EXT_texture_integer", "GL_EXT_texture_sRGB_decode", 
                    "GL_EXT_timer_query", "GL_OES_EGL_image", 
                    "GL_ARB_copy_buffer", "GL_ARB_depth_buffer_float", 
                    "GL_ARB_draw_instanced", "GL_ARB_half_float_vertex", 
                    "GL_ARB_instanced_arrays", "GL_ARB_map_buffer_range", 
                    "GL_ARB_texture_rg", "GL_ARB_texture_swizzle", 
                    "GL_ARB_vertex_array_bgra", "GL_EXT_texture_swizzle", 
                    "GL_EXT_vertex_array_bgra", "GL_NV_conditional_render", 
                    "GL_AMD_conservative_depth", "GL_AMD_draw_buffers_blend", 
                    "GL_AMD_seamless_cubemap_per_texture", 
                    "GL_ARB_ES2_compatibility", "GL_ARB_blend_func_extended", 
                    "GL_ARB_debug_output", "GL_ARB_draw_buffers_blend", 
                    "GL_ARB_draw_elements_base_vertex", 
                    "GL_ARB_explicit_attrib_location", 
                    "GL_ARB_fragment_coord_conventions", 
                    "GL_ARB_provoking_vertex", "GL_ARB_sampler_objects", 
                    "GL_ARB_seamless_cube_map", "GL_ARB_shader_texture_lod", 
                    "GL_ARB_texture_cube_map_array", "GL_ARB_texture_gather", 
                    "GL_ARB_texture_multisample", "GL_ARB_texture_rgb10_a2ui",
                     "GL_ARB_uniform_buffer_object", 
                    "GL_ARB_vertex_type_2_10_10_10_rev", 
                    "GL_EXT_provoking_vertex", "GL_EXT_texture_snorm", 
                    "GL_MESA_texture_signed_rgba", 
                    "GL_ARB_get_program_binary", "GL_ARB_robustness", 
                    "GL_ARB_separate_shader_objects", 
                    "GL_ARB_shader_bit_encoding", "GL_ARB_timer_query", 
                    "GL_ARB_transform_feedback2", 
                    "GL_ARB_transform_feedback3", "GL_ARB_base_instance", 
                    "GL_ARB_compressed_texture_pixel_storage", 
                    "GL_ARB_conservative_depth", 
                    "GL_ARB_internalformat_query", 
                    "GL_ARB_map_buffer_alignment", 
                    "GL_ARB_shading_language_420pack", 
                    "GL_ARB_shading_language_packing", 
                    "GL_ARB_texture_storage", 
                    "GL_ARB_transform_feedback_instanced", 
                    "GL_EXT_framebuffer_multisample_blit_scaled", 
                    "GL_EXT_transform_feedback", 
                    "GL_AMD_shader_trinary_minmax", 
                    "GL_ARB_ES3_compatibility", "GL_ARB_clear_buffer_object", 
                    "GL_ARB_explicit_uniform_location", 
                    "GL_ARB_invalidate_subdata", 
                    "GL_ARB_program_interface_query", 
                    "GL_ARB_stencil_texturing", "GL_ARB_texture_query_levels",
                     "GL_ARB_texture_storage_multisample", 
                    "GL_ARB_texture_view", "GL_ARB_vertex_attrib_binding", 
                    "GL_KHR_debug", "GL_ARB_buffer_storage", 
                    "GL_ARB_multi_bind", 
                    "GL_ARB_seamless_cubemap_per_texture", 
                    "GL_ARB_texture_mirror_clamp_to_edge", 
                    "GL_ARB_texture_stencil8", 
                    "GL_ARB_vertex_type_10f_11f_11f_rev", 
                    "GL_EXT_shader_integer_mix", "GL_ARB_clip_control", 
                    "GL_ARB_conditional_render_inverted", 
                    "GL_EXT_polygon_offset_clamp", 
                    "GL_KHR_context_flush_control"}, 
                   "Optimized 3D Transparency" -> True, "Max Samples" -> 0}}, 
               "ControllerDevices" -> {
                "USB Receiver" -> {{}, {
                   "SystemSleep Button" -> False, "SystemPowerDown Button" -> 
                    False, "SystemWakeUp Button" -> False}, {
                   "Manufacturer ID" -> 1133, "Product Name" -> 
                    "USB Receiver", "Product ID" -> 50475, "Controller Type" -> 
                    "External Controller", "Device Type" -> 
                    "Windows DirectInput Device", "HID Usage Page" -> 
                    "GenericDesktop", "HID Usage" -> "SystemControl"}, {
                   "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> 
                    "Button 11", "JB1" -> "Button 11", "JB2" -> "Button 12", 
                    "JB3" -> None, "TLB" -> "Button 5", "TRB" -> "Button 6", 
                    "BLB" -> "Button 7", "BRB" -> "Button 8", "X" -> "X Axis",
                     "Y" -> -"Y Axis", "Z" -> "Z Axis", "X1" -> "X Axis", 
                    "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> "Z Rotation",
                     "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
                    "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> 
                    None, "X4" -> 
                    Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y4" -> 
                    Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X5" -> 
                    Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y5" -> 
                    Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X6" -> 
                    Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "B1" -> "Button 1", "B2" -> "Button 2", "B3" -> 
                    "Button 3", "B4" -> "Button 4", "B5" -> "Button 5", "B6" -> 
                    "Button 6", "B7" -> "Button 7", "B8" -> "Button 8", "B9" -> 
                    "Button 9", "B10" -> "Button 10", "B11" -> "Button 11", 
                    "B12" -> "Button 12", "DefaultAbsolute" -> False}}, 
                 "USB Receiver" -> {{}, {}, {
                   "Manufacturer ID" -> 1133, "Product Name" -> 
                    "USB Receiver", "Product ID" -> 50475, "Controller Type" -> 
                    "External Controller", "Device Type" -> 
                    "Windows DirectInput Device", "HID Usage Page" -> 
                    "Unknown:65468", "HID Usage" -> "Unknown:65468:136"}, {
                   "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> 
                    "Button 11", "JB1" -> "Button 11", "JB2" -> "Button 12", 
                    "JB3" -> None, "TLB" -> "Button 5", "TRB" -> "Button 6", 
                    "BLB" -> "Button 7", "BRB" -> "Button 8", "X" -> "X Axis",
                     "Y" -> -"Y Axis", "Z" -> "Z Axis", "X1" -> "X Axis", 
                    "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> "Z Rotation",
                     "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
                    "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> 
                    None, "X4" -> 
                    Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y4" -> 
                    Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X5" -> 
                    Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y5" -> 
                    Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X6" -> 
                    Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "B1" -> "Button 1", "B2" -> "Button 2", "B3" -> 
                    "Button 3", "B4" -> "Button 4", "B5" -> "Button 5", "B6" -> 
                    "Button 6", "B7" -> "Button 7", "B8" -> "Button 8", "B9" -> 
                    "Button 9", "B10" -> "Button 10", "B11" -> "Button 11", 
                    "B12" -> "Button 12", "DefaultAbsolute" -> False}}, 
                 "USB Receiver" -> {{}, {}, {
                   "Manufacturer ID" -> 1133, "Product Name" -> 
                    "USB Receiver", "Product ID" -> 50475, "Controller Type" -> 
                    "External Controller", "Device Type" -> 
                    "Windows DirectInput Device", "HID Usage Page" -> 
                    "Unknown:65280", "HID Usage" -> "Unknown:65280:1"}, {
                   "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> 
                    "Button 11", "JB1" -> "Button 11", "JB2" -> "Button 12", 
                    "JB3" -> None, "TLB" -> "Button 5", "TRB" -> "Button 6", 
                    "BLB" -> "Button 7", "BRB" -> "Button 8", "X" -> "X Axis",
                     "Y" -> -"Y Axis", "Z" -> "Z Axis", "X1" -> "X Axis", 
                    "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> "Z Rotation",
                     "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
                    "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> 
                    None, "X4" -> 
                    Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y4" -> 
                    Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X5" -> 
                    Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y5" -> 
                    Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X6" -> 
                    Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "B1" -> "Button 1", "B2" -> "Button 2", "B3" -> 
                    "Button 3", "B4" -> "Button 4", "B5" -> "Button 5", "B6" -> 
                    "Button 6", "B7" -> "Button 7", "B8" -> "Button 8", "B9" -> 
                    "Button 9", "B10" -> "Button 10", "B11" -> "Button 11", 
                    "B12" -> "Button 12", "DefaultAbsolute" -> False}}, 
                 "USB Receiver" -> {{}, {}, {
                   "Manufacturer ID" -> 1133, "Product Name" -> 
                    "USB Receiver", "Product ID" -> 50475, "Controller Type" -> 
                    "External Controller", "Device Type" -> 
                    "Windows DirectInput Device", "HID Usage Page" -> 
                    "Unknown:65280", "HID Usage" -> "Unknown:65280:2"}, {
                   "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> 
                    "Button 11", "JB1" -> "Button 11", "JB2" -> "Button 12", 
                    "JB3" -> None, "TLB" -> "Button 5", "TRB" -> "Button 6", 
                    "BLB" -> "Button 7", "BRB" -> "Button 8", "X" -> "X Axis",
                     "Y" -> -"Y Axis", "Z" -> "Z Axis", "X1" -> "X Axis", 
                    "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> "Z Rotation",
                     "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
                    "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> 
                    None, "X4" -> 
                    Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y4" -> 
                    Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X5" -> 
                    Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y5" -> 
                    Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X6" -> 
                    Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "B1" -> "Button 1", "B2" -> "Button 2", "B3" -> 
                    "Button 3", "B4" -> "Button 4", "B5" -> "Button 5", "B6" -> 
                    "Button 6", "B7" -> "Button 7", "B8" -> "Button 8", "B9" -> 
                    "Button 9", "B10" -> "Button 10", "B11" -> "Button 11", 
                    "B12" -> "Button 12", "DefaultAbsolute" -> False}}, 
                 "USB Receiver" -> {{}, {}, {
                   "Manufacturer ID" -> 1133, "Product Name" -> 
                    "USB Receiver", "Product ID" -> 50475, "Controller Type" -> 
                    "External Controller", "Device Type" -> 
                    "Windows DirectInput Device", "HID Usage Page" -> 
                    "Unknown:65280", "HID Usage" -> "Unknown:65280:4"}, {
                   "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> 
                    "Button 11", "JB1" -> "Button 11", "JB2" -> "Button 12", 
                    "JB3" -> None, "TLB" -> "Button 5", "TRB" -> "Button 6", 
                    "BLB" -> "Button 7", "BRB" -> "Button 8", "X" -> "X Axis",
                     "Y" -> -"Y Axis", "Z" -> "Z Axis", "X1" -> "X Axis", 
                    "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> "Z Rotation",
                     "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
                    "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> 
                    None, "X4" -> 
                    Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y4" -> 
                    Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X5" -> 
                    Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y5" -> 
                    Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X6" -> 
                    Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "B1" -> "Button 1", "B2" -> "Button 2", "B3" -> 
                    "Button 3", "B4" -> "Button 4", "B5" -> "Button 5", "B6" -> 
                    "Button 6", "B7" -> "Button 7", "B8" -> "Button 8", "B9" -> 
                    "Button 9", "B10" -> "Button 10", "B11" -> "Button 11", 
                    "B12" -> "Button 12", "DefaultAbsolute" -> False}}, 
                 "Yubikey 4 OTP+U2F+CCID" -> {{}, {}, {
                   "Manufacturer ID" -> 4176, "Product Name" -> 
                    "Yubikey 4 OTP+U2F+CCID", "Product ID" -> 1031, 
                    "Controller Type" -> "External Controller", "Device Type" -> 
                    "Windows DirectInput Device", "HID Usage Page" -> 
                    "Unknown:61904", "HID Usage" -> "Unknown:61904:1"}, {
                   "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> 
                    "Button 11", "JB1" -> "Button 11", "JB2" -> "Button 12", 
                    "JB3" -> None, "TLB" -> "Button 5", "TRB" -> "Button 6", 
                    "BLB" -> "Button 7", "BRB" -> "Button 8", "X" -> "X Axis",
                     "Y" -> -"Y Axis", "Z" -> "Z Axis", "X1" -> "X Axis", 
                    "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> "Z Rotation",
                     "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
                    "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> 
                    None, "X4" -> 
                    Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y4" -> 
                    Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X5" -> 
                    Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y5" -> 
                    Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X6" -> 
                    Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "B1" -> "Button 1", "B2" -> "Button 2", "B3" -> 
                    "Button 3", "B4" -> "Button 4", "B5" -> "Button 5", "B6" -> 
                    "Button 6", "B7" -> "Button 7", "B8" -> "Button 8", "B9" -> 
                    "Button 9", "B10" -> "Button 10", "B11" -> "Button 11", 
                    "B12" -> "Button 12", "DefaultAbsolute" -> False}}, 
                 "Dell USB Keyboard" -> {{
                   "Unknown Axis" -> 2.3283064365386963`*^-10}, {
                   "Mute Button" -> False}, {
                   "Manufacturer ID" -> 16700, "Product Name" -> 
                    "Dell USB Keyboard", "Product ID" -> 8208, 
                    "Controller Type" -> "External Controller", "Device Type" -> 
                    "Windows DirectInput Device", "HID Usage Page" -> 
                    "Consumer", "HID Usage" -> "ConsumerControl"}, {
                   "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> 
                    "Button 11", "JB1" -> "Button 11", "JB2" -> "Button 12", 
                    "JB3" -> None, "TLB" -> "Button 5", "TRB" -> "Button 6", 
                    "BLB" -> "Button 7", "BRB" -> "Button 8", "X" -> "X Axis",
                     "Y" -> -"Y Axis", "Z" -> "Z Axis", "X1" -> "X Axis", 
                    "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> "Z Rotation",
                     "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
                    "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> 
                    None, "X4" -> 
                    Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y4" -> 
                    Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X5" -> 
                    Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y5" -> 
                    Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X6" -> 
                    Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "B1" -> "Button 1", "B2" -> "Button 2", "B3" -> 
                    "Button 3", "B4" -> "Button 4", "B5" -> "Button 5", "B6" -> 
                    "Button 6", "B7" -> "Button 7", "B8" -> "Button 8", "B9" -> 
                    "Button 9", "B10" -> "Button 10", "B11" -> "Button 11", 
                    "B12" -> "Button 12", "DefaultAbsolute" -> False}}, 
                 "Dell USB Keyboard" -> {{}, {
                   "SystemSleep Button" -> False, "SystemSleep Button 2" -> 
                    False, "SystemSleep Button 3" -> False}, {
                   "Manufacturer ID" -> 16700, "Product Name" -> 
                    "Dell USB Keyboard", "Product ID" -> 8208, 
                    "Controller Type" -> "External Controller", "Device Type" -> 
                    "Windows DirectInput Device", "HID Usage Page" -> 
                    "GenericDesktop", "HID Usage" -> "SystemControl"}, {
                   "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> 
                    "Button 11", "JB1" -> "Button 11", "JB2" -> "Button 12", 
                    "JB3" -> None, "TLB" -> "Button 5", "TRB" -> "Button 6", 
                    "BLB" -> "Button 7", "BRB" -> "Button 8", "X" -> "X Axis",
                     "Y" -> -"Y Axis", "Z" -> "Z Axis", "X1" -> "X Axis", 
                    "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> "Z Rotation",
                     "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
                    "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> 
                    None, "X4" -> 
                    Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y4" -> 
                    Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X5" -> 
                    Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y5" -> 
                    Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X6" -> 
                    Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "B1" -> "Button 1", "B2" -> "Button 2", "B3" -> 
                    "Button 3", "B4" -> "Button 4", "B5" -> "Button 5", "B6" -> 
                    "Button 6", "B7" -> "Button 7", "B8" -> "Button 8", "B9" -> 
                    "Button 9", "B10" -> "Button 10", "B11" -> "Button 11", 
                    "B12" -> "Button 12", "DefaultAbsolute" -> False}}, 
                 "Dell USB Keyboard" -> {{}, {
                   "ACRefresh Button" -> False, 
                    "ALLocalMachineBrowser Button" -> False, "ACHome Button" -> 
                    False, "ALEmailReader Button" -> False, 
                    "ALCalculator Button" -> False, "ACStop Button" -> False, 
                    "ACForward Button" -> False, "ACBack Button" -> False, 
                    "ScanNextTrack Button" -> False, 
                    "ScanPreviousTrack Button" -> False, "PlayOrPause Button" -> 
                    False, "Stop Button" -> False, 
                    "ALConsumerControlConfiguration Button" -> False}, {
                   "Manufacturer ID" -> 16700, "Product Name" -> 
                    "Dell USB Keyboard", "Product ID" -> 8208, 
                    "Controller Type" -> "External Controller", "Device Type" -> 
                    "Windows DirectInput Device", "HID Usage Page" -> 
                    "Consumer", "HID Usage" -> "ConsumerControl"}, {
                   "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> 
                    "Button 11", "JB1" -> "Button 11", "JB2" -> "Button 12", 
                    "JB3" -> None, "TLB" -> "Button 5", "TRB" -> "Button 6", 
                    "BLB" -> "Button 7", "BRB" -> "Button 8", "X" -> "X Axis",
                     "Y" -> -"Y Axis", "Z" -> "Z Axis", "X1" -> "X Axis", 
                    "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> "Z Rotation",
                     "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
                    "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> 
                    None, "X4" -> 
                    Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y4" -> 
                    Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X5" -> 
                    Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y5" -> 
                    Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X6" -> 
                    Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "B1" -> "Button 1", "B2" -> "Button 2", "B3" -> 
                    "Button 3", "B4" -> "Button 4", "B5" -> "Button 5", "B6" -> 
                    "Button 6", "B7" -> "Button 7", "B8" -> "Button 8", "B9" -> 
                    "Button 9", "B10" -> "Button 10", "B11" -> "Button 11", 
                    "B12" -> "Button 12", "DefaultAbsolute" -> False}}, 
                 "USB Receiver" -> {{}, {
                   "ConsumerControl Button" -> False, "NumericKeyPad Button" -> 
                    False, "ProgrammableButtons" -> False, 
                    "Consumer:4 Button" -> False, "Consumer:5 Button" -> 
                    False, "Consumer:6 Button" -> False, "Consumer:7 Button" -> 
                    False, "Consumer:8 Button" -> False, "Consumer:9 Button" -> 
                    False, "Consumer:10 Button" -> False, 
                    "Consumer:11 Button" -> False, "Consumer:12 Button" -> 
                    False, "Consumer:13 Button" -> False, 
                    "Consumer:14 Button" -> False, "Consumer:15 Button" -> 
                    False, "Consumer:16 Button" -> False, 
                    "Consumer:17 Button" -> False, "Consumer:18 Button" -> 
                    False, "Consumer:19 Button" -> False, 
                    "Consumer:20 Button" -> False, "Consumer:21 Button" -> 
                    False, "Consumer:22 Button" -> False, 
                    "Consumer:23 Button" -> False, "Consumer:24 Button" -> 
                    False, "Consumer:25 Button" -> False, 
                    "Consumer:26 Button" -> False, "Consumer:27 Button" -> 
                    False, "Consumer:28 Button" -> False, 
                    "Consumer:29 Button" -> False, "Consumer:30 Button" -> 
                    False, "Consumer:31 Button" -> False, "Plus10 Button" -> 
                    False, "Plus100 Button" -> False, "AMOrPM Button" -> 
                    False, "Consumer:35 Button" -> False, 
                    "Consumer:36 Button" -> False, "Consumer:37 Button" -> 
                    False, "Consumer:38 Button" -> False, 
                    "Consumer:39 Button" -> False, "Consumer:40 Button" -> 
                    False, "Consumer:41 Button" -> False, 
                    "Consumer:42 Button" -> False, "Consumer:43 Button" -> 
                    False, "Consumer:44 Button" -> False, 
                    "Consumer:45 Button" -> False, "Consumer:46 Button" -> 
                    False, "Consumer:47 Button" -> False, "Power Button" -> 
                    False, "Reset Button" -> False, "Sleep Button" -> False, 
                    "SleepAfter Button" -> False, "SleepMode Button" -> False,
                     "Illumination Button" -> False, "FunctionButtons" -> 
                    False, "Consumer:55 Button" -> False, 
                    "Consumer:56 Button" -> False, "Consumer:57 Button" -> 
                    False, "Consumer:58 Button" -> False, 
                    "Consumer:59 Button" -> False, "Consumer:60 Button" -> 
                    False, "Consumer:61 Button" -> False, 
                    "Consumer:62 Button" -> False, "Consumer:63 Button" -> 
                    False, "Menu Button" -> False, "MenuPick Button" -> False,
                     "MenuUp Button" -> False, "MenuDown Button" -> False, 
                    "MenuLeft Button" -> False, "MenuRight Button" -> False, 
                    "MenuEscape Button" -> False, "MenuValueIncrease Button" -> 
                    False, "MenuValueDecrease Button" -> False, 
                    "Consumer:73 Button" -> False, "Consumer:74 Button" -> 
                    False, "Consumer:75 Button" -> False, 
                    "Consumer:76 Button" -> False, "Consumer:77 Button" -> 
                    False, "Consumer:78 Button" -> False, 
                    "Consumer:79 Button" -> False, "Consumer:80 Button" -> 
                    False, "Consumer:81 Button" -> False, 
                    "Consumer:82 Button" -> False, "Consumer:83 Button" -> 
                    False, "Consumer:84 Button" -> False, 
                    "Consumer:85 Button" -> False, "Consumer:86 Button" -> 
                    False, "Consumer:87 Button" -> False, 
                    "Consumer:88 Button" -> False, "Consumer:89 Button" -> 
                    False, "Consumer:90 Button" -> False, 
                    "Consumer:91 Button" -> False, "Consumer:92 Button" -> 
                    False, "Consumer:93 Button" -> False, 
                    "Consumer:94 Button" -> False, "Consumer:95 Button" -> 
                    False, "DataOnScreen Button" -> False, 
                    "ClosedCaption Button" -> False, 
                    "ClosedCaptionSelect Button" -> False, "VCROrTV Button" -> 
                    False, "BroadcastMode Button" -> False, "Snapshot Button" -> 
                    False, "Still Button" -> False, "Consumer:103 Button" -> 
                    False, "Consumer:104 Button" -> False, 
                    "Consumer:105 Button" -> False, "Consumer:106 Button" -> 
                    False, "Consumer:107 Button" -> False, 
                    "Consumer:108 Button" -> False, "Consumer:109 Button" -> 
                    False, "Consumer:110 Button" -> False, 
                    "Consumer:111 Button" -> False, "Consumer:112 Button" -> 
                    False, "Consumer:113 Button" -> False, 
                    "Consumer:114 Button" -> False, "Consumer:115 Button" -> 
                    False, "Consumer:116 Button" -> False, 
                    "Consumer:117 Button" -> False, "Consumer:118 Button" -> 
                    False, "Consumer:119 Button" -> False, 
                    "Consumer:120 Button" -> False, "Consumer:121 Button" -> 
                    False, "Consumer:122 Button" -> False, 
                    "Consumer:123 Button" -> False, "Consumer:124 Button" -> 
                    False, "Consumer:125 Button" -> False, 
                    "Consumer:126 Button" -> False, "Consumer:127 Button" -> 
                    False, "Selection Button" -> False, "Assign Button" -> 
                    False, "ModeStep Button" -> False, "RecallLast Button" -> 
                    False, "EnterChannel Button" -> False, 
                    "OrderMovie Button" -> False, "Channel Button" -> False, 
                    "MediaSelection Button" -> False, 
                    "MediaSelectComputer Button" -> False, 
                    "MediaSelectTV Button" -> False, "MediaSelectWWW Button" -> 
                    False, "MediaSelectDVD Button" -> False, 
                    "MediaSelectTelephone Button" -> False, 
                    "MediaSelectProgramGuide Button" -> False, 
                    "MediaSelectVideoPhone Button" -> False, 
                    "MediaSelectGames Button" -> False, 
                    "MediaSelectMessages Button" -> False, 
                    "MediaSelectCD Button" -> False, "MediaSelectVCR Button" -> 
                    False, "MediaSelectTuner Button" -> False, "Quit Button" -> 
                    False, "Help Button" -> False, "MediaSelectTape Button" -> 
                    False, "MediaSelectCable Button" -> False, 
                    "MediaSelectSatellite Button" -> False, 
                    "MediaSelectSecurity Button" -> False, 
                    "MediaSelectHome Button" -> False, 
                    "MediaSelectCall Button" -> False, 
                    "ChannelIncrement Button" -> False, 
                    "ChannelDecrement Button" -> False, "Media Button" -> 
                    False, "Consumer:159 Button" -> False, "VCRPlus Button" -> 
                    False, "Once Button" -> False, "Daily Button" -> False, 
                    "Weekly Button" -> False, "Monthly Button" -> False, 
                    "Consumer:165 Button" -> False, "Consumer:166 Button" -> 
                    False, "Consumer:167 Button" -> False, 
                    "Consumer:168 Button" -> False, "Consumer:169 Button" -> 
                    False, "Consumer:170 Button" -> False, 
                    "Consumer:171 Button" -> False, "Consumer:172 Button" -> 
                    False, "Consumer:173 Button" -> False, 
                    "Consumer:174 Button" -> False, "Consumer:175 Button" -> 
                    False, "Play Button" -> False, "Pause Button" -> False, 
                    "Record Button" -> False, "FastForward Button" -> False, 
                    "Rewind Button" -> False, "ScanNextTrack Button" -> False,
                     "ScanPreviousTrack Button" -> False, "Stop Button" -> 
                    False, "Eject Button" -> False, "RandomPlay Button" -> 
                    False, "SelectDisc Button" -> False, "EnterDisc Button" -> 
                    False, "Repeat Button" -> False, "Tracking Button" -> 
                    False, "TrackNormal Button" -> False, 
                    "SlowTracking Button" -> False, "FrameForward Button" -> 
                    False, "FrameBack Button" -> False, "Mark Button" -> 
                    False, "ClearMark Button" -> False, 
                    "RepeatFromMark Button" -> False, "ReturnToMark Button" -> 
                    False, "SearchMarkForward Button" -> False, 
                    "SearchMarkBackwards Button" -> False, 
                    "CounterReset Button" -> False, "ShowCounter Button" -> 
                    False, "TrackingIncrement Button" -> False, 
                    "TrackingDecrement Button" -> False, "StopOrEject Button" -> 
                    False, "PlayOrPause Button" -> False, "PlayOrSkip Button" -> 
                    False, "Consumer:207 Button" -> False, 
                    "Consumer:208 Button" -> False, "Consumer:209 Button" -> 
                    False, "Consumer:210 Button" -> False, 
                    "Consumer:211 Button" -> False, "Consumer:212 Button" -> 
                    False, "Consumer:213 Button" -> False, 
                    "Consumer:214 Button" -> False, "Consumer:215 Button" -> 
                    False, "Consumer:216 Button" -> False, 
                    "Consumer:217 Button" -> False, "Consumer:218 Button" -> 
                    False, "Consumer:219 Button" -> False, 
                    "Consumer:220 Button" -> False, "Consumer:221 Button" -> 
                    False, "Consumer:222 Button" -> False, 
                    "Consumer:223 Button" -> False, "Volume Button" -> False, 
                    "Balance Button" -> False, "Mute Button" -> False, 
                    "Bass Button" -> False, "Treble Button" -> False, 
                    "BassBoost Button" -> False, "SurroundMode Button" -> 
                    False, "Loudness Button" -> False, "MPX Button" -> False, 
                    "VolumeIncrement Button" -> False, 
                    "VolumeDecrement Button" -> False, "Consumer:235 Button" -> 
                    False, "Consumer:236 Button" -> False, 
                    "Consumer:237 Button" -> False, "Consumer:238 Button" -> 
                    False, "Consumer:239 Button" -> False, "Speed Button" -> 
                    False, "PlaybackSpeed Button" -> False, 
                    "StandardPlay Button" -> False, "LongPlay Button" -> 
                    False, "ExtendedPlay Button" -> False, "Slow Button" -> 
                    False, "Consumer:246 Button" -> False, 
                    "Consumer:247 Button" -> False, "Consumer:248 Button" -> 
                    False, "Consumer:249 Button" -> False, 
                    "Consumer:250 Button" -> False, "Consumer:251 Button" -> 
                    False, "Consumer:252 Button" -> False, 
                    "Consumer:253 Button" -> False, "Consumer:254 Button" -> 
                    False, "Consumer:255 Button" -> False, "FanEnable Button" -> 
                    False, "FanSpeed Button" -> False, "LightEnable Button" -> 
                    False, "LightIlluminationLevel Button" -> False, 
                    "ClimateControlEnable Button" -> False, 
                    "RoomTemperature Button" -> False, 
                    "SecurityEnable Button" -> False, "FireAlarm Button" -> 
                    False, "PoliceAlarm Button" -> False, 
                    "Consumer:265 Button" -> False, "Consumer:266 Button" -> 
                    False, "Consumer:267 Button" -> False, 
                    "Consumer:268 Button" -> False, "Consumer:269 Button" -> 
                    False, "Consumer:270 Button" -> False, 
                    "Consumer:271 Button" -> False, "Consumer:272 Button" -> 
                    False, "Consumer:273 Button" -> False, 
                    "Consumer:274 Button" -> False, "Consumer:275 Button" -> 
                    False, "Consumer:276 Button" -> False, 
                    "Consumer:277 Button" -> False, "Consumer:278 Button" -> 
                    False, "Consumer:279 Button" -> False, 
                    "Consumer:280 Button" -> False, "Consumer:281 Button" -> 
                    False, "Consumer:282 Button" -> False, 
                    "Consumer:283 Button" -> False, "Consumer:284 Button" -> 
                    False, "Consumer:285 Button" -> False, 
                    "Consumer:286 Button" -> False, "Consumer:287 Button" -> 
                    False, "Consumer:288 Button" -> False, 
                    "Consumer:289 Button" -> False, "Consumer:290 Button" -> 
                    False, "Consumer:291 Button" -> False, 
                    "Consumer:292 Button" -> False, "Consumer:293 Button" -> 
                    False, "Consumer:294 Button" -> False, 
                    "Consumer:295 Button" -> False, "Consumer:296 Button" -> 
                    False, "Consumer:297 Button" -> False, 
                    "Consumer:298 Button" -> False, "Consumer:299 Button" -> 
                    False, "Consumer:300 Button" -> False, 
                    "Consumer:301 Button" -> False, "Consumer:302 Button" -> 
                    False, "Consumer:303 Button" -> False, 
                    "Consumer:304 Button" -> False, "Consumer:305 Button" -> 
                    False, "Consumer:306 Button" -> False, 
                    "Consumer:307 Button" -> False, "Consumer:308 Button" -> 
                    False, "Consumer:309 Button" -> False, 
                    "Consumer:310 Button" -> False, "Consumer:311 Button" -> 
                    False, "Consumer:312 Button" -> False, 
                    "Consumer:313 Button" -> False, "Consumer:314 Button" -> 
                    False, "Consumer:315 Button" -> False, 
                    "Consumer:316 Button" -> False, "Consumer:317 Button" -> 
                    False, "Consumer:318 Button" -> False, 
                    "Consumer:319 Button" -> False, "Consumer:320 Button" -> 
                    False, "Consumer:321 Button" -> False, 
                    "Consumer:322 Button" -> False, 
                    "ALNextTaskOrApplication Button" -> False, 
                    "Consumer:324 Button" -> False, "Consumer:325 Button" -> 
                    False, "Consumer:326 Button" -> False, 
                    "Consumer:327 Button" -> False, "Consumer:328 Button" -> 
                    False, "Consumer:329 Button" -> False, 
                    "Consumer:330 Button" -> False, "Consumer:331 Button" -> 
                    False, "Consumer:332 Button" -> False, 
                    "Consumer:333 Button" -> False, "Consumer:334 Button" -> 
                    False, "Consumer:335 Button" -> False, 
                    "BalanceRight Button" -> False, "BalanceLeft Button" -> 
                    False, "BassIncrement Button" -> False, 
                    "BassDecrement Button" -> False, "TrebleIncrement Button" -> 
                    False, "TrebleDecrement Button" -> False, 
                    "Consumer:342 Button" -> False, "Consumer:343 Button" -> 
                    False, "Consumer:344 Button" -> False, 
                    "Consumer:345 Button" -> False, "Consumer:346 Button" -> 
                    False, "Consumer:347 Button" -> False, 
                    "Consumer:348 Button" -> False, "Consumer:349 Button" -> 
                    False, "Consumer:350 Button" -> False, 
                    "Consumer:351 Button" -> False, "SpeakerSystem Button" -> 
                    False, "ChannelLeft Button" -> False, 
                    "ChannelRight Button" -> False, "ChannelCenter Button" -> 
                    False, "ChannelFront Button" -> False, 
                    "ChannelCenterFront Button" -> False, 
                    "ChannelSide Button" -> False, "ChannelSurround Button" -> 
                    False, "ChannelLowFrequencyEnhancement Button" -> False, 
                    "ChannelTop Button" -> False, "ChannelUnknown Button" -> 
                    False, "Consumer:363 Button" -> False, 
                    "Consumer:364 Button" -> False, "Consumer:365 Button" -> 
                    False, "Consumer:366 Button" -> False, 
                    "Consumer:367 Button" -> False, "SubChannel Button" -> 
                    False, "SubChannelIncrement Button" -> False, 
                    "SubChannelDecrement Button" -> False, 
                    "AlternateAudioIncrement Button" -> False, 
                    "AlternateAudioDecrement Button" -> False, 
                    "Consumer:373 Button" -> False, "Consumer:374 Button" -> 
                    False, "Consumer:375 Button" -> False, 
                    "Consumer:376 Button" -> False, "Consumer:377 Button" -> 
                    False, "Consumer:378 Button" -> False, 
                    "Consumer:379 Button" -> False, "Consumer:380 Button" -> 
                    False, "Consumer:381 Button" -> False, 
                    "Consumer:382 Button" -> False, "Consumer:383 Button" -> 
                    False, "ApplicationLaunchButtons" -> False, 
                    "ALLaunchButtonConfigurationTool" -> False, 
                    "ALProgrammableButtonConfiguration" -> False, 
                    "ALConsumerControlConfiguration Button" -> False, 
                    "ALWordProcessor Button" -> False, "ALTextEditor Button" -> 
                    False, "ALSpreadsheet Button" -> False, 
                    "ALGraphicsEditor Button" -> False, 
                    "ALPresentationApp Button" -> False, 
                    "ALDatabaseApp Button" -> False, "ALEmailReader Button" -> 
                    False, "ALNewsreader Button" -> False, 
                    "ALVoicemail Button" -> False, 
                    "ALContactsOrAddressBook Button" -> False, 
                    "ALCalendarOrSchedule Button" -> False, 
                    "ALTaskOrProjectManager Button" -> False, 
                    "ALLogOrJournalOrTimecard Button" -> False, 
                    "ALCheckbookOrFinance Button" -> False, 
                    "ALCalculator Button" -> False, 
                    "ALAOrVCaptureOrPlayback Button" -> False, 
                    "ALLocalMachineBrowser Button" -> False, 
                    "ALLANOrWANBrowser Button" -> False, 
                    "ALInternetBrowser Button" -> False, 
                    "ALRemoteNetworkingOrISPConnect Button" -> False, 
                    "ALNetworkConference Button" -> False, 
                    "ALNetworkChat Button" -> False, 
                    "ALTelephonyOrDialer Button" -> False, "ALLogon Button" -> 
                    False, "ALLogoff Button" -> False, 
                    "ALLogonOrLogoff Button" -> False, 
                    "ALTerminalLockOrScreensaver Button" -> False, 
                    "ALControlPanel Button" -> False, 
                    "ALCommandLineProcessorOrRun Button" -> False, 
                    "ALProcessOrTaskManager Button" -> False, "AL Button" -> 
                    False, "Consumer:419 Button" -> False, 
                    "ALPreviousTaskOrApplication Button" -> False, 
                    "ALPreemptiveHaltTaskOrApplication Button" -> False, 
                    "Consumer:422 Button" -> False, "Consumer:423 Button" -> 
                    False, "Consumer:424 Button" -> False, 
                    "Consumer:425 Button" -> False, "Consumer:426 Button" -> 
                    False, "Consumer:427 Button" -> False, 
                    "Consumer:428 Button" -> False, "Consumer:429 Button" -> 
                    False, "Consumer:430 Button" -> False, 
                    "Consumer:431 Button" -> False, "Consumer:432 Button" -> 
                    False, "Consumer:433 Button" -> False, 
                    "Consumer:434 Button" -> False, "Consumer:435 Button" -> 
                    False, "Consumer:436 Button" -> False, 
                    "Consumer:437 Button" -> False, "Consumer:438 Button" -> 
                    False, "Consumer:439 Button" -> False, 
                    "Consumer:440 Button" -> False, "Consumer:441 Button" -> 
                    False, "Consumer:442 Button" -> False, 
                    "Consumer:443 Button" -> False, "Consumer:444 Button" -> 
                    False, "Consumer:445 Button" -> False, 
                    "Consumer:446 Button" -> False, "Consumer:447 Button" -> 
                    False, "Consumer:448 Button" -> False, 
                    "Consumer:449 Button" -> False, "Consumer:450 Button" -> 
                    False, "Consumer:451 Button" -> False, 
                    "Consumer:452 Button" -> False, "Consumer:453 Button" -> 
                    False, "Consumer:454 Button" -> False, 
                    "Consumer:455 Button" -> False, "Consumer:456 Button" -> 
                    False, "Consumer:457 Button" -> False, 
                    "Consumer:458 Button" -> False, "Consumer:459 Button" -> 
                    False, "Consumer:460 Button" -> False, 
                    "Consumer:461 Button" -> False, "Consumer:462 Button" -> 
                    False, "Consumer:463 Button" -> False, 
                    "Consumer:464 Button" -> False, "Consumer:465 Button" -> 
                    False, "Consumer:466 Button" -> False, 
                    "Consumer:467 Button" -> False, "Consumer:468 Button" -> 
                    False, "Consumer:469 Button" -> False, 
                    "Consumer:470 Button" -> False, "Consumer:471 Button" -> 
                    False, "Consumer:472 Button" -> False, 
                    "Consumer:473 Button" -> False, "Consumer:474 Button" -> 
                    False, "Consumer:475 Button" -> False, 
                    "Consumer:476 Button" -> False, "Consumer:477 Button" -> 
                    False, "Consumer:478 Button" -> False, 
                    "Consumer:479 Button" -> False, "Consumer:480 Button" -> 
                    False, "Consumer:481 Button" -> False, 
                    "Consumer:482 Button" -> False, "Consumer:483 Button" -> 
                    False, "Consumer:484 Button" -> False, 
                    "Consumer:485 Button" -> False, "Consumer:486 Button" -> 
                    False, "Consumer:487 Button" -> False, 
                    "Consumer:488 Button" -> False, "Consumer:489 Button" -> 
                    False, "Consumer:490 Button" -> False, 
                    "Consumer:491 Button" -> False, "Consumer:492 Button" -> 
                    False, "Consumer:493 Button" -> False, 
                    "Consumer:494 Button" -> False, "Consumer:495 Button" -> 
                    False, "Consumer:496 Button" -> False, 
                    "Consumer:497 Button" -> False, "Consumer:498 Button" -> 
                    False, "Consumer:499 Button" -> False, 
                    "Consumer:500 Button" -> False, "Consumer:501 Button" -> 
                    False, "Consumer:502 Button" -> False, 
                    "Consumer:503 Button" -> False, "Consumer:504 Button" -> 
                    False, "Consumer:505 Button" -> False, 
                    "Consumer:506 Button" -> False, "Consumer:507 Button" -> 
                    False, "Consumer:508 Button" -> False, 
                    "Consumer:509 Button" -> False, "Consumer:510 Button" -> 
                    False, "Consumer:511 Button" -> False, 
                    "GenericGUIApplicationControls Button" -> False, 
                    "ACNew Button" -> False, "ACOpen Button" -> False, 
                    "ACClose Button" -> False, "ACExit Button" -> False, 
                    "ACMaximize Button" -> False, "ACMinimize Button" -> 
                    False, "ACSave Button" -> False, "ACPrint Button" -> 
                    False, "ACProperties Button" -> False, 
                    "Consumer:522 Button" -> False, "Consumer:523 Button" -> 
                    False, "Consumer:524 Button" -> False, 
                    "Consumer:525 Button" -> False, "Consumer:526 Button" -> 
                    False, "Consumer:527 Button" -> False, 
                    "Consumer:528 Button" -> False, "Consumer:529 Button" -> 
                    False, "Consumer:530 Button" -> False, 
                    "Consumer:531 Button" -> False, "Consumer:532 Button" -> 
                    False, "Consumer:533 Button" -> False, 
                    "Consumer:534 Button" -> False, "Consumer:535 Button" -> 
                    False, "Consumer:536 Button" -> False, 
                    "Consumer:537 Button" -> False, "ACUndo Button" -> False, 
                    "ACCopy Button" -> False, "ACCut Button" -> False, 
                    "ACPaste Button" -> False, "AC Button" -> False, 
                    "ACFind Button" -> False, "ACFindandReplace Button" -> 
                    False, "ACSearch Button" -> False, "ACGoTo Button" -> 
                    False, "ACHome Button" -> False, "ACBack Button" -> False,
                     "ACForward Button" -> False, "ACStop Button" -> False, 
                    "ACRefresh Button" -> False, "ACPreviousLink Button" -> 
                    False, "ACNextLink Button" -> False, "ACBookmarks Button" -> 
                    False, "ACHistory Button" -> False, 
                    "ACSubscriptions Button" -> False, "ACZoomIn Button" -> 
                    False, "ACZoomOut Button" -> False, "ACZoom Button" -> 
                    False, "ACFullScreenView Button" -> False, 
                    "ACNormalView Button" -> False, "ACViewToggle Button" -> 
                    False, "ACScrollUp Button" -> False, 
                    "ACScrollDown Button" -> False, "ACScroll Button" -> 
                    False, "ACPanLeft Button" -> False, "ACPanRight Button" -> 
                    False, "ACPan Button" -> False, "ACNewWindow Button" -> 
                    False, "ACTileHorizontally Button" -> False, 
                    "ACTileVertically Button" -> False, "ACFormat Button" -> 
                    False, "Consumer:573 Button" -> False, 
                    "Consumer:574 Button" -> False, "Consumer:575 Button" -> 
                    False, "Consumer:576 Button" -> False, 
                    "Consumer:577 Button" -> False, "Consumer:578 Button" -> 
                    False, "Consumer:579 Button" -> False, 
                    "Consumer:580 Button" -> False, "Consumer:581 Button" -> 
                    False, "Consumer:582 Button" -> False, 
                    "Consumer:583 Button" -> False, "Consumer:584 Button" -> 
                    False, "Consumer:585 Button" -> False, 
                    "Consumer:586 Button" -> False, "Consumer:587 Button" -> 
                    False, "Consumer:588 Button" -> False, 
                    "Consumer:589 Button" -> False, "Consumer:590 Button" -> 
                    False, "Consumer:591 Button" -> False, 
                    "Consumer:592 Button" -> False, "Consumer:593 Button" -> 
                    False, "Consumer:594 Button" -> False, 
                    "Consumer:595 Button" -> False, "Consumer:596 Button" -> 
                    False, "Consumer:597 Button" -> False, 
                    "Consumer:598 Button" -> False, "Consumer:599 Button" -> 
                    False, "Consumer:600 Button" -> False, 
                    "Consumer:601 Button" -> False, "Consumer:602 Button" -> 
                    False, "Consumer:603 Button" -> False, 
                    "Consumer:604 Button" -> False, "Consumer:605 Button" -> 
                    False, "Consumer:606 Button" -> False, 
                    "Consumer:607 Button" -> False, "Consumer:608 Button" -> 
                    False, "Consumer:609 Button" -> False, 
                    "Consumer:610 Button" -> False, "Consumer:611 Button" -> 
                    False, "Consumer:612 Button" -> False, 
                    "Consumer:613 Button" -> False, "Consumer:614 Button" -> 
                    False, "Consumer:615 Button" -> False, 
                    "Consumer:616 Button" -> False, "Consumer:617 Button" -> 
                    False, "Consumer:618 Button" -> False, 
                    "Consumer:619 Button" -> False, "Consumer:620 Button" -> 
                    False, "Consumer:621 Button" -> False, 
                    "Consumer:622 Button" -> False, "Consumer:623 Button" -> 
                    False, "Consumer:624 Button" -> False, 
                    "Consumer:625 Button" -> False, "Consumer:626 Button" -> 
                    False, "Consumer:627 Button" -> False, 
                    "Consumer:628 Button" -> False, "Consumer:629 Button" -> 
                    False, "Consumer:630 Button" -> False, 
                    "Consumer:631 Button" -> False, "Consumer:632 Button" -> 
                    False, "Consumer:633 Button" -> False, 
                    "Consumer:634 Button" -> False, "Consumer:635 Button" -> 
                    False, "Consumer:636 Button" -> False, 
                    "Consumer:637 Button" -> False, "Consumer:638 Button" -> 
                    False, "Consumer:639 Button" -> False, 
                    "Consumer:640 Button" -> False, "Consumer:641 Button" -> 
                    False, "Consumer:642 Button" -> False, 
                    "Consumer:643 Button" -> False, "Consumer:644 Button" -> 
                    False, "Consumer:645 Button" -> False, 
                    "Consumer:646 Button" -> False, "Consumer:647 Button" -> 
                    False, "Consumer:648 Button" -> False, 
                    "Consumer:649 Button" -> False, "Consumer:650 Button" -> 
                    False, "Consumer:651 Button" -> False, 
                    "Consumer:652 Button" -> False}, {
                   "Manufacturer ID" -> 1133, "Product Name" -> 
                    "USB Receiver", "Product ID" -> 50475, "Controller Type" -> 
                    "External Controller", "Device Type" -> 
                    "Windows DirectInput Device", "HID Usage Page" -> 
                    "Consumer", "HID Usage" -> "ConsumerControl"}, {
                   "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> 
                    "Button 11", "JB1" -> "Button 11", "JB2" -> "Button 12", 
                    "JB3" -> None, "TLB" -> "Button 5", "TRB" -> "Button 6", 
                    "BLB" -> "Button 7", "BRB" -> "Button 8", "X" -> "X Axis",
                     "Y" -> -"Y Axis", "Z" -> "Z Axis", "X1" -> "X Axis", 
                    "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> "Z Rotation",
                     "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
                    "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> 
                    None, "X4" -> 
                    Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y4" -> 
                    Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X5" -> 
                    Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "Y5" -> 
                    Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "X6" -> 
                    Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
                    True, False}, -1, {False, True}, 1, {True, True}, 
                    0.00001], "B1" -> "Button 1", "B2" -> "Button 2", "B3" -> 
                    "Button 3", "B4" -> "Button 4", "B5" -> "Button 5", "B6" -> 
                    "Button 6", "B7" -> "Button 7", "B8" -> "Button 8", "B9" -> 
                    "Button 9", "B10" -> "Button 10", "B11" -> "Button 11", 
                    "B12" -> "Button 12", "DefaultAbsolute" -> False}}}}, 
             "Network" -> {
              "IPAddresses" -> {
                "fe80::d9ed:bd8e:6ef8:232c", "fe80::5efe:192.168.0.5", 
                 "fe80::497e:3d0c:c148:34a9", "fe80::429:578:4c21:ac9c", 
                 "fe80::2445:d56f:bc83:b129", 
                 "2804:14d:148b:5:e421:e76e:5c58:7347", 
                 "2804:14d:148b:5:497e:3d0c:c148:34a9", 
                 "2001:0:9d38:90d7:429:578:4c21:ac9c", "192.168.0.5", 
                 "169.254.35.44", "169.254.177.41"}, "AllowInternetUse" -> 
               True, "LoadOnDemand" -> True, 
               "LoadOnDemandServers" -> {"http://pacletserver.wolfram.com"}, 
               "LatestTransaction" -> Missing["NotActive"], 
               "LatestTransactionServer" -> Missing["NotActive"], 
               "LastLocalIndexUpdate" -> {
                2016, 8, 12, 15, 4, 38.0310453`9.332713147864226}, 
               "LastLocalIndexUpdateServer" -> {}, "Paclets" -> 
               "PacletManager Version 3.0.0", "TotalDownloads" -> 
               Missing["NotActive"], "DownloadsDirectory" -> 
               Missing["NotActive"]}}]],
         Evaluator->Automatic,
         ImageSize->Automatic,
         Method->"Preemptive"],
        "\"Copy system information data to the clipboard as text\"",
        TooltipStyle->"TextStyling"],
       Annotation[#, "Copy system information data to the clipboard as text", 
        "Tooltip"]& ]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   Editable->False,
   Deletable->False,
   StripOnInput->False,
   ShowStringCharacters->False,
   FontWeight->"Plain",
   TooltipBoxOptions->{TooltipDelay->Automatic}],
  SystemInformationData[{
   "Kernel" -> {
     "Version" -> "11.0.0 for Microsoft Windows (64-bit) (July 28, 2016)", 
      "ReleaseID" -> "11.0.0.0 (5570737, 2016072801)", "LicenseID" -> 
      "L2482-2405", "PatchLevel" -> "0", "ActivationKey" -> 
      "2482-2405-4UTTYK", "ActivationGroupID" -> "L2482-2405", "MachineID" -> 
      "6240-36636-61900", "UserName" -> "smartin", "MachineName" -> 
      "alienwarex51", "MachineDomains" -> {}, "LicenseServer" -> 
      "alienwarex51", "MaxLicenseProcesses" -> 8, "LicenseExpirationDate" -> 
      DateObject[{2017, 7, 8}], "MachineType" -> "PC", "OperatingSystem" -> 
      "Windows", "ProcessorType" -> "x86-64", "Language" -> "English", 
      "CharacterEncoding" -> "WindowsANSI", "SystemCharacterEncoding" -> 
      "WindowsANSI", "TimeZone" -> -4., "CreationDate" -> 
      DateObject[{2016, 7, 28}, 
        TimeObject[{18, 52, 37.}, TimeZone -> -4.], TimeZone -> -4.], 
      "InstallationDirectory" -> 
      "C:\\Program Files\\Wolfram Research\\Mathematica\\11.0", 
      "InitializationFiles" -> {
       "C:\\ProgramData\\Mathematica\\Kernel\\init.m", 
        "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\Kernel\\init.m"}, 
      "CurrentDirectory" -> 
      "C:\\Users\\smartin\\Desktop\\HDF5WrappersForMathematica  Ver 12 August \
2016", "HomeDirectory" -> "C:\\Users\\smartin", "UserDocumentsDirectory" -> 
      "C:\\Users\\smartin\\Documents", "UserBaseDirectory" -> 
      "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica", "BaseDirectory" -> 
      "C:\\ProgramData\\Mathematica", 
      "Path" -> {
       "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links", 
        "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\Kernel", 
        "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\Autoload", 
        "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\Applications", 
        "C:\\ProgramData\\Mathematica\\Kernel", 
        "C:\\ProgramData\\Mathematica\\Autoload", 
        "C:\\ProgramData\\Mathematica\\Applications", ".", 
        "C:\\Users\\smartin", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Autoload", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\ExtraPackages", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\Packages", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\Documentation\\English\\System", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Data\\ICC"}, 
      "PackagesLoaded" -> {
       "JLink`", "NETLink`", "GetFEKernelInit`", 
        "SymbolicMachineLearningLoader`", "StreamingLoader`", 
        "NeuralNetworks`", "IconizeLoader`", "HTTPHandlingLoader`", 
        "CloudObjectLoader`", "ResourceLocator`", "PacletManager`", "System`",
         "Global`"}, 
      "AllFilesLoaded" -> {
       "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\CharacterEncodings\\WindowsANSI.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\sysinit.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\mainload.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\InactivateExclusions.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\Parallel\\Kernel\\sysload.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\Parallel\\SysInfo.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\SystemInformation.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Converters.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
init.m", "C:\\Program Files\\Wolfram Research\\Mathematica\\11.0\\SystemFiles\
\\Autoload\\PacletManager\\PacletManager.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Utils.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Paclet.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Roots.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\CharacterEncodings\\Unicode.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Collection.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
LayoutDocsCollection.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
MemoryCollection.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Extension.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Documentation.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Notebook.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Services.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\AlphaIntegration.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Packer.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Zip.m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\ResourceLocator\\Kernel\\\
init.m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\ResourceLocator\\\
ResourceLocator.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Kernel\\\
Manager.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\DateTime\\DateObject.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\DataPaclets\\CalendarData.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\ExternalService\\URITools.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\CharacterEncodings\\UTF8.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\CharacterFunctions\\CharacterFunctions.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\StringPattern.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\CharacterEncodings\\ASCII.m", 
        "C:\\ProgramData\\Mathematica\\Kernel\\init.m", 
        "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\Kernel\\init.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\FEKernelInit.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\TextResources\\English\\\
FunctionInformation.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Notebook.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\OutputSizeLimit.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\RuntimeTools.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\DateTime\\DateString.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Explore\\Explore.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\NETLink.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\JLink\\JLink.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\JLink\\Kernel\\\
SystemResources\\Windows-x86-64\\JLink.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\InstallNET.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\CallNET.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\NET.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\NETBlock.m",
         "C:\\Program Files\\Wolfram Research\\Mathematica\\11.0\\SystemFiles\
\\Links\\NETLink\\Kernel\\MakeNETObject.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\Reflection.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\Delegates.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\DLL.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\UI.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\ComplexType.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\Exceptions.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\Utils.m", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\JLinkCommon.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\MathKernel.\
m", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\Kernel\\COM.m"}, 
      "ContextPath" -> {
       "NETLink`", "JLink`", "SymbolicMachineLearningLoader`", 
        "StreamingLoader`", "NeuralNetworks`", "IconizeLoader`", 
        "HTTPHandlingLoader`", "CloudObjectLoader`", "PacletManager`", 
        "System`", "Global`"}, 
      "AvailableAddOns" -> {
       "AstronomyConvenienceFunctions", "AuthorTools", "ClusterIntegration", 
        "CompiledFunctionTools", "DataDropClient", "DemoChannels", 
        "DemonstrationsTools", "DocumentationSearch", "EntityFramework", 
        "FormulaData", "GeoFieldModelData", "HumanGrowthData", 
        "InflationAdjust", "LightweightGridClient", "NotebookTemplating", 
        "OAuth", "PacletManager", "Parallel", "QuantityUnits", 
        "ResourceLocator", "Security", "StandardOceanData", "SubKernels", 
        "SymbolicC"}, "OpenStreams" -> {
        OutputStream["stdout", 1], 
        OutputStream["stderr", 2]}, "OpenWSTPConnections" -> {
        LinkObject["w6xk8_shm", 3, 1], 
        LinkObject["pkbgn_shm", 49, 2], 
        LinkObject["i68nv_shm", 50, 3], 
        LinkObject[
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\InstallableNET.exe",
          88, 4], 
        LinkObject["vkctp_shm", 89, 5]}, "InstalledPrograms" -> {
        LinkObject[
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\InstallableNET.exe",
          88, 4]}, "DefaultCCompiler" -> Missing["NotActive"], "CCompilers" -> 
      Missing["NotActive"], "SystemID" -> "Windows-x86-64", 
      "CommandLine" -> {
       "WolframKernel", "-wstp", "-noicon", "-mathlink", "-linkprotocol", 
        "SharedMemory", "-linkmode", "connect", "-linkname", "w6xk8_shm"}, 
      "ProcessID" -> 3360, "ParentProcessID" -> 0, "WSTPVersion" -> 
      "4.37 (2016072801)", "ProcessorCount" -> 4, "SystemMemory" -> 
      8589934592, "LicenseSubprocesses" -> 0, "MaxLicenseSubprocesses" -> 16, 
      "EvaluatorName" -> "Local", "EvaluatorNames" -> {"Local"}, 
      "ByteOrdering" -> -1, "PathnameSeparator" -> "\\", "MachinePrecision" -> 
      15.954589770191003`, "MachineEpsilon" -> 2.220446049250313*^-16, 
      "MinMachineNumber" -> 2.2250738585072014`*^-308, "MaxMachineNumber" -> 
      1.7976931348623157`*^308, "MinNumber" -> 
      6.22968824967532196119819746965503015872`15.954589770191005*^-\
1355718576299610, "MaxNumber" -> 
      1.60521676193366172702774105306375828321`15.954589770191005*^\
1355718576299609}, 
    "FrontEnd" -> {
     "Version" -> "11.0 for Microsoft Windows (64-bit) (July 28, 2016)", 
      "ReleaseID" -> "11.0.0.0 (5570737, 2016072801)", "LicenseID" -> 
      "L2482-2405", "PatchLevel" -> "0", "ActivationKey" -> 
      "2482-2405-4UTTYK", "ActivationGroupID" -> "L2482-2405", "MachineID" -> 
      "6240-36636-61900", "UserName" -> "smartin", "MachineName" -> 
      "alienwarex51", "MachineDomains" -> {}, "LicenseServer" -> 
      "alienwarex51", "MaxLicenseProcesses" -> 8, 
      "LicenseExpirationDate" -> {2017, 7, 8, 0, 0, 0}, "MachineType" -> "PC",
       "OperatingSystem" -> "Windows", "ProcessorType" -> "x86-64", 
      "Language" -> "English", "ExternalCharacterEncoding" -> "WindowsANSI", 
      "TimeZone" -> -4., "CurrentDirectory" -> 
      "C:\\Users\\smartin\\Documents", "HomeDirectory" -> 
      "C:\\Users\\smartin\\", "UserDocumentsDirectory" -> 
      "C:\\Users\\smartin\\Documents\\", "UserBaseDirectory" -> 
      "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\", "BaseDirectory" -> 
      "C:\\ProgramData\\Mathematica\\", 
      "NotebookPath" -> {
       "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\Autoload\\*\\\
FrontEnd\\Palettes\\", 
        "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\Applications\\*\\\
FrontEnd\\Palettes\\", 
        "C:\\ProgramData\\Mathematica\\Autoload\\*\\FrontEnd\\Palettes\\", 
        "C:\\ProgramData\\Mathematica\\Applications\\*\\FrontEnd\\Palettes\\",
         "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Autoload\\*\\FrontEnd\\Palettes\\", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\*\\FrontEnd\\Palettes\\", 
        "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\SystemFiles\\\
FrontEnd\\Palettes\\", 
        "C:\\ProgramData\\Mathematica\\SystemFiles\\FrontEnd\\Palettes\\", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\Configuration\\FrontEnd\\Palettes\\", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Components\\*\\FrontEnd\\Palettes\\\
", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\*\\FrontEnd\\Palettes\\", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\FrontEnd\\Palettes\\", 
        "C:\\Users\\smartin\\", 
        "C:\\Program Files\\Wolfram Research\\Mathematica\\11.0\\"}, 
      "InstallationDirectory" -> 
      "C:\\Program Files\\Wolfram Research\\Mathematica\\11.0\\", 
      "InitializationFiles" -> {
       "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Notebook.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\FEKernelInit.mx", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Kernel\\SystemResources\\Windows-\
x86-64\\Notebook.mx"}, "CreationDate" -> DateObject[{2016, 7, 28}, 
        TimeObject[{18, 26, 11.}, TimeZone -> -4.], TimeZone -> -4.], 
      "TrustedPath" -> {
       "C:\\Users\\smartin\\Documents\\Wolfram Mathematica\\", 
        "C:\\Program Files\\Wolfram Research\\Mathematica\\11.0\\", 
        "C:\\ProgramData\\Mathematica\\", 
        "C:\\Users\\smartin\\AppData\\Roaming\\Mathematica\\"}, 
      "UntrustedPath" -> {
       "C:\\Users\\smartin\\Desktop\\", "C:\\Users\\smartin\\Downloads\\", 
        "C:\\Users\\smartin\\AppData\\Local\\", 
        "C:\\Users\\smartin\\AppData\\Roaming\\", "C:\\Program Files\\", 
        "C:\\Program Files (x86)\\", 
        "C:\\Users\\smartin\\AppData\\Local\\Programs\\", 
        "C:\\Users\\smartin\\AppData\\Local\\Temp\\", 
        "C:\\Users\\smartin\\AppData\\Local\\Microsoft\\Windows\\INetCache\\"}\
, "TrustByDefault" -> Automatic, "InitializationCellWarning" -> True, 
      "SystemID" -> "Windows-x86-64", "ProcessID" -> 6580, "WSTPVersion" -> 
      "4.37 (2016072801)", "OperatingSystemVersion" -> "10.0 (Build 10586)", 
      "LicenseSubprocesses" -> 0, "MaxLicenseSubprocesses" -> 16, 
      "SyntaxColoringEnabled" -> True, "DebuggerEnabled" -> False, 
      "NotebookIndexers" -> "Windows Search (10.0.1.36)", "BrowserPlugin" -> 
      "Internet Explorer x64 (11.0.30762.54369), Internet Explorer \
(11.0.30762.54369), Netscape (11.0.30762.54369)", 
      "DefaultFormatTypes" -> {StandardForm, StandardForm}}, 
    "Links" -> {"OpenStreams" -> {
        OutputStream["stdout", 1], 
        OutputStream["stderr", 2]}, "OpenWSTPConnections" -> {
        LinkObject["w6xk8_shm", 3, 1], 
        LinkObject["pkbgn_shm", 49, 2], 
        LinkObject["i68nv_shm", 50, 3], 
        LinkObject[
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\InstallableNET.exe",
          88, 4], 
        LinkObject["vkctp_shm", 89, 5]}, "InstalledPrograms" -> {
        LinkObject[
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\NETLink\\InstallableNET.exe",
          88, 4]}, "JLinkVersion" -> "J/Link Version 4.9.1", "JavaRunning" -> 
      False, "JavaVersion" -> Missing["NotActive"], 
      "JLinkClasspath" -> {
       "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Java\\", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Java\\WolframSSH.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Java\\WolframSSHKeyGen.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Java\\", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Java\\\
antlr.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Java\\\
mexpr.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Java\\\
mexprparser.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Java\\\
PacletManager.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Autoload\\PacletManager\\Java\\\
WRIjdbm.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\activation.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\bzip2.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\commons-codec-1.3.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\commons-\
collections-3.2.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\commons-\
httpclient-3.0.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\commons-lang-2.1.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\commons-logging-1.\
1.1.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\Convert.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\core-3.0.0.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\customizer.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\dom4j-1.6.1.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\Exif.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\externalservice.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\gnu-regexp-1.1.4.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\grib-8.0.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\jackcess-1.1.18.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\javase-3.0.0.jar",
         "C:\\Program Files\\Wolfram Research\\Mathematica\\11.0\\SystemFiles\
\\Converters\\Java\\jdbf.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\jdom.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\jmf.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\JPEG2000b.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\JSON.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\jxl.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\ldap.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\mail.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\mediaplayer.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\multiplayer.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\netcdf-4.2.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\poi-3.11-20150702.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\poi-examples-3.11-\
20150702.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\poi-excelant-3.11-\
20150702.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\poi-ooxml-3.11-\
20150702.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\poi-ooxml-schemas-\
3.11-20150702.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\poi-scratchpad-3.\
11-20150702.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\prefsAll.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\resourcesOptional.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\stax-api-1.0.1.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\tagsoup-1.0rc9.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\tar.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\xercesImpl.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\xml-apis.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\xmlbeans-2.3.0.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Converters\\Java\\zxing-client.jar",
         "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\bsf-Wolfram.jar",
         "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\bsf.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\concurrent.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\diva-canvas-core.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\GUIKit.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\OculusLayout.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\xercesImpl.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Packages\\GUIKit\\Java\\xmlParserAPIs.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\commons-\
collections-3.1.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\commons-\
dbcp-1.2.1.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\commons-\
pool-1.2.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\derby.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\\
derbyclient.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\drizzle-\
jdbc-1.3.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\\
glazedlists.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\h2-1.3.\
176.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\hsqldb.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\jaybird-\
full-2.2.9.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\jtds-1.3.\
1.jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\mariadb-\
java-client-1.3.4.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\mysql-\
connector-java-5.1.38-bin.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\\
postgresql-9.4-1206-jdbc4.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\DatabaseLink\\Java\\sqlite-\
jdbc-3.8.11.2.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\jna.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\JRI.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\JRIEngine.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\log4j-1.2.16.\
jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\REngine.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\RLink\\Java\\RLink.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\WebServices\\Java\\", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\WebServices\\Java\\commons-\
httpclient-3.0.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\WebServices\\Java\\commons-\
logging-1.0.4.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\WebServices\\Java\\junit-3.8.\
1.jar", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\XMLSchema\\Java\\", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Links\\XMLSchema\\Java\\commons-\
codec-1.3.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\ClusterIntegration\\Java\\\
", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\ClusterIntegration\\Java\\\
Wolfram_SGE.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\DocumentationSearch\\Java\\\
", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\LightweightGridClient\\\
Java\\", "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\AddOns\\Applications\\LightweightGridClient\\\
Java\\wolfram-remote-services-client.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Components\\Interpreter\\Java\\", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Components\\Interpreter\\Java\\\
libphonenumber-7.4.4.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Components\\Interpreter\\Java\\\
ParseTelephoneNumber.jar", 
        "C:\\Program Files\\Wolfram \
Research\\Mathematica\\11.0\\SystemFiles\\Java\\Windows-x86-64\\lib\\tools.\
jar"}, "LoadedJavaClasses" -> {}, ".NetLinkVersion" -> 
      "NET/Link Version 1.6.2", ".NETRunning" -> True, ".NETVersion" -> 
      "4.0.30319.42000", "LoadedNETTypes" -> {
        NETLink`NETType["System.Version", 2], 
        NETLink`NETType["System.Environment", 1]}, "LoadedNETAssemblies" -> {
        NETLink`NETAssembly["mscorlib", 2], 
        NETLink`NETAssembly["InstallableNET", 3], 
        NETLink`NETAssembly["Wolfram.NETLink", 4], 
        NETLink`NETAssembly["System", 5], 
        NETLink`NETAssembly["System.Windows.Forms", 6], 
        NETLink`NETAssembly["System.Drawing", 7], 
        NETLink`NETAssembly["HDF.PInvoke", 1]}, "CUDAQ" -> 
      Missing["NotActive"], "CUDALink" -> Missing["NotActive"], "OpenCLQ" -> 
      Missing["NotActive"], "OpenCLLink" -> Missing["NotActive"], 
      "DatabaseLinkVersion" -> Missing["NotActive"], 
      "OpenDatabaseConnections" -> Missing["NotActive"], 
      "ConfiguredDatabases" -> Missing["NotActive"], "DatabaseSearchPath" -> 
      Missing["NotActive"], "SupportedDatabaseTypes" -> Missing["NotActive"], 
      "WebServicesVersion" -> Missing["NotActive"], "InstalledWebServices" -> 
      Missing["NotActive"]}, 
    "Parallel" -> {
     "KernelCount" -> 0, "RunningKernels" -> {}, "Debugging" -> True, 
      "AutomaticLaunching" -> Automatic, "FailedKernelRelaunching" -> True, 
      "EvaluationFailureRecovery" -> "Retry", "ProcessorCount" -> 4, 
      "KernelConfiguration" -> {
        SubKernels`LocalKernels`LocalMachine[
        4, SubKernels`LocalKernels`LowerPriority -> True]}, 
      "AvailableConnectionMethods" -> {
       "SubKernels`LocalKernels`", "LightweightGridClient`", 
        "ClusterIntegration`", "SubKernels`RemoteKernels`"}, 
      "LoadedConnectionMethods" -> {"SubKernels`LocalKernels`"}, 
      "DistributedDefinitions" -> {}, "ParallelPackages" -> 
      Missing["NotActive"], "SharedVariables" -> {}, "SharedFunctions" -> {}, 
      "ParallelToolsVersion" -> NumberForm[8., {3, 1}]}, 
    "Devices" -> {
     "ScreenInformation" -> {{
        "ScreenArea" -> {{0, 1600}, {0, 860}}, 
         "FullScreenArea" -> {{0, 1600}, {0, 900}}, "BitDepth" -> 32, 
         "Resolution" -> 96}}, 
      "GraphicsDevices" -> {
       "DirectX" -> {
         "Version" -> "9", "Driver" -> "nvd3dumx.dll", "Description" -> 
          "NVIDIA GeForce GTX 745", "DeviceName" -> "\\.\\DISPLAY1", 
          "VendorId" -> "4318", "DeviceId" -> "4994", "SubSysId" -> 
          "275058910", "Revision" -> "162", 
          "DeviceIdentifier" -> {"D7B71E3E-50C2-11CF-6866-68301FC2C735"}, 
          "DriverVersion" -> "10.18.13.5382", "Optimized 3D Transparency" -> 
          True}, "OpenGL" -> {
         "OnScreen" -> {
           "Vendor" -> "NVIDIA Corporation", "Renderer" -> 
            "GeForce GTX 745/PCIe/SSE2", "Version" -> "4.5.0 NVIDIA 353.82", 
            "Extensions" -> {
             "GL_AMD_multi_draw_indirect", 
              "GL_AMD_seamless_cubemap_per_texture", 
              "GL_ARB_arrays_of_arrays", "GL_ARB_base_instance", 
              "GL_ARB_bindless_texture", "GL_ARB_blend_func_extended", 
              "GL_ARB_buffer_storage", "GL_ARB_clear_buffer_object", 
              "GL_ARB_clear_texture", "GL_ARB_clip_control", 
              "GL_ARB_color_buffer_float", "GL_ARB_compatibility", 
              "GL_ARB_compressed_texture_pixel_storage", 
              "GL_ARB_conservative_depth", "GL_ARB_compute_shader", 
              "GL_ARB_compute_variable_group_size", 
              "GL_ARB_conditional_render_inverted", "GL_ARB_copy_buffer", 
              "GL_ARB_copy_image", "GL_ARB_cull_distance", 
              "GL_ARB_debug_output", "GL_ARB_depth_buffer_float", 
              "GL_ARB_depth_clamp", "GL_ARB_depth_texture", 
              "GL_ARB_derivative_control", "GL_ARB_direct_state_access", 
              "GL_ARB_draw_buffers", "GL_ARB_draw_buffers_blend", 
              "GL_ARB_draw_indirect", "GL_ARB_draw_elements_base_vertex", 
              "GL_ARB_draw_instanced", "GL_ARB_enhanced_layouts", 
              "GL_ARB_ES2_compatibility", "GL_ARB_ES3_compatibility", 
              "GL_ARB_ES3_1_compatibility", "GL_ARB_explicit_attrib_location",
               "GL_ARB_explicit_uniform_location", 
              "GL_ARB_fragment_coord_conventions", 
              "GL_ARB_fragment_layer_viewport", "GL_ARB_fragment_program", 
              "GL_ARB_fragment_program_shadow", "GL_ARB_fragment_shader", 
              "GL_ARB_framebuffer_no_attachments", 
              "GL_ARB_framebuffer_object", "GL_ARB_framebuffer_sRGB", 
              "GL_ARB_geometry_shader4", "GL_ARB_get_program_binary", 
              "GL_ARB_get_texture_sub_image", "GL_ARB_gpu_shader5", 
              "GL_ARB_gpu_shader_fp64", "GL_ARB_half_float_pixel", 
              "GL_ARB_half_float_vertex", "GL_ARB_imaging", 
              "GL_ARB_indirect_parameters", "GL_ARB_instanced_arrays", 
              "GL_ARB_internalformat_query", "GL_ARB_internalformat_query2", 
              "GL_NV_internalformat_sample_query", 
              "GL_ARB_invalidate_subdata", "GL_ARB_map_buffer_alignment", 
              "GL_ARB_map_buffer_range", "GL_ARB_multi_bind", 
              "GL_ARB_multi_draw_indirect", "GL_ARB_multisample", 
              "GL_ARB_multitexture", "GL_ARB_occlusion_query", 
              "GL_ARB_occlusion_query2", "GL_ARB_pipeline_statistics_query", 
              "GL_ARB_pixel_buffer_object", "GL_ARB_point_parameters", 
              "GL_ARB_point_sprite", "GL_ARB_program_interface_query", 
              "GL_ARB_provoking_vertex", 
              "GL_ARB_robust_buffer_access_behavior", "GL_ARB_robustness", 
              "GL_ARB_sample_shading", "GL_ARB_sampler_objects", 
              "GL_ARB_seamless_cube_map", 
              "GL_ARB_seamless_cubemap_per_texture", 
              "GL_ARB_separate_shader_objects", 
              "GL_ARB_shader_atomic_counters", "GL_ARB_shader_bit_encoding", 
              "GL_ARB_shader_draw_parameters", "GL_ARB_shader_group_vote", 
              "GL_ARB_shader_image_load_store", "GL_ARB_shader_image_size", 
              "GL_ARB_shader_objects", "GL_ARB_shader_precision", 
              "GL_ARB_query_buffer_object", 
              "GL_ARB_shader_storage_buffer_object", 
              "GL_ARB_shader_subroutine", 
              "GL_ARB_shader_texture_image_samples", 
              "GL_ARB_shader_texture_lod", "GL_ARB_shading_language_100", 
              "GL_ARB_shading_language_420pack", 
              "GL_ARB_shading_language_include", 
              "GL_ARB_shading_language_packing", "GL_ARB_shadow", 
              "GL_ARB_sparse_buffer", "GL_ARB_sparse_texture", 
              "GL_ARB_stencil_texturing", "GL_ARB_sync", 
              "GL_ARB_tessellation_shader", "GL_ARB_texture_barrier", 
              "GL_ARB_texture_border_clamp", "GL_ARB_texture_buffer_object", 
              "GL_ARB_texture_buffer_object_rgb32", 
              "GL_ARB_texture_buffer_range", "GL_ARB_texture_compression", 
              "GL_ARB_texture_compression_bptc", 
              "GL_ARB_texture_compression_rgtc", "GL_ARB_texture_cube_map", 
              "GL_ARB_texture_cube_map_array", "GL_ARB_texture_env_add", 
              "GL_ARB_texture_env_combine", "GL_ARB_texture_env_crossbar", 
              "GL_ARB_texture_env_dot3", "GL_ARB_texture_float", 
              "GL_ARB_texture_gather", "GL_ARB_texture_mirror_clamp_to_edge", 
              "GL_ARB_texture_mirrored_repeat", "GL_ARB_texture_multisample", 
              "GL_ARB_texture_non_power_of_two", 
              "GL_ARB_texture_query_levels", "GL_ARB_texture_query_lod", 
              "GL_ARB_texture_rectangle", "GL_ARB_texture_rg", 
              "GL_ARB_texture_rgb10_a2ui", "GL_ARB_texture_stencil8", 
              "GL_ARB_texture_storage", "GL_ARB_texture_storage_multisample", 
              "GL_ARB_texture_swizzle", "GL_ARB_texture_view", 
              "GL_ARB_timer_query", "GL_ARB_transform_feedback2", 
              "GL_ARB_transform_feedback3", 
              "GL_ARB_transform_feedback_instanced", 
              "GL_ARB_transform_feedback_overflow_query", 
              "GL_ARB_transpose_matrix", "GL_ARB_uniform_buffer_object", 
              "GL_ARB_vertex_array_bgra", "GL_ARB_vertex_array_object", 
              "GL_ARB_vertex_attrib_64bit", "GL_ARB_vertex_attrib_binding", 
              "GL_ARB_vertex_buffer_object", "GL_ARB_vertex_program", 
              "GL_ARB_vertex_shader", "GL_ARB_vertex_type_10f_11f_11f_rev", 
              "GL_ARB_vertex_type_2_10_10_10_rev", "GL_ARB_viewport_array", 
              "GL_ARB_window_pos", "GL_ATI_draw_buffers", 
              "GL_ATI_texture_float", "GL_ATI_texture_mirror_once", 
              "GL_S3_s3tc", "GL_EXT_texture_env_add", "GL_EXT_abgr", 
              "GL_EXT_bgra", "GL_EXT_bindable_uniform", "GL_EXT_blend_color", 
              "GL_EXT_blend_equation_separate", "GL_EXT_blend_func_separate", 
              "GL_EXT_blend_minmax", "GL_EXT_blend_subtract", 
              "GL_EXT_compiled_vertex_array", "GL_EXT_Cg_shader", 
              "GL_EXT_depth_bounds_test", "GL_EXT_direct_state_access", 
              "GL_EXT_draw_buffers2", "GL_EXT_draw_instanced", 
              "GL_EXT_draw_range_elements", "GL_EXT_fog_coord", 
              "GL_EXT_framebuffer_blit", "GL_EXT_framebuffer_multisample", 
              "GL_EXTX_framebuffer_mixed_formats", 
              "GL_EXT_framebuffer_multisample_blit_scaled", 
              "GL_EXT_framebuffer_object", "GL_EXT_framebuffer_sRGB", 
              "GL_EXT_geometry_shader4", "GL_EXT_gpu_program_parameters", 
              "GL_EXT_gpu_shader4", "GL_EXT_multi_draw_arrays", 
              "GL_EXT_packed_depth_stencil", "GL_EXT_packed_float", 
              "GL_EXT_packed_pixels", "GL_EXT_pixel_buffer_object", 
              "GL_EXT_point_parameters", "GL_EXT_polygon_offset_clamp", 
              "GL_EXT_provoking_vertex", "GL_EXT_rescale_normal", 
              "GL_EXT_secondary_color", "GL_EXT_separate_shader_objects", 
              "GL_EXT_separate_specular_color", 
              "GL_EXT_shader_image_load_formatted", 
              "GL_EXT_shader_image_load_store", "GL_EXT_shader_integer_mix", 
              "GL_EXT_shadow_funcs", "GL_EXT_stencil_two_side", 
              "GL_EXT_stencil_wrap", "GL_EXT_texture3D", 
              "GL_EXT_texture_array", "GL_EXT_texture_buffer_object", 
              "GL_EXT_texture_compression_dxt1", 
              "GL_EXT_texture_compression_latc", 
              "GL_EXT_texture_compression_rgtc", 
              "GL_EXT_texture_compression_s3tc", "GL_EXT_texture_cube_map", 
              "GL_EXT_texture_edge_clamp", "GL_EXT_texture_env_combine", 
              "GL_EXT_texture_env_dot3", "GL_EXT_texture_filter_anisotropic", 
              "GL_EXT_texture_integer", "GL_EXT_texture_lod", 
              "GL_EXT_texture_lod_bias", "GL_EXT_texture_mirror_clamp", 
              "GL_EXT_texture_object", "GL_EXT_texture_shared_exponent", 
              "GL_EXT_texture_sRGB", "GL_EXT_texture_sRGB_decode", 
              "GL_EXT_texture_storage", "GL_EXT_texture_swizzle", 
              "GL_EXT_timer_query", "GL_EXT_transform_feedback2", 
              "GL_EXT_vertex_array", "GL_EXT_vertex_array_bgra", 
              "GL_EXT_vertex_attrib_64bit", "GL_EXT_import_sync_object", 
              "GL_IBM_rasterpos_clip", "GL_IBM_texture_mirrored_repeat", 
              "GL_KHR_context_flush_control", "GL_KHR_debug", 
              "GL_KHR_robust_buffer_access_behavior", "GL_KHR_robustness", 
              "GL_KTX_buffer_region", "GL_NV_bindless_multi_draw_indirect", 
              "GL_NV_bindless_multi_draw_indirect_count", 
              "GL_NV_bindless_texture", "GL_NV_blend_equation_advanced", 
              "GL_NV_blend_equation_advanced_coherent", "GL_NV_blend_square", 
              "GL_NV_command_list", "GL_NV_compute_program5", 
              "GL_NV_conditional_render", "GL_NV_copy_depth_to_color", 
              "GL_NV_copy_image", "GL_NV_depth_buffer_float", 
              "GL_NV_depth_clamp", "GL_NV_draw_texture", 
              "GL_NV_ES1_1_compatibility", "GL_NV_ES3_1_compatibility", 
              "GL_NV_explicit_multisample", "GL_NV_fence", 
              "GL_NV_float_buffer", "GL_NV_fog_distance", 
              "GL_NV_fragment_program", "GL_NV_fragment_program_option", 
              "GL_NV_fragment_program2", 
              "GL_NV_framebuffer_multisample_coverage", 
              "GL_NV_geometry_shader4", "GL_NV_gpu_program4", 
              "GL_NV_gpu_program4_1", "GL_NV_gpu_program5", 
              "GL_NV_gpu_program5_mem_extended", "GL_NV_gpu_program_fp64", 
              "GL_NV_gpu_shader5", "GL_NV_half_float", 
              "GL_NV_light_max_exponent", "GL_NV_multisample_coverage", 
              "GL_NV_multisample_filter_hint", "GL_NV_occlusion_query", 
              "GL_NV_packed_depth_stencil", "GL_NV_parameter_buffer_object", 
              "GL_NV_parameter_buffer_object2", "GL_NV_path_rendering", 
              "GL_NV_pixel_data_range", "GL_NV_point_sprite", 
              "GL_NV_primitive_restart", "GL_NV_register_combiners", 
              "GL_NV_register_combiners2", "GL_NV_shader_atomic_counters", 
              "GL_NV_shader_atomic_float", "GL_NV_shader_atomic_int64", 
              "GL_NV_shader_buffer_load", 
              "GL_NV_shader_storage_buffer_object", "GL_NV_texgen_reflection",
               "GL_NV_texture_barrier", "GL_NV_texture_compression_vtc", 
              "GL_NV_texture_env_combine4", "GL_NV_texture_multisample", 
              "GL_NV_texture_rectangle", "GL_NV_texture_shader", 
              "GL_NV_texture_shader2", "GL_NV_texture_shader3", 
              "GL_NV_transform_feedback", "GL_NV_transform_feedback2", 
              "GL_NV_uniform_buffer_unified_memory", 
              "GL_NV_vertex_array_range", "GL_NV_vertex_array_range2", 
              "GL_NV_vertex_attrib_integer_64bit", 
              "GL_NV_vertex_buffer_unified_memory", "GL_NV_vertex_program", 
              "GL_NV_vertex_program1_1", "GL_NV_vertex_program2", 
              "GL_NV_vertex_program2_option", "GL_NV_vertex_program3", 
              "GL_NVX_conditional_render", "GL_NVX_gpu_memory_info", 
              "GL_NVX_nvenc_interop", "GL_NV_shader_thread_group", 
              "GL_NV_shader_thread_shuffle", "GL_KHR_blend_equation_advanced",
               "GL_KHR_blend_equation_advanced_coherent", 
              "GL_SGIS_generate_mipmap", "GL_SGIS_texture_lod", 
              "GL_SGIX_depth_texture", "GL_SGIX_shadow", "GL_SUN_slice_accum",
               "GL_WIN_swap_hint", "WGL_EXT_swap_control"}, 
            "Optimized 3D Transparency" -> True, "Max Samples" -> 32}, 
          "OffScreen" -> {
           "Vendor" -> "NVIDIA Corporation", "Renderer" -> 
            "GeForce GTX 745/PCIe/SSE2", "Version" -> "4.5.0 NVIDIA 353.82", 
            "Extensions" -> {
             "GL_AMD_multi_draw_indirect", 
              "GL_AMD_seamless_cubemap_per_texture", 
              "GL_ARB_arrays_of_arrays", "GL_ARB_base_instance", 
              "GL_ARB_bindless_texture", "GL_ARB_blend_func_extended", 
              "GL_ARB_buffer_storage", "GL_ARB_clear_buffer_object", 
              "GL_ARB_clear_texture", "GL_ARB_clip_control", 
              "GL_ARB_color_buffer_float", "GL_ARB_compatibility", 
              "GL_ARB_compressed_texture_pixel_storage", 
              "GL_ARB_conservative_depth", "GL_ARB_compute_shader", 
              "GL_ARB_compute_variable_group_size", 
              "GL_ARB_conditional_render_inverted", "GL_ARB_copy_buffer", 
              "GL_ARB_copy_image", "GL_ARB_cull_distance", 
              "GL_ARB_debug_output", "GL_ARB_depth_buffer_float", 
              "GL_ARB_depth_clamp", "GL_ARB_depth_texture", 
              "GL_ARB_derivative_control", "GL_ARB_direct_state_access", 
              "GL_ARB_draw_buffers", "GL_ARB_draw_buffers_blend", 
              "GL_ARB_draw_indirect", "GL_ARB_draw_elements_base_vertex", 
              "GL_ARB_draw_instanced", "GL_ARB_enhanced_layouts", 
              "GL_ARB_ES2_compatibility", "GL_ARB_ES3_compatibility", 
              "GL_ARB_ES3_1_compatibility", "GL_ARB_explicit_attrib_location",
               "GL_ARB_explicit_uniform_location", 
              "GL_ARB_fragment_coord_conventions", 
              "GL_ARB_fragment_layer_viewport", "GL_ARB_fragment_program", 
              "GL_ARB_fragment_program_shadow", "GL_ARB_fragment_shader", 
              "GL_ARB_framebuffer_no_attachments", 
              "GL_ARB_framebuffer_object", "GL_ARB_framebuffer_sRGB", 
              "GL_ARB_geometry_shader4", "GL_ARB_get_program_binary", 
              "GL_ARB_get_texture_sub_image", "GL_ARB_gpu_shader5", 
              "GL_ARB_gpu_shader_fp64", "GL_ARB_half_float_pixel", 
              "GL_ARB_half_float_vertex", "GL_ARB_imaging", 
              "GL_ARB_indirect_parameters", "GL_ARB_instanced_arrays", 
              "GL_ARB_internalformat_query", "GL_ARB_internalformat_query2", 
              "GL_NV_internalformat_sample_query", 
              "GL_ARB_invalidate_subdata", "GL_ARB_map_buffer_alignment", 
              "GL_ARB_map_buffer_range", "GL_ARB_multi_bind", 
              "GL_ARB_multi_draw_indirect", "GL_ARB_multisample", 
              "GL_ARB_multitexture", "GL_ARB_occlusion_query", 
              "GL_ARB_occlusion_query2", "GL_ARB_pipeline_statistics_query", 
              "GL_ARB_pixel_buffer_object", "GL_ARB_point_parameters", 
              "GL_ARB_point_sprite", "GL_ARB_program_interface_query", 
              "GL_ARB_provoking_vertex", 
              "GL_ARB_robust_buffer_access_behavior", "GL_ARB_robustness", 
              "GL_ARB_sample_shading", "GL_ARB_sampler_objects", 
              "GL_ARB_seamless_cube_map", 
              "GL_ARB_seamless_cubemap_per_texture", 
              "GL_ARB_separate_shader_objects", 
              "GL_ARB_shader_atomic_counters", "GL_ARB_shader_bit_encoding", 
              "GL_ARB_shader_draw_parameters", "GL_ARB_shader_group_vote", 
              "GL_ARB_shader_image_load_store", "GL_ARB_shader_image_size", 
              "GL_ARB_shader_objects", "GL_ARB_shader_precision", 
              "GL_ARB_query_buffer_object", 
              "GL_ARB_shader_storage_buffer_object", 
              "GL_ARB_shader_subroutine", 
              "GL_ARB_shader_texture_image_samples", 
              "GL_ARB_shader_texture_lod", "GL_ARB_shading_language_100", 
              "GL_ARB_shading_language_420pack", 
              "GL_ARB_shading_language_include", 
              "GL_ARB_shading_language_packing", "GL_ARB_shadow", 
              "GL_ARB_sparse_buffer", "GL_ARB_sparse_texture", 
              "GL_ARB_stencil_texturing", "GL_ARB_sync", 
              "GL_ARB_tessellation_shader", "GL_ARB_texture_barrier", 
              "GL_ARB_texture_border_clamp", "GL_ARB_texture_buffer_object", 
              "GL_ARB_texture_buffer_object_rgb32", 
              "GL_ARB_texture_buffer_range", "GL_ARB_texture_compression", 
              "GL_ARB_texture_compression_bptc", 
              "GL_ARB_texture_compression_rgtc", "GL_ARB_texture_cube_map", 
              "GL_ARB_texture_cube_map_array", "GL_ARB_texture_env_add", 
              "GL_ARB_texture_env_combine", "GL_ARB_texture_env_crossbar", 
              "GL_ARB_texture_env_dot3", "GL_ARB_texture_float", 
              "GL_ARB_texture_gather", "GL_ARB_texture_mirror_clamp_to_edge", 
              "GL_ARB_texture_mirrored_repeat", "GL_ARB_texture_multisample", 
              "GL_ARB_texture_non_power_of_two", 
              "GL_ARB_texture_query_levels", "GL_ARB_texture_query_lod", 
              "GL_ARB_texture_rectangle", "GL_ARB_texture_rg", 
              "GL_ARB_texture_rgb10_a2ui", "GL_ARB_texture_stencil8", 
              "GL_ARB_texture_storage", "GL_ARB_texture_storage_multisample", 
              "GL_ARB_texture_swizzle", "GL_ARB_texture_view", 
              "GL_ARB_timer_query", "GL_ARB_transform_feedback2", 
              "GL_ARB_transform_feedback3", 
              "GL_ARB_transform_feedback_instanced", 
              "GL_ARB_transform_feedback_overflow_query", 
              "GL_ARB_transpose_matrix", "GL_ARB_uniform_buffer_object", 
              "GL_ARB_vertex_array_bgra", "GL_ARB_vertex_array_object", 
              "GL_ARB_vertex_attrib_64bit", "GL_ARB_vertex_attrib_binding", 
              "GL_ARB_vertex_buffer_object", "GL_ARB_vertex_program", 
              "GL_ARB_vertex_shader", "GL_ARB_vertex_type_10f_11f_11f_rev", 
              "GL_ARB_vertex_type_2_10_10_10_rev", "GL_ARB_viewport_array", 
              "GL_ARB_window_pos", "GL_ATI_draw_buffers", 
              "GL_ATI_texture_float", "GL_ATI_texture_mirror_once", 
              "GL_S3_s3tc", "GL_EXT_texture_env_add", "GL_EXT_abgr", 
              "GL_EXT_bgra", "GL_EXT_bindable_uniform", "GL_EXT_blend_color", 
              "GL_EXT_blend_equation_separate", "GL_EXT_blend_func_separate", 
              "GL_EXT_blend_minmax", "GL_EXT_blend_subtract", 
              "GL_EXT_compiled_vertex_array", "GL_EXT_Cg_shader", 
              "GL_EXT_depth_bounds_test", "GL_EXT_direct_state_access", 
              "GL_EXT_draw_buffers2", "GL_EXT_draw_instanced", 
              "GL_EXT_draw_range_elements", "GL_EXT_fog_coord", 
              "GL_EXT_framebuffer_blit", "GL_EXT_framebuffer_multisample", 
              "GL_EXTX_framebuffer_mixed_formats", 
              "GL_EXT_framebuffer_multisample_blit_scaled", 
              "GL_EXT_framebuffer_object", "GL_EXT_framebuffer_sRGB", 
              "GL_EXT_geometry_shader4", "GL_EXT_gpu_program_parameters", 
              "GL_EXT_gpu_shader4", "GL_EXT_multi_draw_arrays", 
              "GL_EXT_packed_depth_stencil", "GL_EXT_packed_float", 
              "GL_EXT_packed_pixels", "GL_EXT_pixel_buffer_object", 
              "GL_EXT_point_parameters", "GL_EXT_polygon_offset_clamp", 
              "GL_EXT_provoking_vertex", "GL_EXT_rescale_normal", 
              "GL_EXT_secondary_color", "GL_EXT_separate_shader_objects", 
              "GL_EXT_separate_specular_color", 
              "GL_EXT_shader_image_load_formatted", 
              "GL_EXT_shader_image_load_store", "GL_EXT_shader_integer_mix", 
              "GL_EXT_shadow_funcs", "GL_EXT_stencil_two_side", 
              "GL_EXT_stencil_wrap", "GL_EXT_texture3D", 
              "GL_EXT_texture_array", "GL_EXT_texture_buffer_object", 
              "GL_EXT_texture_compression_dxt1", 
              "GL_EXT_texture_compression_latc", 
              "GL_EXT_texture_compression_rgtc", 
              "GL_EXT_texture_compression_s3tc", "GL_EXT_texture_cube_map", 
              "GL_EXT_texture_edge_clamp", "GL_EXT_texture_env_combine", 
              "GL_EXT_texture_env_dot3", "GL_EXT_texture_filter_anisotropic", 
              "GL_EXT_texture_integer", "GL_EXT_texture_lod", 
              "GL_EXT_texture_lod_bias", "GL_EXT_texture_mirror_clamp", 
              "GL_EXT_texture_object", "GL_EXT_texture_shared_exponent", 
              "GL_EXT_texture_sRGB", "GL_EXT_texture_sRGB_decode", 
              "GL_EXT_texture_storage", "GL_EXT_texture_swizzle", 
              "GL_EXT_timer_query", "GL_EXT_transform_feedback2", 
              "GL_EXT_vertex_array", "GL_EXT_vertex_array_bgra", 
              "GL_EXT_vertex_attrib_64bit", "GL_EXT_import_sync_object", 
              "GL_IBM_rasterpos_clip", "GL_IBM_texture_mirrored_repeat", 
              "GL_KHR_context_flush_control", "GL_KHR_debug", 
              "GL_KHR_robust_buffer_access_behavior", "GL_KHR_robustness", 
              "GL_KTX_buffer_region", "GL_NV_bindless_multi_draw_indirect", 
              "GL_NV_bindless_multi_draw_indirect_count", 
              "GL_NV_bindless_texture", "GL_NV_blend_equation_advanced", 
              "GL_NV_blend_equation_advanced_coherent", "GL_NV_blend_square", 
              "GL_NV_command_list", "GL_NV_compute_program5", 
              "GL_NV_conditional_render", "GL_NV_copy_depth_to_color", 
              "GL_NV_copy_image", "GL_NV_depth_buffer_float", 
              "GL_NV_depth_clamp", "GL_NV_draw_texture", 
              "GL_NV_ES1_1_compatibility", "GL_NV_ES3_1_compatibility", 
              "GL_NV_explicit_multisample", "GL_NV_fence", 
              "GL_NV_float_buffer", "GL_NV_fog_distance", 
              "GL_NV_fragment_program", "GL_NV_fragment_program_option", 
              "GL_NV_fragment_program2", 
              "GL_NV_framebuffer_multisample_coverage", 
              "GL_NV_geometry_shader4", "GL_NV_gpu_program4", 
              "GL_NV_gpu_program4_1", "GL_NV_gpu_program5", 
              "GL_NV_gpu_program5_mem_extended", "GL_NV_gpu_program_fp64", 
              "GL_NV_gpu_shader5", "GL_NV_half_float", 
              "GL_NV_light_max_exponent", "GL_NV_multisample_coverage", 
              "GL_NV_multisample_filter_hint", "GL_NV_occlusion_query", 
              "GL_NV_packed_depth_stencil", "GL_NV_parameter_buffer_object", 
              "GL_NV_parameter_buffer_object2", "GL_NV_path_rendering", 
              "GL_NV_pixel_data_range", "GL_NV_point_sprite", 
              "GL_NV_primitive_restart", "GL_NV_register_combiners", 
              "GL_NV_register_combiners2", "GL_NV_shader_atomic_counters", 
              "GL_NV_shader_atomic_float", "GL_NV_shader_atomic_int64", 
              "GL_NV_shader_buffer_load", 
              "GL_NV_shader_storage_buffer_object", "GL_NV_texgen_reflection",
               "GL_NV_texture_barrier", "GL_NV_texture_compression_vtc", 
              "GL_NV_texture_env_combine4", "GL_NV_texture_multisample", 
              "GL_NV_texture_rectangle", "GL_NV_texture_shader", 
              "GL_NV_texture_shader2", "GL_NV_texture_shader3", 
              "GL_NV_transform_feedback", "GL_NV_transform_feedback2", 
              "GL_NV_uniform_buffer_unified_memory", 
              "GL_NV_vertex_array_range", "GL_NV_vertex_array_range2", 
              "GL_NV_vertex_attrib_integer_64bit", 
              "GL_NV_vertex_buffer_unified_memory", "GL_NV_vertex_program", 
              "GL_NV_vertex_program1_1", "GL_NV_vertex_program2", 
              "GL_NV_vertex_program2_option", "GL_NV_vertex_program3", 
              "GL_NVX_conditional_render", "GL_NVX_gpu_memory_info", 
              "GL_NVX_nvenc_interop", "GL_NV_shader_thread_group", 
              "GL_NV_shader_thread_shuffle", "GL_KHR_blend_equation_advanced",
               "GL_KHR_blend_equation_advanced_coherent", 
              "GL_SGIS_generate_mipmap", "GL_SGIS_texture_lod", 
              "GL_SGIX_depth_texture", "GL_SGIX_shadow", "GL_SUN_slice_accum",
               "GL_WIN_swap_hint", "WGL_EXT_swap_control"}, 
            "Optimized 3D Transparency" -> True, "Max Samples" -> 32}}, 
        "Mesa" -> {
         "Vendor" -> "VMware, Inc.", "Renderer" -> 
          "Gallium 0.4 on llvmpipe (LLVM 3.6, 256 bits)", "Version" -> 
          "3.0 Mesa 10.6.8 (git-fbfd450)", 
          "Extensions" -> {
           "GL_ARB_multisample", "GL_EXT_abgr", "GL_EXT_bgra", 
            "GL_EXT_blend_color", "GL_EXT_blend_minmax", 
            "GL_EXT_blend_subtract", "GL_EXT_copy_texture", 
            "GL_EXT_polygon_offset", "GL_EXT_subtexture", 
            "GL_EXT_texture_object", "GL_EXT_vertex_array", 
            "GL_EXT_compiled_vertex_array", "GL_EXT_texture", 
            "GL_EXT_texture3D", "GL_IBM_rasterpos_clip", 
            "GL_ARB_point_parameters", "GL_EXT_draw_range_elements", 
            "GL_EXT_packed_pixels", "GL_EXT_point_parameters", 
            "GL_EXT_rescale_normal", "GL_EXT_separate_specular_color", 
            "GL_EXT_texture_edge_clamp", "GL_SGIS_generate_mipmap", 
            "GL_SGIS_texture_border_clamp", "GL_SGIS_texture_edge_clamp", 
            "GL_SGIS_texture_lod", "GL_ARB_framebuffer_sRGB", 
            "GL_ARB_multitexture", "GL_EXT_framebuffer_sRGB", 
            "GL_IBM_multimode_draw_arrays", "GL_IBM_texture_mirrored_repeat", 
            "GL_ARB_texture_cube_map", "GL_ARB_texture_env_add", 
            "GL_ARB_transpose_matrix", "GL_EXT_blend_func_separate", 
            "GL_EXT_fog_coord", "GL_EXT_multi_draw_arrays", 
            "GL_EXT_secondary_color", "GL_EXT_texture_env_add", 
            "GL_EXT_texture_lod_bias", "GL_INGR_blend_func_separate", 
            "GL_NV_blend_square", "GL_NV_light_max_exponent", 
            "GL_NV_texgen_reflection", "GL_NV_texture_env_combine4", 
            "GL_SUN_multi_draw_arrays", "GL_ARB_texture_border_clamp", 
            "GL_ARB_texture_compression", "GL_EXT_framebuffer_object", 
            "GL_EXT_texture_env_combine", "GL_EXT_texture_env_dot3", 
            "GL_MESA_window_pos", "GL_NV_packed_depth_stencil", 
            "GL_NV_texture_rectangle", "GL_ARB_depth_texture", 
            "GL_ARB_occlusion_query", "GL_ARB_shadow", 
            "GL_ARB_texture_env_combine", "GL_ARB_texture_env_crossbar", 
            "GL_ARB_texture_env_dot3", "GL_ARB_texture_mirrored_repeat", 
            "GL_ARB_window_pos", "GL_EXT_stencil_two_side", 
            "GL_EXT_texture_cube_map", "GL_NV_depth_clamp", 
            "GL_NV_fog_distance", "GL_APPLE_packed_pixels", 
            "GL_APPLE_vertex_array_object", "GL_ARB_draw_buffers", 
            "GL_ARB_fragment_program", "GL_ARB_fragment_shader", 
            "GL_ARB_shader_objects", "GL_ARB_vertex_program", 
            "GL_ARB_vertex_shader", "GL_ATI_draw_buffers", 
            "GL_ATI_texture_env_combine3", "GL_ATI_texture_float", 
            "GL_EXT_shadow_funcs", "GL_EXT_stencil_wrap", 
            "GL_MESA_pack_invert", "GL_MESA_ycbcr_texture", 
            "GL_NV_primitive_restart", "GL_ARB_depth_clamp", 
            "GL_ARB_fragment_program_shadow", "GL_ARB_half_float_pixel", 
            "GL_ARB_occlusion_query2", "GL_ARB_point_sprite", 
            "GL_ARB_shading_language_100", "GL_ARB_sync", 
            "GL_ARB_texture_non_power_of_two", "GL_ARB_vertex_buffer_object", 
            "GL_ATI_blend_equation_separate", 
            "GL_EXT_blend_equation_separate", "GL_OES_read_format", 
            "GL_ARB_color_buffer_float", "GL_ARB_pixel_buffer_object", 
            "GL_ARB_texture_compression_rgtc", "GL_ARB_texture_float", 
            "GL_ARB_texture_rectangle", "GL_ATI_texture_compression_3dc", 
            "GL_EXT_packed_float", "GL_EXT_pixel_buffer_object", 
            "GL_EXT_texture_compression_rgtc", "GL_EXT_texture_mirror_clamp", 
            "GL_EXT_texture_rectangle", "GL_EXT_texture_sRGB", 
            "GL_EXT_texture_shared_exponent", "GL_ARB_framebuffer_object", 
            "GL_EXT_framebuffer_blit", "GL_EXT_framebuffer_multisample", 
            "GL_EXT_packed_depth_stencil", "GL_ARB_vertex_array_object", 
            "GL_ATI_separate_stencil", "GL_ATI_texture_mirror_once", 
            "GL_EXT_draw_buffers2", "GL_EXT_draw_instanced", 
            "GL_EXT_gpu_program_parameters", "GL_EXT_texture_array", 
            "GL_EXT_texture_compression_latc", "GL_EXT_texture_integer", 
            "GL_EXT_texture_sRGB_decode", "GL_EXT_timer_query", 
            "GL_OES_EGL_image", "GL_ARB_copy_buffer", 
            "GL_ARB_depth_buffer_float", "GL_ARB_draw_instanced", 
            "GL_ARB_half_float_vertex", "GL_ARB_instanced_arrays", 
            "GL_ARB_map_buffer_range", "GL_ARB_texture_rg", 
            "GL_ARB_texture_swizzle", "GL_ARB_vertex_array_bgra", 
            "GL_EXT_texture_swizzle", "GL_EXT_vertex_array_bgra", 
            "GL_NV_conditional_render", "GL_AMD_conservative_depth", 
            "GL_AMD_draw_buffers_blend", 
            "GL_AMD_seamless_cubemap_per_texture", "GL_ARB_ES2_compatibility",
             "GL_ARB_blend_func_extended", "GL_ARB_debug_output", 
            "GL_ARB_draw_buffers_blend", "GL_ARB_draw_elements_base_vertex", 
            "GL_ARB_explicit_attrib_location", 
            "GL_ARB_fragment_coord_conventions", "GL_ARB_provoking_vertex", 
            "GL_ARB_sampler_objects", "GL_ARB_seamless_cube_map", 
            "GL_ARB_shader_texture_lod", "GL_ARB_texture_cube_map_array", 
            "GL_ARB_texture_gather", "GL_ARB_texture_multisample", 
            "GL_ARB_texture_rgb10_a2ui", "GL_ARB_uniform_buffer_object", 
            "GL_ARB_vertex_type_2_10_10_10_rev", "GL_EXT_provoking_vertex", 
            "GL_EXT_texture_snorm", "GL_MESA_texture_signed_rgba", 
            "GL_ARB_get_program_binary", "GL_ARB_robustness", 
            "GL_ARB_separate_shader_objects", "GL_ARB_shader_bit_encoding", 
            "GL_ARB_timer_query", "GL_ARB_transform_feedback2", 
            "GL_ARB_transform_feedback3", "GL_ARB_base_instance", 
            "GL_ARB_compressed_texture_pixel_storage", 
            "GL_ARB_conservative_depth", "GL_ARB_internalformat_query", 
            "GL_ARB_map_buffer_alignment", "GL_ARB_shading_language_420pack", 
            "GL_ARB_shading_language_packing", "GL_ARB_texture_storage", 
            "GL_ARB_transform_feedback_instanced", 
            "GL_EXT_framebuffer_multisample_blit_scaled", 
            "GL_EXT_transform_feedback", "GL_AMD_shader_trinary_minmax", 
            "GL_ARB_ES3_compatibility", "GL_ARB_clear_buffer_object", 
            "GL_ARB_explicit_uniform_location", "GL_ARB_invalidate_subdata", 
            "GL_ARB_program_interface_query", "GL_ARB_stencil_texturing", 
            "GL_ARB_texture_query_levels", 
            "GL_ARB_texture_storage_multisample", "GL_ARB_texture_view", 
            "GL_ARB_vertex_attrib_binding", "GL_KHR_debug", 
            "GL_ARB_buffer_storage", "GL_ARB_multi_bind", 
            "GL_ARB_seamless_cubemap_per_texture", 
            "GL_ARB_texture_mirror_clamp_to_edge", "GL_ARB_texture_stencil8", 
            "GL_ARB_vertex_type_10f_11f_11f_rev", "GL_EXT_shader_integer_mix",
             "GL_ARB_clip_control", "GL_ARB_conditional_render_inverted", 
            "GL_EXT_polygon_offset_clamp", "GL_KHR_context_flush_control"}, 
          "Optimized 3D Transparency" -> True, "Max Samples" -> 0}}, 
      "ControllerDevices" -> {
       "USB Receiver" -> {{}, {
          "SystemSleep Button" -> False, "SystemPowerDown Button" -> False, 
           "SystemWakeUp Button" -> False}, {
          "Manufacturer ID" -> 1133, "Product Name" -> "USB Receiver", 
           "Product ID" -> 50475, "Controller Type" -> "External Controller", 
           "Device Type" -> "Windows DirectInput Device", "HID Usage Page" -> 
           "GenericDesktop", "HID Usage" -> "SystemControl"}, {
          "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> "Button 11", "JB1" -> 
           "Button 11", "JB2" -> "Button 12", "JB3" -> None, "TLB" -> 
           "Button 5", "TRB" -> "Button 6", "BLB" -> "Button 7", "BRB" -> 
           "Button 8", "X" -> "X Axis", "Y" -> -"Y Axis", "Z" -> "Z Axis", 
           "X1" -> "X Axis", "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> 
           "Z Rotation", "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
           "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> None, 
           "X4" -> Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y4" -> 
           Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X5" -> 
           Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y5" -> 
           Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X6" -> 
           Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "B1" -> 
           "Button 1", "B2" -> "Button 2", "B3" -> "Button 3", "B4" -> 
           "Button 4", "B5" -> "Button 5", "B6" -> "Button 6", "B7" -> 
           "Button 7", "B8" -> "Button 8", "B9" -> "Button 9", "B10" -> 
           "Button 10", "B11" -> "Button 11", "B12" -> "Button 12", 
           "DefaultAbsolute" -> False}}, 
        "USB Receiver" -> {{}, {}, {
          "Manufacturer ID" -> 1133, "Product Name" -> "USB Receiver", 
           "Product ID" -> 50475, "Controller Type" -> "External Controller", 
           "Device Type" -> "Windows DirectInput Device", "HID Usage Page" -> 
           "Unknown:65468", "HID Usage" -> "Unknown:65468:136"}, {
          "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> "Button 11", "JB1" -> 
           "Button 11", "JB2" -> "Button 12", "JB3" -> None, "TLB" -> 
           "Button 5", "TRB" -> "Button 6", "BLB" -> "Button 7", "BRB" -> 
           "Button 8", "X" -> "X Axis", "Y" -> -"Y Axis", "Z" -> "Z Axis", 
           "X1" -> "X Axis", "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> 
           "Z Rotation", "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
           "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> None, 
           "X4" -> Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y4" -> 
           Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X5" -> 
           Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y5" -> 
           Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X6" -> 
           Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "B1" -> 
           "Button 1", "B2" -> "Button 2", "B3" -> "Button 3", "B4" -> 
           "Button 4", "B5" -> "Button 5", "B6" -> "Button 6", "B7" -> 
           "Button 7", "B8" -> "Button 8", "B9" -> "Button 9", "B10" -> 
           "Button 10", "B11" -> "Button 11", "B12" -> "Button 12", 
           "DefaultAbsolute" -> False}}, 
        "USB Receiver" -> {{}, {}, {
          "Manufacturer ID" -> 1133, "Product Name" -> "USB Receiver", 
           "Product ID" -> 50475, "Controller Type" -> "External Controller", 
           "Device Type" -> "Windows DirectInput Device", "HID Usage Page" -> 
           "Unknown:65280", "HID Usage" -> "Unknown:65280:1"}, {
          "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> "Button 11", "JB1" -> 
           "Button 11", "JB2" -> "Button 12", "JB3" -> None, "TLB" -> 
           "Button 5", "TRB" -> "Button 6", "BLB" -> "Button 7", "BRB" -> 
           "Button 8", "X" -> "X Axis", "Y" -> -"Y Axis", "Z" -> "Z Axis", 
           "X1" -> "X Axis", "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> 
           "Z Rotation", "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
           "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> None, 
           "X4" -> Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y4" -> 
           Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X5" -> 
           Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y5" -> 
           Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X6" -> 
           Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "B1" -> 
           "Button 1", "B2" -> "Button 2", "B3" -> "Button 3", "B4" -> 
           "Button 4", "B5" -> "Button 5", "B6" -> "Button 6", "B7" -> 
           "Button 7", "B8" -> "Button 8", "B9" -> "Button 9", "B10" -> 
           "Button 10", "B11" -> "Button 11", "B12" -> "Button 12", 
           "DefaultAbsolute" -> False}}, 
        "USB Receiver" -> {{}, {}, {
          "Manufacturer ID" -> 1133, "Product Name" -> "USB Receiver", 
           "Product ID" -> 50475, "Controller Type" -> "External Controller", 
           "Device Type" -> "Windows DirectInput Device", "HID Usage Page" -> 
           "Unknown:65280", "HID Usage" -> "Unknown:65280:2"}, {
          "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> "Button 11", "JB1" -> 
           "Button 11", "JB2" -> "Button 12", "JB3" -> None, "TLB" -> 
           "Button 5", "TRB" -> "Button 6", "BLB" -> "Button 7", "BRB" -> 
           "Button 8", "X" -> "X Axis", "Y" -> -"Y Axis", "Z" -> "Z Axis", 
           "X1" -> "X Axis", "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> 
           "Z Rotation", "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
           "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> None, 
           "X4" -> Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y4" -> 
           Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X5" -> 
           Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y5" -> 
           Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X6" -> 
           Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "B1" -> 
           "Button 1", "B2" -> "Button 2", "B3" -> "Button 3", "B4" -> 
           "Button 4", "B5" -> "Button 5", "B6" -> "Button 6", "B7" -> 
           "Button 7", "B8" -> "Button 8", "B9" -> "Button 9", "B10" -> 
           "Button 10", "B11" -> "Button 11", "B12" -> "Button 12", 
           "DefaultAbsolute" -> False}}, 
        "USB Receiver" -> {{}, {}, {
          "Manufacturer ID" -> 1133, "Product Name" -> "USB Receiver", 
           "Product ID" -> 50475, "Controller Type" -> "External Controller", 
           "Device Type" -> "Windows DirectInput Device", "HID Usage Page" -> 
           "Unknown:65280", "HID Usage" -> "Unknown:65280:4"}, {
          "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> "Button 11", "JB1" -> 
           "Button 11", "JB2" -> "Button 12", "JB3" -> None, "TLB" -> 
           "Button 5", "TRB" -> "Button 6", "BLB" -> "Button 7", "BRB" -> 
           "Button 8", "X" -> "X Axis", "Y" -> -"Y Axis", "Z" -> "Z Axis", 
           "X1" -> "X Axis", "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> 
           "Z Rotation", "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
           "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> None, 
           "X4" -> Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y4" -> 
           Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X5" -> 
           Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y5" -> 
           Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X6" -> 
           Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "B1" -> 
           "Button 1", "B2" -> "Button 2", "B3" -> "Button 3", "B4" -> 
           "Button 4", "B5" -> "Button 5", "B6" -> "Button 6", "B7" -> 
           "Button 7", "B8" -> "Button 8", "B9" -> "Button 9", "B10" -> 
           "Button 10", "B11" -> "Button 11", "B12" -> "Button 12", 
           "DefaultAbsolute" -> False}}, 
        "Yubikey 4 OTP+U2F+CCID" -> {{}, {}, {
          "Manufacturer ID" -> 4176, "Product Name" -> 
           "Yubikey 4 OTP+U2F+CCID", "Product ID" -> 1031, "Controller Type" -> 
           "External Controller", "Device Type" -> 
           "Windows DirectInput Device", "HID Usage Page" -> "Unknown:61904", 
           "HID Usage" -> "Unknown:61904:1"}, {
          "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> "Button 11", "JB1" -> 
           "Button 11", "JB2" -> "Button 12", "JB3" -> None, "TLB" -> 
           "Button 5", "TRB" -> "Button 6", "BLB" -> "Button 7", "BRB" -> 
           "Button 8", "X" -> "X Axis", "Y" -> -"Y Axis", "Z" -> "Z Axis", 
           "X1" -> "X Axis", "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> 
           "Z Rotation", "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
           "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> None, 
           "X4" -> Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y4" -> 
           Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X5" -> 
           Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y5" -> 
           Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X6" -> 
           Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "B1" -> 
           "Button 1", "B2" -> "Button 2", "B3" -> "Button 3", "B4" -> 
           "Button 4", "B5" -> "Button 5", "B6" -> "Button 6", "B7" -> 
           "Button 7", "B8" -> "Button 8", "B9" -> "Button 9", "B10" -> 
           "Button 10", "B11" -> "Button 11", "B12" -> "Button 12", 
           "DefaultAbsolute" -> False}}, 
        "Dell USB Keyboard" -> {{
          "Unknown Axis" -> 2.3283064365386963`*^-10}, {
          "Mute Button" -> False}, {
          "Manufacturer ID" -> 16700, "Product Name" -> "Dell USB Keyboard", 
           "Product ID" -> 8208, "Controller Type" -> "External Controller", 
           "Device Type" -> "Windows DirectInput Device", "HID Usage Page" -> 
           "Consumer", "HID Usage" -> "ConsumerControl"}, {
          "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> "Button 11", "JB1" -> 
           "Button 11", "JB2" -> "Button 12", "JB3" -> None, "TLB" -> 
           "Button 5", "TRB" -> "Button 6", "BLB" -> "Button 7", "BRB" -> 
           "Button 8", "X" -> "X Axis", "Y" -> -"Y Axis", "Z" -> "Z Axis", 
           "X1" -> "X Axis", "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> 
           "Z Rotation", "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
           "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> None, 
           "X4" -> Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y4" -> 
           Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X5" -> 
           Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y5" -> 
           Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X6" -> 
           Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "B1" -> 
           "Button 1", "B2" -> "Button 2", "B3" -> "Button 3", "B4" -> 
           "Button 4", "B5" -> "Button 5", "B6" -> "Button 6", "B7" -> 
           "Button 7", "B8" -> "Button 8", "B9" -> "Button 9", "B10" -> 
           "Button 10", "B11" -> "Button 11", "B12" -> "Button 12", 
           "DefaultAbsolute" -> False}}, 
        "Dell USB Keyboard" -> {{}, {
          "SystemSleep Button" -> False, "SystemSleep Button 2" -> False, 
           "SystemSleep Button 3" -> False}, {
          "Manufacturer ID" -> 16700, "Product Name" -> "Dell USB Keyboard", 
           "Product ID" -> 8208, "Controller Type" -> "External Controller", 
           "Device Type" -> "Windows DirectInput Device", "HID Usage Page" -> 
           "GenericDesktop", "HID Usage" -> "SystemControl"}, {
          "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> "Button 11", "JB1" -> 
           "Button 11", "JB2" -> "Button 12", "JB3" -> None, "TLB" -> 
           "Button 5", "TRB" -> "Button 6", "BLB" -> "Button 7", "BRB" -> 
           "Button 8", "X" -> "X Axis", "Y" -> -"Y Axis", "Z" -> "Z Axis", 
           "X1" -> "X Axis", "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> 
           "Z Rotation", "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
           "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> None, 
           "X4" -> Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y4" -> 
           Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X5" -> 
           Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y5" -> 
           Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X6" -> 
           Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "B1" -> 
           "Button 1", "B2" -> "Button 2", "B3" -> "Button 3", "B4" -> 
           "Button 4", "B5" -> "Button 5", "B6" -> "Button 6", "B7" -> 
           "Button 7", "B8" -> "Button 8", "B9" -> "Button 9", "B10" -> 
           "Button 10", "B11" -> "Button 11", "B12" -> "Button 12", 
           "DefaultAbsolute" -> False}}, 
        "Dell USB Keyboard" -> {{}, {
          "ACRefresh Button" -> False, "ALLocalMachineBrowser Button" -> 
           False, "ACHome Button" -> False, "ALEmailReader Button" -> False, 
           "ALCalculator Button" -> False, "ACStop Button" -> False, 
           "ACForward Button" -> False, "ACBack Button" -> False, 
           "ScanNextTrack Button" -> False, "ScanPreviousTrack Button" -> 
           False, "PlayOrPause Button" -> False, "Stop Button" -> False, 
           "ALConsumerControlConfiguration Button" -> False}, {
          "Manufacturer ID" -> 16700, "Product Name" -> "Dell USB Keyboard", 
           "Product ID" -> 8208, "Controller Type" -> "External Controller", 
           "Device Type" -> "Windows DirectInput Device", "HID Usage Page" -> 
           "Consumer", "HID Usage" -> "ConsumerControl"}, {
          "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> "Button 11", "JB1" -> 
           "Button 11", "JB2" -> "Button 12", "JB3" -> None, "TLB" -> 
           "Button 5", "TRB" -> "Button 6", "BLB" -> "Button 7", "BRB" -> 
           "Button 8", "X" -> "X Axis", "Y" -> -"Y Axis", "Z" -> "Z Axis", 
           "X1" -> "X Axis", "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> 
           "Z Rotation", "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
           "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> None, 
           "X4" -> Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y4" -> 
           Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X5" -> 
           Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y5" -> 
           Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X6" -> 
           Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "B1" -> 
           "Button 1", "B2" -> "Button 2", "B3" -> "Button 3", "B4" -> 
           "Button 4", "B5" -> "Button 5", "B6" -> "Button 6", "B7" -> 
           "Button 7", "B8" -> "Button 8", "B9" -> "Button 9", "B10" -> 
           "Button 10", "B11" -> "Button 11", "B12" -> "Button 12", 
           "DefaultAbsolute" -> False}}, 
        "USB Receiver" -> {{}, {
          "ConsumerControl Button" -> False, "NumericKeyPad Button" -> False, 
           "ProgrammableButtons" -> False, "Consumer:4 Button" -> False, 
           "Consumer:5 Button" -> False, "Consumer:6 Button" -> False, 
           "Consumer:7 Button" -> False, "Consumer:8 Button" -> False, 
           "Consumer:9 Button" -> False, "Consumer:10 Button" -> False, 
           "Consumer:11 Button" -> False, "Consumer:12 Button" -> False, 
           "Consumer:13 Button" -> False, "Consumer:14 Button" -> False, 
           "Consumer:15 Button" -> False, "Consumer:16 Button" -> False, 
           "Consumer:17 Button" -> False, "Consumer:18 Button" -> False, 
           "Consumer:19 Button" -> False, "Consumer:20 Button" -> False, 
           "Consumer:21 Button" -> False, "Consumer:22 Button" -> False, 
           "Consumer:23 Button" -> False, "Consumer:24 Button" -> False, 
           "Consumer:25 Button" -> False, "Consumer:26 Button" -> False, 
           "Consumer:27 Button" -> False, "Consumer:28 Button" -> False, 
           "Consumer:29 Button" -> False, "Consumer:30 Button" -> False, 
           "Consumer:31 Button" -> False, "Plus10 Button" -> False, 
           "Plus100 Button" -> False, "AMOrPM Button" -> False, 
           "Consumer:35 Button" -> False, "Consumer:36 Button" -> False, 
           "Consumer:37 Button" -> False, "Consumer:38 Button" -> False, 
           "Consumer:39 Button" -> False, "Consumer:40 Button" -> False, 
           "Consumer:41 Button" -> False, "Consumer:42 Button" -> False, 
           "Consumer:43 Button" -> False, "Consumer:44 Button" -> False, 
           "Consumer:45 Button" -> False, "Consumer:46 Button" -> False, 
           "Consumer:47 Button" -> False, "Power Button" -> False, 
           "Reset Button" -> False, "Sleep Button" -> False, 
           "SleepAfter Button" -> False, "SleepMode Button" -> False, 
           "Illumination Button" -> False, "FunctionButtons" -> False, 
           "Consumer:55 Button" -> False, "Consumer:56 Button" -> False, 
           "Consumer:57 Button" -> False, "Consumer:58 Button" -> False, 
           "Consumer:59 Button" -> False, "Consumer:60 Button" -> False, 
           "Consumer:61 Button" -> False, "Consumer:62 Button" -> False, 
           "Consumer:63 Button" -> False, "Menu Button" -> False, 
           "MenuPick Button" -> False, "MenuUp Button" -> False, 
           "MenuDown Button" -> False, "MenuLeft Button" -> False, 
           "MenuRight Button" -> False, "MenuEscape Button" -> False, 
           "MenuValueIncrease Button" -> False, "MenuValueDecrease Button" -> 
           False, "Consumer:73 Button" -> False, "Consumer:74 Button" -> 
           False, "Consumer:75 Button" -> False, "Consumer:76 Button" -> 
           False, "Consumer:77 Button" -> False, "Consumer:78 Button" -> 
           False, "Consumer:79 Button" -> False, "Consumer:80 Button" -> 
           False, "Consumer:81 Button" -> False, "Consumer:82 Button" -> 
           False, "Consumer:83 Button" -> False, "Consumer:84 Button" -> 
           False, "Consumer:85 Button" -> False, "Consumer:86 Button" -> 
           False, "Consumer:87 Button" -> False, "Consumer:88 Button" -> 
           False, "Consumer:89 Button" -> False, "Consumer:90 Button" -> 
           False, "Consumer:91 Button" -> False, "Consumer:92 Button" -> 
           False, "Consumer:93 Button" -> False, "Consumer:94 Button" -> 
           False, "Consumer:95 Button" -> False, "DataOnScreen Button" -> 
           False, "ClosedCaption Button" -> False, 
           "ClosedCaptionSelect Button" -> False, "VCROrTV Button" -> False, 
           "BroadcastMode Button" -> False, "Snapshot Button" -> False, 
           "Still Button" -> False, "Consumer:103 Button" -> False, 
           "Consumer:104 Button" -> False, "Consumer:105 Button" -> False, 
           "Consumer:106 Button" -> False, "Consumer:107 Button" -> False, 
           "Consumer:108 Button" -> False, "Consumer:109 Button" -> False, 
           "Consumer:110 Button" -> False, "Consumer:111 Button" -> False, 
           "Consumer:112 Button" -> False, "Consumer:113 Button" -> False, 
           "Consumer:114 Button" -> False, "Consumer:115 Button" -> False, 
           "Consumer:116 Button" -> False, "Consumer:117 Button" -> False, 
           "Consumer:118 Button" -> False, "Consumer:119 Button" -> False, 
           "Consumer:120 Button" -> False, "Consumer:121 Button" -> False, 
           "Consumer:122 Button" -> False, "Consumer:123 Button" -> False, 
           "Consumer:124 Button" -> False, "Consumer:125 Button" -> False, 
           "Consumer:126 Button" -> False, "Consumer:127 Button" -> False, 
           "Selection Button" -> False, "Assign Button" -> False, 
           "ModeStep Button" -> False, "RecallLast Button" -> False, 
           "EnterChannel Button" -> False, "OrderMovie Button" -> False, 
           "Channel Button" -> False, "MediaSelection Button" -> False, 
           "MediaSelectComputer Button" -> False, "MediaSelectTV Button" -> 
           False, "MediaSelectWWW Button" -> False, "MediaSelectDVD Button" -> 
           False, "MediaSelectTelephone Button" -> False, 
           "MediaSelectProgramGuide Button" -> False, 
           "MediaSelectVideoPhone Button" -> False, "MediaSelectGames Button" -> 
           False, "MediaSelectMessages Button" -> False, 
           "MediaSelectCD Button" -> False, "MediaSelectVCR Button" -> False, 
           "MediaSelectTuner Button" -> False, "Quit Button" -> False, 
           "Help Button" -> False, "MediaSelectTape Button" -> False, 
           "MediaSelectCable Button" -> False, "MediaSelectSatellite Button" -> 
           False, "MediaSelectSecurity Button" -> False, 
           "MediaSelectHome Button" -> False, "MediaSelectCall Button" -> 
           False, "ChannelIncrement Button" -> False, 
           "ChannelDecrement Button" -> False, "Media Button" -> False, 
           "Consumer:159 Button" -> False, "VCRPlus Button" -> False, 
           "Once Button" -> False, "Daily Button" -> False, "Weekly Button" -> 
           False, "Monthly Button" -> False, "Consumer:165 Button" -> False, 
           "Consumer:166 Button" -> False, "Consumer:167 Button" -> False, 
           "Consumer:168 Button" -> False, "Consumer:169 Button" -> False, 
           "Consumer:170 Button" -> False, "Consumer:171 Button" -> False, 
           "Consumer:172 Button" -> False, "Consumer:173 Button" -> False, 
           "Consumer:174 Button" -> False, "Consumer:175 Button" -> False, 
           "Play Button" -> False, "Pause Button" -> False, "Record Button" -> 
           False, "FastForward Button" -> False, "Rewind Button" -> False, 
           "ScanNextTrack Button" -> False, "ScanPreviousTrack Button" -> 
           False, "Stop Button" -> False, "Eject Button" -> False, 
           "RandomPlay Button" -> False, "SelectDisc Button" -> False, 
           "EnterDisc Button" -> False, "Repeat Button" -> False, 
           "Tracking Button" -> False, "TrackNormal Button" -> False, 
           "SlowTracking Button" -> False, "FrameForward Button" -> False, 
           "FrameBack Button" -> False, "Mark Button" -> False, 
           "ClearMark Button" -> False, "RepeatFromMark Button" -> False, 
           "ReturnToMark Button" -> False, "SearchMarkForward Button" -> 
           False, "SearchMarkBackwards Button" -> False, 
           "CounterReset Button" -> False, "ShowCounter Button" -> False, 
           "TrackingIncrement Button" -> False, "TrackingDecrement Button" -> 
           False, "StopOrEject Button" -> False, "PlayOrPause Button" -> 
           False, "PlayOrSkip Button" -> False, "Consumer:207 Button" -> 
           False, "Consumer:208 Button" -> False, "Consumer:209 Button" -> 
           False, "Consumer:210 Button" -> False, "Consumer:211 Button" -> 
           False, "Consumer:212 Button" -> False, "Consumer:213 Button" -> 
           False, "Consumer:214 Button" -> False, "Consumer:215 Button" -> 
           False, "Consumer:216 Button" -> False, "Consumer:217 Button" -> 
           False, "Consumer:218 Button" -> False, "Consumer:219 Button" -> 
           False, "Consumer:220 Button" -> False, "Consumer:221 Button" -> 
           False, "Consumer:222 Button" -> False, "Consumer:223 Button" -> 
           False, "Volume Button" -> False, "Balance Button" -> False, 
           "Mute Button" -> False, "Bass Button" -> False, "Treble Button" -> 
           False, "BassBoost Button" -> False, "SurroundMode Button" -> False,
            "Loudness Button" -> False, "MPX Button" -> False, 
           "VolumeIncrement Button" -> False, "VolumeDecrement Button" -> 
           False, "Consumer:235 Button" -> False, "Consumer:236 Button" -> 
           False, "Consumer:237 Button" -> False, "Consumer:238 Button" -> 
           False, "Consumer:239 Button" -> False, "Speed Button" -> False, 
           "PlaybackSpeed Button" -> False, "StandardPlay Button" -> False, 
           "LongPlay Button" -> False, "ExtendedPlay Button" -> False, 
           "Slow Button" -> False, "Consumer:246 Button" -> False, 
           "Consumer:247 Button" -> False, "Consumer:248 Button" -> False, 
           "Consumer:249 Button" -> False, "Consumer:250 Button" -> False, 
           "Consumer:251 Button" -> False, "Consumer:252 Button" -> False, 
           "Consumer:253 Button" -> False, "Consumer:254 Button" -> False, 
           "Consumer:255 Button" -> False, "FanEnable Button" -> False, 
           "FanSpeed Button" -> False, "LightEnable Button" -> False, 
           "LightIlluminationLevel Button" -> False, 
           "ClimateControlEnable Button" -> False, "RoomTemperature Button" -> 
           False, "SecurityEnable Button" -> False, "FireAlarm Button" -> 
           False, "PoliceAlarm Button" -> False, "Consumer:265 Button" -> 
           False, "Consumer:266 Button" -> False, "Consumer:267 Button" -> 
           False, "Consumer:268 Button" -> False, "Consumer:269 Button" -> 
           False, "Consumer:270 Button" -> False, "Consumer:271 Button" -> 
           False, "Consumer:272 Button" -> False, "Consumer:273 Button" -> 
           False, "Consumer:274 Button" -> False, "Consumer:275 Button" -> 
           False, "Consumer:276 Button" -> False, "Consumer:277 Button" -> 
           False, "Consumer:278 Button" -> False, "Consumer:279 Button" -> 
           False, "Consumer:280 Button" -> False, "Consumer:281 Button" -> 
           False, "Consumer:282 Button" -> False, "Consumer:283 Button" -> 
           False, "Consumer:284 Button" -> False, "Consumer:285 Button" -> 
           False, "Consumer:286 Button" -> False, "Consumer:287 Button" -> 
           False, "Consumer:288 Button" -> False, "Consumer:289 Button" -> 
           False, "Consumer:290 Button" -> False, "Consumer:291 Button" -> 
           False, "Consumer:292 Button" -> False, "Consumer:293 Button" -> 
           False, "Consumer:294 Button" -> False, "Consumer:295 Button" -> 
           False, "Consumer:296 Button" -> False, "Consumer:297 Button" -> 
           False, "Consumer:298 Button" -> False, "Consumer:299 Button" -> 
           False, "Consumer:300 Button" -> False, "Consumer:301 Button" -> 
           False, "Consumer:302 Button" -> False, "Consumer:303 Button" -> 
           False, "Consumer:304 Button" -> False, "Consumer:305 Button" -> 
           False, "Consumer:306 Button" -> False, "Consumer:307 Button" -> 
           False, "Consumer:308 Button" -> False, "Consumer:309 Button" -> 
           False, "Consumer:310 Button" -> False, "Consumer:311 Button" -> 
           False, "Consumer:312 Button" -> False, "Consumer:313 Button" -> 
           False, "Consumer:314 Button" -> False, "Consumer:315 Button" -> 
           False, "Consumer:316 Button" -> False, "Consumer:317 Button" -> 
           False, "Consumer:318 Button" -> False, "Consumer:319 Button" -> 
           False, "Consumer:320 Button" -> False, "Consumer:321 Button" -> 
           False, "Consumer:322 Button" -> False, 
           "ALNextTaskOrApplication Button" -> False, "Consumer:324 Button" -> 
           False, "Consumer:325 Button" -> False, "Consumer:326 Button" -> 
           False, "Consumer:327 Button" -> False, "Consumer:328 Button" -> 
           False, "Consumer:329 Button" -> False, "Consumer:330 Button" -> 
           False, "Consumer:331 Button" -> False, "Consumer:332 Button" -> 
           False, "Consumer:333 Button" -> False, "Consumer:334 Button" -> 
           False, "Consumer:335 Button" -> False, "BalanceRight Button" -> 
           False, "BalanceLeft Button" -> False, "BassIncrement Button" -> 
           False, "BassDecrement Button" -> False, "TrebleIncrement Button" -> 
           False, "TrebleDecrement Button" -> False, "Consumer:342 Button" -> 
           False, "Consumer:343 Button" -> False, "Consumer:344 Button" -> 
           False, "Consumer:345 Button" -> False, "Consumer:346 Button" -> 
           False, "Consumer:347 Button" -> False, "Consumer:348 Button" -> 
           False, "Consumer:349 Button" -> False, "Consumer:350 Button" -> 
           False, "Consumer:351 Button" -> False, "SpeakerSystem Button" -> 
           False, "ChannelLeft Button" -> False, "ChannelRight Button" -> 
           False, "ChannelCenter Button" -> False, "ChannelFront Button" -> 
           False, "ChannelCenterFront Button" -> False, "ChannelSide Button" -> 
           False, "ChannelSurround Button" -> False, 
           "ChannelLowFrequencyEnhancement Button" -> False, 
           "ChannelTop Button" -> False, "ChannelUnknown Button" -> False, 
           "Consumer:363 Button" -> False, "Consumer:364 Button" -> False, 
           "Consumer:365 Button" -> False, "Consumer:366 Button" -> False, 
           "Consumer:367 Button" -> False, "SubChannel Button" -> False, 
           "SubChannelIncrement Button" -> False, 
           "SubChannelDecrement Button" -> False, 
           "AlternateAudioIncrement Button" -> False, 
           "AlternateAudioDecrement Button" -> False, "Consumer:373 Button" -> 
           False, "Consumer:374 Button" -> False, "Consumer:375 Button" -> 
           False, "Consumer:376 Button" -> False, "Consumer:377 Button" -> 
           False, "Consumer:378 Button" -> False, "Consumer:379 Button" -> 
           False, "Consumer:380 Button" -> False, "Consumer:381 Button" -> 
           False, "Consumer:382 Button" -> False, "Consumer:383 Button" -> 
           False, "ApplicationLaunchButtons" -> False, 
           "ALLaunchButtonConfigurationTool" -> False, 
           "ALProgrammableButtonConfiguration" -> False, 
           "ALConsumerControlConfiguration Button" -> False, 
           "ALWordProcessor Button" -> False, "ALTextEditor Button" -> False, 
           "ALSpreadsheet Button" -> False, "ALGraphicsEditor Button" -> 
           False, "ALPresentationApp Button" -> False, "ALDatabaseApp Button" -> 
           False, "ALEmailReader Button" -> False, "ALNewsreader Button" -> 
           False, "ALVoicemail Button" -> False, 
           "ALContactsOrAddressBook Button" -> False, 
           "ALCalendarOrSchedule Button" -> False, 
           "ALTaskOrProjectManager Button" -> False, 
           "ALLogOrJournalOrTimecard Button" -> False, 
           "ALCheckbookOrFinance Button" -> False, "ALCalculator Button" -> 
           False, "ALAOrVCaptureOrPlayback Button" -> False, 
           "ALLocalMachineBrowser Button" -> False, 
           "ALLANOrWANBrowser Button" -> False, "ALInternetBrowser Button" -> 
           False, "ALRemoteNetworkingOrISPConnect Button" -> False, 
           "ALNetworkConference Button" -> False, "ALNetworkChat Button" -> 
           False, "ALTelephonyOrDialer Button" -> False, "ALLogon Button" -> 
           False, "ALLogoff Button" -> False, "ALLogonOrLogoff Button" -> 
           False, "ALTerminalLockOrScreensaver Button" -> False, 
           "ALControlPanel Button" -> False, 
           "ALCommandLineProcessorOrRun Button" -> False, 
           "ALProcessOrTaskManager Button" -> False, "AL Button" -> False, 
           "Consumer:419 Button" -> False, 
           "ALPreviousTaskOrApplication Button" -> False, 
           "ALPreemptiveHaltTaskOrApplication Button" -> False, 
           "Consumer:422 Button" -> False, "Consumer:423 Button" -> False, 
           "Consumer:424 Button" -> False, "Consumer:425 Button" -> False, 
           "Consumer:426 Button" -> False, "Consumer:427 Button" -> False, 
           "Consumer:428 Button" -> False, "Consumer:429 Button" -> False, 
           "Consumer:430 Button" -> False, "Consumer:431 Button" -> False, 
           "Consumer:432 Button" -> False, "Consumer:433 Button" -> False, 
           "Consumer:434 Button" -> False, "Consumer:435 Button" -> False, 
           "Consumer:436 Button" -> False, "Consumer:437 Button" -> False, 
           "Consumer:438 Button" -> False, "Consumer:439 Button" -> False, 
           "Consumer:440 Button" -> False, "Consumer:441 Button" -> False, 
           "Consumer:442 Button" -> False, "Consumer:443 Button" -> False, 
           "Consumer:444 Button" -> False, "Consumer:445 Button" -> False, 
           "Consumer:446 Button" -> False, "Consumer:447 Button" -> False, 
           "Consumer:448 Button" -> False, "Consumer:449 Button" -> False, 
           "Consumer:450 Button" -> False, "Consumer:451 Button" -> False, 
           "Consumer:452 Button" -> False, "Consumer:453 Button" -> False, 
           "Consumer:454 Button" -> False, "Consumer:455 Button" -> False, 
           "Consumer:456 Button" -> False, "Consumer:457 Button" -> False, 
           "Consumer:458 Button" -> False, "Consumer:459 Button" -> False, 
           "Consumer:460 Button" -> False, "Consumer:461 Button" -> False, 
           "Consumer:462 Button" -> False, "Consumer:463 Button" -> False, 
           "Consumer:464 Button" -> False, "Consumer:465 Button" -> False, 
           "Consumer:466 Button" -> False, "Consumer:467 Button" -> False, 
           "Consumer:468 Button" -> False, "Consumer:469 Button" -> False, 
           "Consumer:470 Button" -> False, "Consumer:471 Button" -> False, 
           "Consumer:472 Button" -> False, "Consumer:473 Button" -> False, 
           "Consumer:474 Button" -> False, "Consumer:475 Button" -> False, 
           "Consumer:476 Button" -> False, "Consumer:477 Button" -> False, 
           "Consumer:478 Button" -> False, "Consumer:479 Button" -> False, 
           "Consumer:480 Button" -> False, "Consumer:481 Button" -> False, 
           "Consumer:482 Button" -> False, "Consumer:483 Button" -> False, 
           "Consumer:484 Button" -> False, "Consumer:485 Button" -> False, 
           "Consumer:486 Button" -> False, "Consumer:487 Button" -> False, 
           "Consumer:488 Button" -> False, "Consumer:489 Button" -> False, 
           "Consumer:490 Button" -> False, "Consumer:491 Button" -> False, 
           "Consumer:492 Button" -> False, "Consumer:493 Button" -> False, 
           "Consumer:494 Button" -> False, "Consumer:495 Button" -> False, 
           "Consumer:496 Button" -> False, "Consumer:497 Button" -> False, 
           "Consumer:498 Button" -> False, "Consumer:499 Button" -> False, 
           "Consumer:500 Button" -> False, "Consumer:501 Button" -> False, 
           "Consumer:502 Button" -> False, "Consumer:503 Button" -> False, 
           "Consumer:504 Button" -> False, "Consumer:505 Button" -> False, 
           "Consumer:506 Button" -> False, "Consumer:507 Button" -> False, 
           "Consumer:508 Button" -> False, "Consumer:509 Button" -> False, 
           "Consumer:510 Button" -> False, "Consumer:511 Button" -> False, 
           "GenericGUIApplicationControls Button" -> False, "ACNew Button" -> 
           False, "ACOpen Button" -> False, "ACClose Button" -> False, 
           "ACExit Button" -> False, "ACMaximize Button" -> False, 
           "ACMinimize Button" -> False, "ACSave Button" -> False, 
           "ACPrint Button" -> False, "ACProperties Button" -> False, 
           "Consumer:522 Button" -> False, "Consumer:523 Button" -> False, 
           "Consumer:524 Button" -> False, "Consumer:525 Button" -> False, 
           "Consumer:526 Button" -> False, "Consumer:527 Button" -> False, 
           "Consumer:528 Button" -> False, "Consumer:529 Button" -> False, 
           "Consumer:530 Button" -> False, "Consumer:531 Button" -> False, 
           "Consumer:532 Button" -> False, "Consumer:533 Button" -> False, 
           "Consumer:534 Button" -> False, "Consumer:535 Button" -> False, 
           "Consumer:536 Button" -> False, "Consumer:537 Button" -> False, 
           "ACUndo Button" -> False, "ACCopy Button" -> False, "ACCut Button" -> 
           False, "ACPaste Button" -> False, "AC Button" -> False, 
           "ACFind Button" -> False, "ACFindandReplace Button" -> False, 
           "ACSearch Button" -> False, "ACGoTo Button" -> False, 
           "ACHome Button" -> False, "ACBack Button" -> False, 
           "ACForward Button" -> False, "ACStop Button" -> False, 
           "ACRefresh Button" -> False, "ACPreviousLink Button" -> False, 
           "ACNextLink Button" -> False, "ACBookmarks Button" -> False, 
           "ACHistory Button" -> False, "ACSubscriptions Button" -> False, 
           "ACZoomIn Button" -> False, "ACZoomOut Button" -> False, 
           "ACZoom Button" -> False, "ACFullScreenView Button" -> False, 
           "ACNormalView Button" -> False, "ACViewToggle Button" -> False, 
           "ACScrollUp Button" -> False, "ACScrollDown Button" -> False, 
           "ACScroll Button" -> False, "ACPanLeft Button" -> False, 
           "ACPanRight Button" -> False, "ACPan Button" -> False, 
           "ACNewWindow Button" -> False, "ACTileHorizontally Button" -> 
           False, "ACTileVertically Button" -> False, "ACFormat Button" -> 
           False, "Consumer:573 Button" -> False, "Consumer:574 Button" -> 
           False, "Consumer:575 Button" -> False, "Consumer:576 Button" -> 
           False, "Consumer:577 Button" -> False, "Consumer:578 Button" -> 
           False, "Consumer:579 Button" -> False, "Consumer:580 Button" -> 
           False, "Consumer:581 Button" -> False, "Consumer:582 Button" -> 
           False, "Consumer:583 Button" -> False, "Consumer:584 Button" -> 
           False, "Consumer:585 Button" -> False, "Consumer:586 Button" -> 
           False, "Consumer:587 Button" -> False, "Consumer:588 Button" -> 
           False, "Consumer:589 Button" -> False, "Consumer:590 Button" -> 
           False, "Consumer:591 Button" -> False, "Consumer:592 Button" -> 
           False, "Consumer:593 Button" -> False, "Consumer:594 Button" -> 
           False, "Consumer:595 Button" -> False, "Consumer:596 Button" -> 
           False, "Consumer:597 Button" -> False, "Consumer:598 Button" -> 
           False, "Consumer:599 Button" -> False, "Consumer:600 Button" -> 
           False, "Consumer:601 Button" -> False, "Consumer:602 Button" -> 
           False, "Consumer:603 Button" -> False, "Consumer:604 Button" -> 
           False, "Consumer:605 Button" -> False, "Consumer:606 Button" -> 
           False, "Consumer:607 Button" -> False, "Consumer:608 Button" -> 
           False, "Consumer:609 Button" -> False, "Consumer:610 Button" -> 
           False, "Consumer:611 Button" -> False, "Consumer:612 Button" -> 
           False, "Consumer:613 Button" -> False, "Consumer:614 Button" -> 
           False, "Consumer:615 Button" -> False, "Consumer:616 Button" -> 
           False, "Consumer:617 Button" -> False, "Consumer:618 Button" -> 
           False, "Consumer:619 Button" -> False, "Consumer:620 Button" -> 
           False, "Consumer:621 Button" -> False, "Consumer:622 Button" -> 
           False, "Consumer:623 Button" -> False, "Consumer:624 Button" -> 
           False, "Consumer:625 Button" -> False, "Consumer:626 Button" -> 
           False, "Consumer:627 Button" -> False, "Consumer:628 Button" -> 
           False, "Consumer:629 Button" -> False, "Consumer:630 Button" -> 
           False, "Consumer:631 Button" -> False, "Consumer:632 Button" -> 
           False, "Consumer:633 Button" -> False, "Consumer:634 Button" -> 
           False, "Consumer:635 Button" -> False, "Consumer:636 Button" -> 
           False, "Consumer:637 Button" -> False, "Consumer:638 Button" -> 
           False, "Consumer:639 Button" -> False, "Consumer:640 Button" -> 
           False, "Consumer:641 Button" -> False, "Consumer:642 Button" -> 
           False, "Consumer:643 Button" -> False, "Consumer:644 Button" -> 
           False, "Consumer:645 Button" -> False, "Consumer:646 Button" -> 
           False, "Consumer:647 Button" -> False, "Consumer:648 Button" -> 
           False, "Consumer:649 Button" -> False, "Consumer:650 Button" -> 
           False, "Consumer:651 Button" -> False, "Consumer:652 Button" -> 
           False}, {
          "Manufacturer ID" -> 1133, "Product Name" -> "USB Receiver", 
           "Product ID" -> 50475, "Controller Type" -> "External Controller", 
           "Device Type" -> "Windows DirectInput Device", "HID Usage Page" -> 
           "Consumer", "HID Usage" -> "ConsumerControl"}, {
          "X2" -> "Z Axis", "Y2" -> -"Z Rotation", "JB" -> "Button 11", "JB1" -> 
           "Button 11", "JB2" -> "Button 12", "JB3" -> None, "TLB" -> 
           "Button 5", "TRB" -> "Button 6", "BLB" -> "Button 7", "BRB" -> 
           "Button 8", "X" -> "X Axis", "Y" -> -"Y Axis", "Z" -> "Z Axis", 
           "X1" -> "X Axis", "Y1" -> -"Y Axis", "Z1" -> "Z Axis", "X2" -> 
           "Z Rotation", "Y2" -> -"Slider", "Z2" -> None, "X3" -> 
           "Hatswitch X Axis", "Y3" -> -"Hatswitch Y Axis", "Z3" -> None, 
           "X4" -> Switch[{"Button 1", "Button 3"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y4" -> 
           Switch[{"Button 2", "Button 4"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X5" -> 
           Switch[{"Button 7", "Button 5"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "Y5" -> 
           Switch[{"Button 8", "Button 6"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "X6" -> 
           Switch[{"Button 9", "Button 10"}, {False, False}, 0, {
             True, False}, -1, {False, True}, 1, {True, True}, 0.00001], "B1" -> 
           "Button 1", "B2" -> "Button 2", "B3" -> "Button 3", "B4" -> 
           "Button 4", "B5" -> "Button 5", "B6" -> "Button 6", "B7" -> 
           "Button 7", "B8" -> "Button 8", "B9" -> "Button 9", "B10" -> 
           "Button 10", "B11" -> "Button 11", "B12" -> "Button 12", 
           "DefaultAbsolute" -> False}}}}, 
    "Network" -> {
     "IPAddresses" -> {
       "fe80::d9ed:bd8e:6ef8:232c", "fe80::5efe:192.168.0.5", 
        "fe80::497e:3d0c:c148:34a9", "fe80::429:578:4c21:ac9c", 
        "fe80::2445:d56f:bc83:b129", "2804:14d:148b:5:e421:e76e:5c58:7347", 
        "2804:14d:148b:5:497e:3d0c:c148:34a9", 
        "2001:0:9d38:90d7:429:578:4c21:ac9c", "192.168.0.5", "169.254.35.44", 
        "169.254.177.41"}, "AllowInternetUse" -> True, "LoadOnDemand" -> True,
       "LoadOnDemandServers" -> {"http://pacletserver.wolfram.com"}, 
      "LatestTransaction" -> Missing["NotActive"], "LatestTransactionServer" -> 
      Missing["NotActive"], 
      "LastLocalIndexUpdate" -> {
       2016, 8, 12, 15, 4, 38.0310453`9.332713147864226}, 
      "LastLocalIndexUpdateServer" -> {}, "Paclets" -> 
      "PacletManager Version 3.0.0", "TotalDownloads" -> Missing["NotActive"],
       "DownloadsDirectory" -> Missing["NotActive"]}}]]], "Output",
 CellChangeTimes->{{3.677350163501991*^9, 3.6773501646270714`*^9}, 
   3.677350770650236*^9, 3.67735153523452*^9, {3.677352788956523*^9, 
   3.677352790909786*^9}, 3.677358782409901*^9, {3.679667363452711*^9, 
   3.679667374125392*^9}, 3.6800178027771716`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["See what is inside the NETAssembly", "Subsection",
 CellChangeTimes->{{3.5192918020820627`*^9, 3.5192918044061956`*^9}, {
  3.677349894689478*^9, 3.677349897564681*^9}, {3.677350803077341*^9, 
  3.677350806046301*^9}, {3.677350840626875*^9, 3.6773508476586227`*^9}}],

Cell[CellGroupData[{

Cell["Classes", "Subsubsection",
 CellChangeTimes->{{3.6773531919363484`*^9, 3.6773531943740215`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NETTypeInfo", "[", 
  RowBox[{"assembly", ",", "\"\<Classes\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.6773507728222666`*^9, 3.6773507769788103`*^9}, {
  3.677353210151319*^9, 3.6773532117139297`*^9}}],

Cell[BoxData[GridBox[{
   {
    RowBox[{
     RowBox[{"Assembly", ":", " "}], 
     StyleBox["\<\"HDF.PInvoke\"\>",
      FontWeight->"Bold"]}]},
   {"\<\"Full Name: HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Classes",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["Constants",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5A",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5AC",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5C",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5D",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5DO",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5E",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5F",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5FD",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5G",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5I",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5L",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5MM",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5O",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5P",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5PL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5R",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5S",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5T",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5Z",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["NativeDependencies",
      FontWeight->"Bold"]}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017802886554*^9},
 AutoSpacing->False]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classes, Interfaces, Structures, Delegates, Enums", "Subsubsection",
 CellChangeTimes->{{3.6773532007338467`*^9, 3.6773532015776553`*^9}, 
   3.6773532328404264`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NETTypeInfo", "[", "assembly", "]"}]], "Input",
 CellChangeTimes->{{3.6773507728222666`*^9, 3.6773507769788103`*^9}}],

Cell[BoxData[GridBox[{
   {
    RowBox[{
     RowBox[{"Assembly", ":", " "}], 
     StyleBox["\<\"HDF.PInvoke\"\>",
      FontWeight->"Bold"]}]},
   {"\<\"Full Name: HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Classes",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["Constants",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5A",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5AC",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5C",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5D",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5DO",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5E",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5F",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5FD",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5G",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5I",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5L",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5MM",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5O",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5P",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5PL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5R",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5S",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5T",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5Z",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["NativeDependencies",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Structures",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5AC", "+", 
       RowBox[{"cache_config", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{
       RowBox[{"H5AC", "+", 
        RowBox[{"cache_config", "_t"}], "+"}], "<", 
       RowBox[{"trace_file", "_name"}], ">", "e__FixedBuffer0"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5AC", "+", 
       RowBox[{"metadata_write", "_strategy", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5A", "+", "info_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5C", "+", 
       RowBox[{"cache_decr", "_mode"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5C", "+", 
       RowBox[{"cache_flash", "_incr", "_mode"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5C", "+", 
       RowBox[{"cache_incr", "_mode"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"alloc_time", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"chunk_index", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"fill_time", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"fill_value", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", "layout_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"space_status", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "direction_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "error_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", 
       RowBox[{"close_degree", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"file_image", "_callbacks", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"file_image", "_op", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "info_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "info_t", "+", "sohm_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "libver_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "mem_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "scope_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5G", "+", "info_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5G", "+", 
       RowBox[{"storage_type", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", "H5IterationResult"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", 
       RowBox[{"ih_info", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", "index_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", 
       RowBox[{"iter_order", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5I", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", "class_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", "info_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", "info_t", "+", "u_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"hdr_info", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"hdr_info", "_t"}], "+", "mesg_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"hdr_info", "_t"}], "+", "space_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", "info_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"mcdt_search", "_ret", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"meta_size", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5R", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5S", "+", "class_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5S", "+", "seloper_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5S", "+", "sel_type"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "bkg_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "cdata_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "class_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "cmd_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", 
       RowBox[{"conv_except", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", 
       RowBox[{"conv_ret", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "cset_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "direction_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "hvl_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "norm_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "order_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "pad_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "pers_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "sign_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "str_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"cb_return", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", "class_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", "EDC_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", "filter_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"SO_scale", "_type", "_t"}]}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Delegates",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5A", "+", "operator_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"gather_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", "operator_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"scatter_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "auto_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "walk_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"image_free", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"image_malloc", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"image_memcpy", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"image_realloc", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"udata_copy", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"udata_free", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5I", "+", "free_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5I", "+", 
       RowBox[{"search_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"copy_func", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"copy_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"create_func", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"create_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"delete_func", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"delete_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"elink_traverse", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"elink_traverse", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", "iterate_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"move_func", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"move_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"query_func", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"query_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"traverse_func", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"traverse_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5MM", "+", "allocate_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5MM", "+", "free_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", "iterate_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"mcdt_search", "_cb", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", 
       RowBox[{"cls_close", "_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", 
       RowBox[{"cls_copy", "_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", 
       RowBox[{"cls_create", "_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", "iterate_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", 
       RowBox[{"prp_cb1", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", 
       RowBox[{"prp_cb2", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", 
       RowBox[{"prp_compare", "_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", 
       RowBox[{"conv_except", "_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "conv_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"can_apply", "_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"filter_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", "func_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"set_local", "_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Enums",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5AC", "+", 
       RowBox[{"metadata_write", "_strategy", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5C", "+", 
       RowBox[{"cache_decr", "_mode"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5C", "+", 
       RowBox[{"cache_flash", "_incr", "_mode"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5C", "+", 
       RowBox[{"cache_incr", "_mode"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"alloc_time", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"chunk_index", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"fill_time", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"fill_value", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", "layout_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"space_status", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "direction_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", 
       RowBox[{"close_degree", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"file_image", "_op", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "libver_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "mem_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "scope_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5G", "+", 
       RowBox[{"storage_type", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", "H5IterationResult"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", "index_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", 
       RowBox[{"iter_order", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5I", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"mcdt_search", "_ret", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5R", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5S", "+", "class_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5S", "+", "seloper_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5S", "+", "sel_type"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "bkg_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "class_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "cmd_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", 
       RowBox[{"conv_except", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", 
       RowBox[{"conv_ret", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "cset_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "direction_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "norm_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "order_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "pad_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "pers_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "sign_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "str_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"cb_return", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", "EDC_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", "filter_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"SO_scale", "_type", "_t"}]}],
      FontWeight->"Bold"]}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178029646845`*^9},
 AutoSpacing->False]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Examine in Detail Each of the Classes, Interfaces, Structures, Delegates, \
Enums\
\>", "Section",
 CellChangeTimes->{{3.5192929340948105`*^9, 3.5192929346948442`*^9}, 
   3.5193134125426784`*^9, {3.6773497933072977`*^9, 3.677349802557951*^9}, 
   3.677349910346837*^9, {3.677350043845521*^9, 3.677350073519497*^9}, {
   3.677352044587839*^9, 3.677352065895574*^9}, {3.677352108937976*^9, 
   3.67735211069499*^9}, {3.677353220448923*^9, 3.677353223730406*^9}}],

Cell[CellGroupData[{

Cell["Classes", "Subsection",
 CellChangeTimes->{{3.677352118164269*^9, 3.677352124664729*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NETTypeInfo", "[", 
  RowBox[{"assembly", ",", "\"\<Classes\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.6773524525871696`*^9, 3.6773524601502056`*^9}, 
   3.677352514323947*^9}],

Cell[BoxData[GridBox[{
   {
    RowBox[{
     RowBox[{"Assembly", ":", " "}], 
     StyleBox["\<\"HDF.PInvoke\"\>",
      FontWeight->"Bold"]}]},
   {"\<\"Full Name: HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Classes",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["Constants",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5A",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5AC",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5C",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5D",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5DO",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5E",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5F",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5FD",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5G",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5I",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5L",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5MM",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5O",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5P",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5PL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5R",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5S",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5T",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["H5Z",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"class", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox["NativeDependencies",
      FontWeight->"Bold"]}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178029959373`*^9},
 AutoSpacing->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"InputForm", "[", "%", "]"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<class \>\"", ",", "\"\<\\\"HDF.PInvoke.\\\"\>\"", ",", 
        RowBox[{"StyleBox", "[", 
         RowBox[{
          RowBox[{"item", ":", "_String"}], ",", 
          RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}]}], "]"}]}], "}"}],
       "]"}], "\[RuleDelayed]", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<HDF.PInvoke.\>\"", ",", "item"}], "]"}]}], " ", ",", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"{", "3", "}"}]}], "\[IndentingNewLine]", "]"}], " ", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.67735162650994*^9, 3.677351628010046*^9}, {
   3.6773516702730627`*^9, 3.6773516960649242`*^9}, {3.6773520919367723`*^9, 
   3.6773520996248164`*^9}, {3.6773521756001787`*^9, 
   3.6773524770576515`*^9}, {3.6773525197305794`*^9, 3.6773525590195904`*^9}, 
   3.677352677926027*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"HDF.PInvoke.Constants\"\>", ",", "\<\"HDF.PInvoke.H5\"\>", 
   ",", "\<\"HDF.PInvoke.H5A\"\>", ",", "\<\"HDF.PInvoke.H5AC\"\>", 
   ",", "\<\"HDF.PInvoke.H5C\"\>", ",", "\<\"HDF.PInvoke.H5D\"\>", 
   ",", "\<\"HDF.PInvoke.H5DO\"\>", ",", "\<\"HDF.PInvoke.H5E\"\>", 
   ",", "\<\"HDF.PInvoke.H5F\"\>", ",", "\<\"HDF.PInvoke.H5FD\"\>", 
   ",", "\<\"HDF.PInvoke.H5G\"\>", ",", "\<\"HDF.PInvoke.H5I\"\>", 
   ",", "\<\"HDF.PInvoke.H5L\"\>", ",", "\<\"HDF.PInvoke.H5MM\"\>", 
   ",", "\<\"HDF.PInvoke.H5O\"\>", ",", "\<\"HDF.PInvoke.H5P\"\>", 
   ",", "\<\"HDF.PInvoke.H5PL\"\>", ",", "\<\"HDF.PInvoke.H5R\"\>", 
   ",", "\<\"HDF.PInvoke.H5S\"\>", ",", "\<\"HDF.PInvoke.H5T\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z\"\>", 
   ",", "\<\"HDF.PInvoke.NativeDependencies\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.6773524287329807`*^9, 3.677352477323296*^9, 
  3.677352520371249*^9, 3.6773525738956437`*^9, 3.6773527892534194`*^9, 
  3.6773587827176332`*^9, 3.6796673744379177`*^9, 3.68001780302719*^9},
 AutoSpacing->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Map", "[", "NETTypeInfo", "]"}], "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.677352592947631*^9, 3.677352596994793*^9}}],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.Constants\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.Constants\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.Constants, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"string\"\>", " ", 
     StyleBox["DLL32bitPath",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"string\"\>", " ", 
     StyleBox["DLL64bitPath",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"string\"\>", " ", 
     StyleBox["DLLFileName",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"string\"\>", " ", 
     StyleBox["HLDLLFileName",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017803058442*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"unsigned long\"\>", " ", 
     StyleBox["HADDR_MAX",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned long\"\>", " ", 
     StyleBox["HADDR_UNDEF",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned long\"\>", " ", 
     StyleBox["HSIZE_UNDEF",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["allocate_memory",
      FontWeight->"Bold"], "\<\"(IntPtr size, unsigned clear)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["close",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["dont_atexit",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["free_memory",
      FontWeight->"Bold"], "\<\"(IntPtr buf)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["garbage_collect",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_libversion",
      FontWeight->
       "Bold"], "\<\"(ref unsigned majnum, ref unsigned minnum, ref unsigned \
relnum)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"is_library", "_threadsafe"}],
      FontWeight->"Bold"], "\<\"(ref unsigned is_ts)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["open",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["resize_memory",
      FontWeight->"Bold"], "\<\"(IntPtr mem, IntPtr size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_free", "_list", "_limits"}],
      FontWeight->
       "Bold"], "\<\"(int reg_global_lim, int reg_list_lim, int \
arr_global_lim, int arr_list_lim, int blk_global_lim, int \
blk_list_lim)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017803089694*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5A\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5A\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5A, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5A",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["close",
      FontWeight->"Bold"], "\<\"(int attr_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create",
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] attr_name, int type_id, int \
space_id, [optional, default = 0] int acpl_id, [optional, default = 0] int \
aapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create",
      FontWeight->
       "Bold"], "\<\"(int loc_id, string attr_name, int type_id, int \
space_id, [optional, default = 0] int acpl_id, [optional, default = 0] int \
aapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"create_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] obj_name, byte[] attr_name, int \
type_id, int space_id, [optional, default = 0] int acpl_id, [optional, \
default = 0] int aapl_id, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"create_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string obj_name, string attr_name, int \
type_id, int space_id, [optional, default = 0] int acpl_id, [optional, \
default = 0] int aapl_id, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["delete",
      FontWeight->"Bold"], "\<\"(int loc_id, byte[] name)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["delete",
      FontWeight->"Bold"], "\<\"(int loc_id, string name)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"delete_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] obj_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, [optional, \
default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"delete_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string obj_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, [optional, \
default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"delete_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] obj_name, byte[] attr_name, \
[optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"delete_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string obj_name, string attr_name, \
[optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["exists",
      FontWeight->"Bold"], "\<\"(int obj_id, byte[] attr_name)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["exists",
      FontWeight->"Bold"], "\<\"(int obj_id, string attr_name)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"exists_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] obj_name, byte[] attr_name, \
[optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"exists_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string obj_name, string attr_name, \
[optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_create", "_plist"}],
      FontWeight->"Bold"], "\<\"(int attr_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_info",
      FontWeight->
       "Bold"], "\<\"(int attr_id, ref HDF.PInvoke.H5A+info_t ainfo)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] obj_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, ref \
HDF.PInvoke.H5A+info_t ainfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string obj_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, ref \
HDF.PInvoke.H5A+info_t ainfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] obj_name, byte[] attr_name, ref \
HDF.PInvoke.H5A+info_t ainfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string obj_name, string attr_name, ref \
HDF.PInvoke.H5A+info_t ainfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["get_name",
      FontWeight->
       "Bold"], "\<\"(int attr_id, IntPtr size, byte[] name)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["get_name",
      FontWeight->
       "Bold"], "\<\"(int attr_id, IntPtr size, System.Text.StringBuilder \
name)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_name", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] obj_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, byte[] name, \
IntPtr size, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_name", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string obj_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, \
System.Text.StringBuilder name, IntPtr size, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_name", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string obj_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, IntPtr name, \
IntPtr size, int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_space",
      FontWeight->"Bold"], "\<\"(int attr_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"unsigned long\"\>", " ", 
     StyleBox[
      RowBox[{"get_storage", "_size"}],
      FontWeight->"Bold"], "\<\"(int attr_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_type",
      FontWeight->"Bold"], "\<\"(int attr_id)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["iterate",
      FontWeight->
       "Bold"], "\<\"(int obj_id, HDF.PInvoke.H5+index_t idx_type, \
HDF.PInvoke.H5+iter_order_t order, ref unsigned long n, \
HDF.PInvoke.H5A+operator_t op, IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"iterate_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] obj_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, ref unsigned long n, \
HDF.PInvoke.H5A+operator_t op, IntPtr op_data, [optional, default = 0] int \
lapd_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"iterate_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string obj_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, ref unsigned long n, \
HDF.PInvoke.H5A+operator_t op, IntPtr op_data, [optional, default = 0] int \
lapd_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["open",
      FontWeight->
       "Bold"], "\<\"(int obj_id, byte[] attr_name, [optional, default = 0] \
int aapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["open",
      FontWeight->
       "Bold"], "\<\"(int obj_id, string attr_name, [optional, default = 0] \
int aapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"open_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] obj_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, [optional, \
default = 0] int aapl_id, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"open_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string obj_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, [optional, \
default = 0] int aapl_id, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"open_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] obj_name, byte[] attr_name, \
[optional, default = 0] int aapl_id, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"open_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string obj_name, string attr_name, \
[optional, default = 0] int aapl_id, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["read",
      FontWeight->"Bold"], "\<\"(int attr_id, int type_id, IntPtr buf)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["rename",
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] old_name, byte[] new_name)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["rename",
      FontWeight->
       "Bold"], "\<\"(int loc_id, string old_name, string new_name)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"rename_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] obj_name, byte[] old_attr_name, \
byte[] new_attr_name, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"rename_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string obj_name, string old_attr_name, \
string new_attr_name, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["write",
      FontWeight->
       "Bold"], "\<\"(int attr_id, int mem_type_id, IntPtr buf)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178031365747`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5AC\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5AC\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5AC, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5AC",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"CURR_CACHE", "_CONFIG", "_VERSION"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"MAX_TRACE", "_FILE", "_NAME", "_LEN"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178031678267`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5C\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5C\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5C, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5C",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017803183451*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5D",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"readonly", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"CACHE_NBYTES", "_DEFAULT"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"readonly", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"CACHE_NSLOTS", "_DEFAULT"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"float\"\>", " ", 
     StyleBox[
      RowBox[{"CACHE_W0", "_DEFAULT"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"string\"\>", " ", 
     StyleBox[
      RowBox[{"XFER_DIRECT", "_CHUNK", "_WRITE", "_DATASIZE", "_NAME"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"string\"\>", " ", 
     StyleBox[
      RowBox[{"XFER_DIRECT", "_CHUNK", "_WRITE", "_FILTERS", "_NAME"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"string\"\>", " ", 
     StyleBox[
      RowBox[{"XFER_DIRECT", "_CHUNK", "_WRITE", "_FLAG", "_NAME"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"string\"\>", " ", 
     StyleBox[
      RowBox[{"XFER_DIRECT", "_CHUNK", "_WRITE", "_OFFSET", "_NAME"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["close",
      FontWeight->"Bold"], "\<\"(int dset_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create",
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, int type_id, int space_id, \
[optional, default = 0] int lcpl_id, [optional, default = 0] int dcpl_id, \
[optional, default = 0] int dapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create",
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, int type_id, int space_id, \
[optional, default = 0] int lcpl_id, [optional, default = 0] int dcpl_id, \
[optional, default = 0] int dapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_anon",
      FontWeight->
       "Bold"], "\<\"(int file_id, int type_id, int space_id, [optional, \
default = 0] int dcpl_id, [optional, default = 0] int dapl_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["fill",
      FontWeight->
       "Bold"], "\<\"(IntPtr fill, int fill_type, IntPtr buf, int buf_type, \
int space)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["gather",
      FontWeight->
       "Bold"], "\<\"(int src_space_id, IntPtr src_buf, int type_id, IntPtr \
dst_buf_size, IntPtr dst_buf, HDF.PInvoke.H5D+gather_func_t op, IntPtr \
op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_access", "_plist"}],
      FontWeight->"Bold"], "\<\"(int dset_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_create", "_plist"}],
      FontWeight->"Bold"], "\<\"(int dset_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"unsigned long\"\>", " ", 
     StyleBox["get_offset",
      FontWeight->"Bold"], "\<\"(int dset_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_space",
      FontWeight->"Bold"], "\<\"(int dset_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_space", "_status"}],
      FontWeight->
       "Bold"], "\<\"(int dset_id, ref HDF.PInvoke.H5D+space_status_t \
allocation)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"unsigned long\"\>", " ", 
     StyleBox[
      RowBox[{"get_storage", "_size"}],
      FontWeight->"Bold"], "\<\"(int dset_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_type",
      FontWeight->"Bold"], "\<\"(int dset_id)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["iterate",
      FontWeight->
       "Bold"], "\<\"(IntPtr buf, int type_id, int space_id, \
HDF.PInvoke.H5D+operator_t op, IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["open",
      FontWeight->
       "Bold"], "\<\"(int file_id, byte[] name, [optional, default = 0] int \
dapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["open",
      FontWeight->
       "Bold"], "\<\"(int file_id, string name, [optional, default = 0] int \
dapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["read",
      FontWeight->
       "Bold"], "\<\"(int dset_id, int mem_type_id, int mem_space_id, int \
file_space_id, int plist_id, IntPtr buf)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["scatter",
      FontWeight->
       "Bold"], "\<\"(HDF.PInvoke.H5D+scatter_func_t op, IntPtr op_data, int \
type_id, int dst_space_id, IntPtr dst_buf)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_extent",
      FontWeight->"Bold"], "\<\"(int dset_id, unsigned long[] size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_extent",
      FontWeight->"Bold"], "\<\"(int dset_id, unsigned long* size)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"vlen_get", "_buf", "_size"}],
      FontWeight->
       "Bold"], "\<\"(int dataset_id, int type_id, int space_id, ref unsigned \
long size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["vlen_reclaim",
      FontWeight->
       "Bold"], "\<\"(int type_id, int space_id, int plist_id, IntPtr \
buf)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["write",
      FontWeight->
       "Bold"], "\<\"(int dset_id, int mem_type_id, int mem_space_id, int \
file_space_id, int plist_id, IntPtr buf)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178032147036`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5DO\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5DO\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5DO, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5DO",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["write_chunk",
      FontWeight->
       "Bold"], "\<\"(int dset_id, int dxpl_id, unsigned filter_mask, ref \
unsigned long offset, IntPtr data_size, IntPtr buf)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017803230338*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5E\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5E\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5E, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5E",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox["DEFAULT",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["ALIGNMENT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["ALREADYEXISTS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["ALREADYINIT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["ARGS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["ATOM",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["ATTR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["BADATOM",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["BADFILE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["BADGROUP",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["BADITER",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["BADMESG",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["BADRANGE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["BADSELECT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["BADSIZE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["BADTYPE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["BADVALUE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["BTREE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CACHE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CALLBACK",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANAPPLY",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTALLOC",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTAPPEND",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTATTACH",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTCLIP",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTCLOSEFILE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTCLOSEOBJ",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTCOMPARE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTCOMPUTE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTCONVERT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTCOPY",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTCORK",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTCOUNT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTCREATE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTDEC",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTDECODE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTDELETE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTDEPEND",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTDIRTY",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTENCODE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTEXPUNGE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTEXTEND",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTFILTER",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTFLUSH",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTFREE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTGC",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTGET",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTGETSIZE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTINC",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTINIT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTINS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTINSERT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTLIST",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTLOAD",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTLOCK",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTMARKDIRTY",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTMERGE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTMODIFY",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTMOVE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTNEXT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTNOTIFY",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTOPENFILE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTOPENOBJ",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTOPERATE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTPACK",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTPIN",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTPROTECT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTRECV",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTREDISTRIBUTE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTREGISTER",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTRELEASE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTREMOVE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTRENAME",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTRESET",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTRESIZE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTRESTORE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTREVIVE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTSELECT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTSERIALIZE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTSET",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTSHRINK",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTSORT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTSPLIT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTSWAP",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTUNCORK",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTUNDEPEND",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTUNLOCK",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTUNPIN",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTUNPROTECT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CANTUPDATE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["CLOSEERROR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["COMPLEN",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["DATASET",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["DATASPACE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["DATATYPE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["DUPCLASS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["EARRAY",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["EFL",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["ERR_CLS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["EXISTS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["FARRAY",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["FCNTL",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["FILE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["FILEEXISTS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["FILEOPEN",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["FSPACE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["FUNC",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["HEAP",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["INTERNAL",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["IO",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["LINK",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["LINKCOUNT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["LOGFAIL",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["MOUNT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["MPI",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["MPIERRSTR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NLINKS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NOENCODER",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NOFILTER",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NOIDS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NONE_MAJOR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NONE_MINOR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NOSPACE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NOTCACHED",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NOTFOUND",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NOTHDF5",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NOTREGISTERED",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["OBJOPEN",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["OHDR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["OPENERROR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["OVERFLOW",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["PATH",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["PLINE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["PLIST",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["PLUGIN",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["PROTECT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["READERROR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["REFERENCE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["RESOURCE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["RS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["SEEKERROR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["SETDISALLOWED",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["SETLOCAL",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["SLIST",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["SOHM",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STORAGE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["SYM",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["SYSERRSTR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["SYSTEM",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["TRAVERSE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["TRUNCATED",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["TST",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["UNINITIALIZED",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["UNSUPPORTED",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["VERSION",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["VFL",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["WRITEERROR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"auto_is", "_v2"}],
      FontWeight->"Bold"], "\<\"(int estack_id, ref unsigned is_stack)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["clear",
      FontWeight->"Bold"], "\<\"(int estack_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["close_msg",
      FontWeight->"Bold"], "\<\"(int msg_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["close_stack",
      FontWeight->"Bold"], "\<\"(int estack_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_msg",
      FontWeight->
       "Bold"], "\<\"(int cls, HDF.PInvoke.H5E+type_t msg_type, string msg)\"\
\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_stack",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_auto",
      FontWeight->
       "Bold"], "\<\"(int estack_id, ref HDF.PInvoke.H5E+auto_t func, ref \
IntPtr client_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_class", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int class_id, System.Text.StringBuilder name, IntPtr \
size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_current", "_stack"}],
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["get_msg",
      FontWeight->
       "Bold"], "\<\"(int msg_id, ref HDF.PInvoke.H5E+type_t msg_type, \
System.Text.StringBuilder msg, IntPtr size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["get_num",
      FontWeight->"Bold"], "\<\"(int estack_id)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["pop",
      FontWeight->"Bold"], "\<\"(int estack_id, IntPtr count)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["print",
      FontWeight->"Bold"], "\<\"(int estack_id, IntPtr stream)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["push",
      FontWeight->
       "Bold"], "\<\"(int estack_id, string file, string func, unsigned line, \
int class_id, int major_id, int minor_id, string msg)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["register_class",
      FontWeight->
       "Bold"], "\<\"(string cls_name, string lib_name, string \
version)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_auto",
      FontWeight->
       "Bold"], "\<\"(int estack_id, HDF.PInvoke.H5E+auto_t func, IntPtr \
client_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_current", "_stack"}],
      FontWeight->"Bold"], "\<\"(int estack_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["unregister_class",
      FontWeight->"Bold"], "\<\"(int class_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["walk",
      FontWeight->
       "Bold"], "\<\"(int estack_id, HDF.PInvoke.H5E+direction_t direction, \
HDF.PInvoke.H5E+walk_t func, IntPtr client_data)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017803339713*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5F\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5F\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5F, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5F",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["ACC_CREAT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["ACC_DEFAULT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["ACC_EXCL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["ACC_RDONLY",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["ACC_RDWR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["ACC_TRUNC",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["FAMILY_DEFAULT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned long\"\>", " ", 
     StyleBox["H5F_UNLIMITED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["OBJ_ALL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["OBJ_ATTR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["OBJ_DATASET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["OBJ_DATATYPE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["OBJ_FILE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["OBJ_GROUP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["OBJ_LOCAL",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"clear_elink", "_file", "_cache"}],
      FontWeight->"Bold"], "\<\"(int file_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["close",
      FontWeight->"Bold"], "\<\"(int file_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create",
      FontWeight->
       "Bold"], "\<\"(string filename, unsigned flags, [optional, default = \
0] int create_plist, [optional, default = 0] int access_plist)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["flush",
      FontWeight->
       "Bold"], "\<\"(int object_id, HDF.PInvoke.H5F+scope_t scope)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_access", "_plist"}],
      FontWeight->"Bold"], "\<\"(int file_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_create", "_plist"}],
      FontWeight->"Bold"], "\<\"(int file_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_file", "_image"}],
      FontWeight->
       "Bold"], "\<\"(int file_id, IntPtr buf_ptr, ref IntPtr buf_len)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_filesize",
      FontWeight->"Bold"], "\<\"(int file_id, ref unsigned long size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"long\"\>", " ", 
     StyleBox["get_freespace",
      FontWeight->"Bold"], "\<\"(int file_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_info",
      FontWeight->
       "Bold"], "\<\"(int obj_id, ref HDF.PInvoke.H5F+info_t bh_info)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_intent",
      FontWeight->"Bold"], "\<\"(int file_id, ref unsigned intent)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_mdc", "_config"}],
      FontWeight->
       "Bold"], "\<\"(int file_id, ref HDF.PInvoke.H5AC+cache_config_t \
config_ptr)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_mdc", "_hit", "_rate"}],
      FontWeight->"Bold"], "\<\"(int file_id, ref double hit_rate_ptr)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_mdc", "_size"}],
      FontWeight->
       "Bold"], "\<\"(int file_id, ref IntPtr max_size_ptr, ref IntPtr \
min_clean_size_ptr, ref IntPtr cur_size_ptr, ref int \
cur_num_entries_ptr)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["get_name",
      FontWeight->
       "Bold"], "\<\"(int obj_id, System.Text.StringBuilder name, IntPtr \
size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_obj", "_count"}],
      FontWeight->"Bold"], "\<\"(int file_id, unsigned types)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_obj", "_ids"}],
      FontWeight->
       "Bold"], "\<\"(int file_id, unsigned types, IntPtr max_objs, IntPtr \
obj_id_list)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_vfd", "_handle"}],
      FontWeight->
       "Bold"], "\<\"(int file_id, int fapl, ref IntPtr file_handle)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["is_hdf5",
      FontWeight->"Bold"], "\<\"(string filename)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["mount",
      FontWeight->
       "Bold"], "\<\"(int loc, byte[] name, int child, [optional, default = \
0] int plist)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["mount",
      FontWeight->
       "Bold"], "\<\"(int loc, string name, int child, [optional, default = \
0] int plist)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["open",
      FontWeight->
       "Bold"], "\<\"(string filename, unsigned flags, [optional, default = \
0] int plist)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["reopen",
      FontWeight->"Bold"], "\<\"(int file_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"reset_mdc", "_hit", "_rate", "_stats"}],
      FontWeight->"Bold"], "\<\"(int file_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_mdc", "_config"}],
      FontWeight->
       "Bold"], "\<\"(int file_id, ref HDF.PInvoke.H5AC+cache_config_t \
config_ptr)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["unmount",
      FontWeight->"Bold"], "\<\"(int loc, byte[] name)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["unmount",
      FontWeight->"Bold"], "\<\"(int loc, string name)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017803370965*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5FD\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5FD\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5FD, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5FD",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178035428524`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5G\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5G\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5G, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5G",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["close",
      FontWeight->"Bold"], "\<\"(int group_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create",
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, [optional, default = 0] int \
lcpl_id, [optional, default = 0] int gcpl_id, [optional, default = 0] int \
gapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create",
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, [optional, default = 0] int \
lcpl_id, [optional, default = 0] int gcpl_id, [optional, default = 0] int \
gapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_anon",
      FontWeight->
       "Bold"], "\<\"(int loc_id, [optional, default = 0] int gcpl_id, \
[optional, default = 0] int gapl_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_create", "_plist"}],
      FontWeight->"Bold"], "\<\"(int group_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_info",
      FontWeight->
       "Bold"], "\<\"(int loc_id, ref HDF.PInvoke.H5G+info_t ginfo)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, ref \
HDF.PInvoke.H5G+info_t ginfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, ref \
HDF.PInvoke.H5G+info_t ginfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, ref HDF.PInvoke.H5G+info_t \
ginfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, ref HDF.PInvoke.H5G+info_t \
ginfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["open",
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, [optional, default = 0] int \
gapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["open",
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, [optional, default = 0] int \
gapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017803574105*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5I\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5I\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5I, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5I",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"H5I_INVALID", "_HID"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"H5_SIZEOF", "_HID", "_T"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["clear_type",
      FontWeight->
       "Bold"], "\<\"(HDF.PInvoke.H5I+type_t type, unsigned force)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["dec_ref",
      FontWeight->"Bold"], "\<\"(int obj_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"dec_type", "_ref"}],
      FontWeight->"Bold"], "\<\"(HDF.PInvoke.H5I+type_t type)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["destroy_type",
      FontWeight->"Bold"], "\<\"(HDF.PInvoke.H5I+type_t type)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_file", "_id"}],
      FontWeight->"Bold"], "\<\"(int obj_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["get_name",
      FontWeight->
       "Bold"], "\<\"(int obj_id, System.Text.StringBuilder name, IntPtr \
size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_ref",
      FontWeight->"Bold"], "\<\"(int obj_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["get_type",
      FontWeight->"Bold"], "\<\"(int obj_id)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"H5Iget_type", "_ref"}],
      FontWeight->"Bold"], "\<\"(HDF.PInvoke.H5I+type_t type)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["inc_ref",
      FontWeight->"Bold"], "\<\"(int obj_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"inc_type", "_ref"}],
      FontWeight->"Bold"], "\<\"(HDF.PInvoke.H5I+type_t type)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["is_valid",
      FontWeight->"Bold"], "\<\"(int obj_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["nmembers",
      FontWeight->
       "Bold"], "\<\"(HDF.PInvoke.H5I+type_t type, ref unsigned long \
num_members)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["object_verify",
      FontWeight->
       "Bold"], "\<\"(int id, HDF.PInvoke.H5I+type_t id_type)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["register",
      FontWeight->
       "Bold"], "\<\"(HDF.PInvoke.H5I+type_t type, IntPtr obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["register_type",
      FontWeight->
       "Bold"], "\<\"(IntPtr hash_size, unsigned reserved, \
HDF.PInvoke.H5I+free_t free_func)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["remove_verify",
      FontWeight->
       "Bold"], "\<\"(int id, HDF.PInvoke.H5I+type_t id_type)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["search",
      FontWeight->
       "Bold"], "\<\"(HDF.PInvoke.H5I+type_t type, \
HDF.PInvoke.H5I+search_func_t func, IntPtr key)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["type_exists",
      FontWeight->"Bold"], "\<\"(HDF.PInvoke.H5I+type_t type)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178036053753`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5L",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LINK_CLASS", "_T", "_VERS"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"MAX_LINK", "_NAME", "_LEN"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox["SAME_LOC",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox[
      RowBox[{"TYPE_BUILTIN", "_MAX"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox[
      RowBox[{"TYPE_UD", "_MIN"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["copy",
      FontWeight->
       "Bold"], "\<\"(int src_loc, byte[] src_name, int dst_loc, byte[] \
dst_name, [optional, default = 0] int lcpl_id, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["copy",
      FontWeight->
       "Bold"], "\<\"(int src_loc, string src_name, int dst_loc, string \
dst_name, [optional, default = 0] int lcpl_id, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_external",
      FontWeight->
       "Bold"], "\<\"(string file_name, byte[] obj_name, int link_loc_id, \
byte[] link_name, [optional, default = 0] int lcpl_id, [optional, default = \
0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_external",
      FontWeight->
       "Bold"], "\<\"(string file_name, string obj_name, int link_loc_id, \
string link_name, [optional, default = 0] int lcpl_id, [optional, default = \
0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_hard",
      FontWeight->
       "Bold"], "\<\"(int cur_loc, byte[] cur_name, int dst_loc, byte[] \
dst_name, [optional, default = 0] int lcpl_id, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_hard",
      FontWeight->
       "Bold"], "\<\"(int cur_loc, string cur_name, int dst_loc, string \
dst_name, [optional, default = 0] int lcpl_id, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_soft",
      FontWeight->
       "Bold"], "\<\"(byte[] link_target, int link_loc_id, byte[] link_name, \
[optional, default = 0] int lcpl_id, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_soft",
      FontWeight->
       "Bold"], "\<\"(string link_target, int link_loc_id, string link_name, \
[optional, default = 0] int lcpl_id, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_ud",
      FontWeight->
       "Bold"], "\<\"(int link_loc_id, byte[] link_name, \
HDF.PInvoke.H5L+type_t link_type, IntPtr udata, IntPtr udata_size, [optional, \
default = 0] int lcpl_id, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_ud",
      FontWeight->
       "Bold"], "\<\"(int link_loc_id, string link_name, \
HDF.PInvoke.H5L+type_t link_type, IntPtr udata, IntPtr udata_size, [optional, \
default = 0] int lcpl_id, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["delete",
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["delete",
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"delete_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, [optional, \
default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"delete_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, [optional, \
default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["exists",
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["exists",
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_info",
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, ref HDF.PInvoke.H5L+info_t \
linfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_info",
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, ref HDF.PInvoke.H5L+info_t \
linfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, ref \
HDF.PInvoke.H5L+info_t linfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, ref \
HDF.PInvoke.H5L+info_t linfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_name", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, byte[] name, \
IntPtr size, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_name", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, \
System.Text.StringBuilder name, IntPtr size, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_name", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, IntPtr name, \
IntPtr size, int lapl_id)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_val",
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, IntPtr buf, IntPtr size, \
[optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_val",
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, IntPtr buf, IntPtr size, \
[optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_val", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, IntPtr buf, \
IntPtr size, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_val", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, IntPtr buf, \
IntPtr size, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["is_registered",
      FontWeight->"Bold"], "\<\"(HDF.PInvoke.H5L+type_t id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["iterate",
      FontWeight->
       "Bold"], "\<\"(int grp_id, HDF.PInvoke.H5+index_t idx_type, \
HDF.PInvoke.H5+iter_order_t order, ref unsigned long idx, \
HDF.PInvoke.H5L+iterate_t op, IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"iterate_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, ref unsigned long idx, \
HDF.PInvoke.H5L+iterate_t op, IntPtr op_data, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"iterate_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, ref unsigned long idx, \
HDF.PInvoke.H5L+iterate_t op, IntPtr op_data, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["move",
      FontWeight->
       "Bold"], "\<\"(int src_loc, byte[] src_name, int dst_loc, byte[] \
dst_name, [optional, default = 0] int lcpl_id, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["move",
      FontWeight->
       "Bold"], "\<\"(int src_loc, string src_name, int dst_loc, string \
dst_name, [optional, default = 0] int lcpl_id, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["register",
      FontWeight->"Bold"], "\<\"(ref HDF.PInvoke.H5L+class_t cls)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"unpack_elink", "_val"}],
      FontWeight->
       "Bold"], "\<\"(IntPtr ext_linkval, IntPtr link_size, ref unsigned \
flags, ref IntPtr filename, ref IntPtr obj_path)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["unregister",
      FontWeight->"Bold"], "\<\"(HDF.PInvoke.H5L+type_t id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["visit",
      FontWeight->
       "Bold"], "\<\"(int grp_id, HDF.PInvoke.H5+index_t idx_type, \
HDF.PInvoke.H5+iter_order_t order, HDF.PInvoke.H5L+iterate_t op, IntPtr \
op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"visit_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, HDF.PInvoke.H5L+iterate_t op, \
IntPtr op_data, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"visit_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, HDF.PInvoke.H5L+iterate_t op, \
IntPtr op_data, [optional, default = 0] int lapl_id)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178036366096`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5MM\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5MM\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5MM, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5MM",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017803667879*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5O\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5O\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5O, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5O",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox["COPY_ALL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"COPY_EXPAND", "_EXT", "_LINK", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"COPY_EXPAND", "_REFERENCE", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"COPY_EXPAND", "_SOFT", "_LINK", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"COPY_MERGE", "_COMMITTED", "_DTYPE", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"COPY_PRESERVE", "_NULL", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"COPY_SHALLOW", "_HIERARCHY", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"COPY_WITHOUT", "_ATTR", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"HDR_ALL", "_FLAGS"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"HDR_ATTR", "_CRT", "_ORDER", "_INDEXED"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"HDR_ATTR", "_CRT", "_ORDER", "_TRACKED"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"HDR_ATTR", "_STORE", "_PHASE", "_CHANGE"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"HDR_CHUNK0", "_SIZE"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"HDR_STORE", "_TIMES"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"SHMESG_ALL", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"SHMESG_ATTR", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"SHMESG_DTYPE", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"SHMESG_FILL", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"SHMESG_MAX", "_LIST", "_SIZE"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"SHMESG_MAX", "_NINDEXES"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"SHMESG_NONE", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"SHMESG_PLINE", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"SHMESG_SDSPACE", "_FLAG"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["close",
      FontWeight->"Bold"], "\<\"(int object_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["copy",
      FontWeight->
       "Bold"], "\<\"(int src_loc_id, byte[] src_name, int dst_loc_id, byte[] \
dst_name, [optional, default = 0] int ocpypl_id, [optional, default = 0] int \
lcpl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["copy",
      FontWeight->
       "Bold"], "\<\"(int src_loc_id, string src_name, int dst_loc_id, string \
dst_name, [optional, default = 0] int ocpypl_id, [optional, default = 0] int \
lcpl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["decr_refcount",
      FontWeight->"Bold"], "\<\"(int object_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"exists_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"exists_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["get_comment",
      FontWeight->
       "Bold"], "\<\"(int obj_id, System.Text.StringBuilder comment, IntPtr \
size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_comment", "_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, System.Text.StringBuilder \
comment, IntPtr size, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_comment", "_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, System.Text.StringBuilder \
comment, IntPtr size, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_info",
      FontWeight->
       "Bold"], "\<\"(int loc_id, ref HDF.PInvoke.H5O+info_t oinfo)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, ref \
HDF.PInvoke.H5O+info_t oinfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, ref \
HDF.PInvoke.H5O+info_t oinfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, ref HDF.PInvoke.H5O+info_t \
oinfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_info", "_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, ref HDF.PInvoke.H5O+info_t \
oinfo, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["incr_refcount",
      FontWeight->"Bold"], "\<\"(int object_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["link",
      FontWeight->
       "Bold"], "\<\"(int obj_id, int new_loc_id, byte[] new_name, [optional, \
default = 0] int lcpl_id, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["link",
      FontWeight->
       "Bold"], "\<\"(int obj_id, int new_loc_id, string new_name, [optional, \
default = 0] int lcpl_id, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["open",
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["open",
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, [optional, default = 0] int \
lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"open_by", "_addr"}],
      FontWeight->"Bold"], "\<\"(int loc_id, unsigned long addr)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"open_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, [optional, \
default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"open_by", "_idx"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string group_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, unsigned long n, [optional, \
default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["visit",
      FontWeight->
       "Bold"], "\<\"(int obj_id, HDF.PInvoke.H5+index_t idx_type, \
HDF.PInvoke.H5+iter_order_t order, HDF.PInvoke.H5O+iterate_t op, IntPtr \
op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"visit_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] obj_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, HDF.PInvoke.H5O+iterate_t op, \
IntPtr op_data, [optional, default = 0] int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"visit_by", "_name"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, string obj_name, HDF.PInvoke.H5+index_t \
idx_type, HDF.PInvoke.H5+iter_order_t order, HDF.PInvoke.H5O+iterate_t op, \
IntPtr op_data, [optional, default = 0] int lapl_id)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178037147408`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5P\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5P\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5P, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5P",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"CRT_ORDER", "_INDEXED"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"CRT_ORDER", "_TRACKED"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox["DEFAULT",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["ATTRIBUTE_CREATE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["DATASET_ACCESS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["DATASET_CREATE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["DATASET_XFER",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["DATATYPE_ACCESS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["DATATYPE_CREATE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["FILE_ACCESS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["FILE_CREATE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["FILE_MOUNT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["GROUP_ACCESS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["GROUP_CREATE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["LINK_ACCESS",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["LINK_CREATE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_ATTRIBUTE", "_CREATE"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_DATASET", "_ACCESS"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_DATASET", "_CREATE"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_DATASET", "_XFER"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_DATATYPE", "_ACCESS"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_DATATYPE", "_CREATE"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_FILE", "_ACCESS"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_FILE", "_CREATE"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_FILE", "_MOUNT"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_GROUP", "_ACCESS"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_GROUP", "_CREATE"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_LINK", "_ACCESS"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_LINK", "_CREATE"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"LST_OBJECT", "_COPY"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["OBJECT_COPY",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["OBJECT_CREATE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["ROOT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STRING_CREATE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"add_merge", "_committed", "_dtype", "_path"}],
      FontWeight->"Bold"], "\<\"(int ocpypl_id, byte[] path)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"add_merge", "_committed", "_dtype", "_path"}],
      FontWeight->"Bold"], "\<\"(int ocpypl_id, string path)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"all_filters", "_avail"}],
      FontWeight->"Bold"], "\<\"(int plist_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["close",
      FontWeight->"Bold"], "\<\"(int plist)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["close_class",
      FontWeight->"Bold"], "\<\"(int cls)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["copy",
      FontWeight->"Bold"], "\<\"(int plist)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["copy_prop",
      FontWeight->"Bold"], "\<\"(int dst_id, int src_id, string name)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create",
      FontWeight->"Bold"], "\<\"(int cls_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_class",
      FontWeight->
       "Bold"], "\<\"(int parent_class, string name, \
HDF.PInvoke.H5P+cls_create_func_t create, IntPtr create_data, \
HDF.PInvoke.H5P+cls_copy_func_t copy, IntPtr copy_data, \
HDF.PInvoke.H5P+cls_close_func_t close, IntPtr close_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["equal",
      FontWeight->"Bold"], "\<\"(int id1, int id2)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["exist",
      FontWeight->"Bold"], "\<\"(int id, string name)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"free_merge", "_committed", "_dtype", "_paths"}],
      FontWeight->"Bold"], "\<\"(int ocpypl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get",
      FontWeight->"Bold"], "\<\"(int plid, string name, IntPtr value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_alignment",
      FontWeight->
       "Bold"], "\<\"(int plist, ref unsigned long threshold, ref unsigned \
long alignment)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_alloc", "_time"}],
      FontWeight->
       "Bold"], "\<\"(int plist_id, ref HDF.PInvoke.H5D+alloc_time_t \
alloc_time)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_attr", "_creation", "_order"}],
      FontWeight->
       "Bold"], "\<\"(int ocpl_id, ref unsigned crt_order_flags)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_attr", "_phase", "_change"}],
      FontWeight->
       "Bold"], "\<\"(int ocpl_id, ref unsigned max_compact, ref unsigned \
min_dense)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_btree", "_ratios"}],
      FontWeight->
       "Bold"], "\<\"(int plist, ref double left, ref double middle, ref \
double right)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"unsigned long\"\>", " ", 
     StyleBox["get_buffer",
      FontWeight->
       "Bold"], "\<\"(int plist, ref IntPtr tconv, ref IntPtr bkg)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_cache",
      FontWeight->
       "Bold"], "\<\"(int plist_id, ref int mdc_nelmts, ref IntPtr \
rdcc_nelmts, ref IntPtr rdcc_nbytes, ref double rdcc_w0)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_char", "_encoding"}],
      FontWeight->
       "Bold"], "\<\"(int plist_id, ref HDF.PInvoke.H5T+cset_t \
encoding)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_chunk",
      FontWeight->
       "Bold"], "\<\"(int plist_id, int max_ndims, unsigned long[] \
dims)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_chunk", "_cache"}],
      FontWeight->
       "Bold"], "\<\"(int dapl_id, ref IntPtr rdcc_nslots, ref IntPtr \
rdcc_nbytes, ref double rdcc_w0)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_class",
      FontWeight->"Bold"], "\<\"(int plist)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_class", "_name"}],
      FontWeight->"Bold"], "\<\"(int pcid)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_class", "_parent"}],
      FontWeight->"Bold"], "\<\"(int pcid)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_copy", "_object"}],
      FontWeight->
       "Bold"], "\<\"(int ocp_plist_id, ref unsigned copy_options)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_core", "_write", "_tracking"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, ref unsigned is_enabled, ref IntPtr \
page_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_create", "_intermediate", "_group"}],
      FontWeight->
       "Bold"], "\<\"(int lcpl_id, ref unsigned crt_intermed_group)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_data", "_transform"}],
      FontWeight->
       "Bold"], "\<\"(int plist_id, System.Text.StringBuilder expression, \
IntPtr size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_driver",
      FontWeight->"Bold"], "\<\"(int plist_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_driver", "_info"}],
      FontWeight->"Bold"], "\<\"(int plist_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5Z+EDC_t\"\>", " ", 
     StyleBox[
      RowBox[{"get_edc", "_check"}],
      FontWeight->"Bold"], "\<\"(int plist)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_efile", "_prefix"}],
      FontWeight->"Bold"], "\<\"(int dapl, byte[] prefix, IntPtr size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_elink", "_acc", "_flags"}],
      FontWeight->"Bold"], "\<\"(int lapl_id, ref unsigned flags)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_elink", "_cb"}],
      FontWeight->
       "Bold"], "\<\"(int lapl_id, ref HDF.PInvoke.H5L+elink_traverse_t func, \
ref IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_elink", "_fapl"}],
      FontWeight->"Bold"], "\<\"(int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_elink", "_file", "_cache", "_size"}],
      FontWeight->"Bold"], "\<\"(int fapl_id, ref unsigned efc_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_elink", "_prefix"}],
      FontWeight->
       "Bold"], "\<\"(int lapl_id, byte[] prefix, IntPtr size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_est", "_link", "_info"}],
      FontWeight->
       "Bold"], "\<\"(int gcpl_id, ref unsigned est_num_entries, ref unsigned \
est_name_len)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_external",
      FontWeight->
       "Bold"], "\<\"(int plist, unsigned idx, IntPtr name_size, byte[] name, \
ref IntPtr offset, ref unsigned long size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_external", "_count"}],
      FontWeight->"Bold"], "\<\"(int plist)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_family", "_offset"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, ref unsigned long offset)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_fapl", "_core"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, ref IntPtr increment, ref unsigned \
backing_store)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_fapl", "_direct"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, ref IntPtr alignment, ref IntPtr \
block_size, ref IntPtr cbuf_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_fapl", "_family"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, ref unsigned long memb_size, ref int \
memb_fapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_fclose", "_degree"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, ref HDF.PInvoke.H5F+close_degree_t \
fc_degree)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_file", "_image"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, ref IntPtr buf_ptr_ptr, ref IntPtr \
buf_len_ptr)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_file", "_image", "_callbacks"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, ref \
HDF.PInvoke.H5FD+file_image_callbacks_t callbacks_ptr)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_fill", "_time"}],
      FontWeight->
       "Bold"], "\<\"(int plist_id, ref HDF.PInvoke.H5D+fill_time_t \
fill_time)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_fill", "_value"}],
      FontWeight->
       "Bold"], "\<\"(int plist_id, int type_id, IntPtr value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["get_filter",
      FontWeight->
       "Bold"], "\<\"(int plist_id, unsigned idx, ref unsigned flags, ref \
IntPtr cd_nelmts, unsigned[] cd_values, IntPtr namelen, byte[] name, ref \
unsigned filter_config)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["get_filter2",
      FontWeight->
       "Bold"], "\<\"(int plist_id, unsigned filter, ref unsigned flags, ref \
unsigned long cd_nelmts, unsigned* cd_values, IntPtr namelen, string name, \
ref unsigned filter_config)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_filter", "_by", "_id"}],
      FontWeight->
       "Bold"], "\<\"(int plist_id, HDF.PInvoke.H5Z+filter_t filter_id, ref \
unsigned flags, ref IntPtr cd_nelmts, unsigned[] cd_values, IntPtr namelen, \
byte[] name, ref unsigned filter_config)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_gc", "_references"}],
      FontWeight->"Bold"], "\<\"(int plist, ref unsigned gc_ref)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_hyper", "_vector", "_size"}],
      FontWeight->"Bold"], "\<\"(int dxpl_id, ref IntPtr vector_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_istore", "_k"}],
      FontWeight->"Bold"], "\<\"(int fcpl_id, ref unsigned ik)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5D+layout_t\"\>", " ", 
     StyleBox["get_layout",
      FontWeight->"Bold"], "\<\"(int plist)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_libver", "_bounds"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, ref HDF.PInvoke.H5F+libver_t libver_low, \
ref HDF.PInvoke.H5F+libver_t libver_high)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_link", "_creation", "_order"}],
      FontWeight->
       "Bold"], "\<\"(int gcpl_id, ref unsigned crt_order_flags)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_link", "_phase", "_change"}],
      FontWeight->
       "Bold"], "\<\"(int gcpl_id, ref unsigned max_compact, ref unsigned \
min_dense)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_local", "_heap", "_size", "_hint"}],
      FontWeight->"Bold"], "\<\"(int gcpl_id, ref IntPtr size_hint)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_mcdt", "_search", "_cb"}],
      FontWeight->
       "Bold"], "\<\"(int ocpypl_id, ref HDF.PInvoke.H5O+mcdt_search_cb_t \
func, ref IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_mdc", "_config"}],
      FontWeight->
       "Bold"], "\<\"(int plist_id, ref HDF.PInvoke.H5AC+cache_config_t \
config_ptr)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_meta", "_block", "_size"}],
      FontWeight->"Bold"], "\<\"(int fapl_id, ref unsigned long size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_nfilters",
      FontWeight->"Bold"], "\<\"(int plist)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_nlinks",
      FontWeight->"Bold"], "\<\"(int lapl_id, ref IntPtr nlinks)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_nprops",
      FontWeight->"Bold"], "\<\"(int plist_id, ref IntPtr nprops)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_obj", "_track", "_times"}],
      FontWeight->
       "Bold"], "\<\"(int ocpl_id, ref unsigned track_times)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_shared", "_mesg", "_index"}],
      FontWeight->
       "Bold"], "\<\"(int fcpl_id, unsigned index_num, ref unsigned \
mesg_type_flags, ref unsigned min_mesg_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_shared", "_mesg", "_nindexes"}],
      FontWeight->"Bold"], "\<\"(int fcpl_id, ref unsigned nindexes)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_shared", "_mesg", "_phase", "_change"}],
      FontWeight->
       "Bold"], "\<\"(int fcpl_id, ref unsigned max_list, ref unsigned \
min_btree)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_sieve", "_buf", "_size"}],
      FontWeight->"Bold"], "\<\"(int fapl_id, ref IntPtr size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_size",
      FontWeight->"Bold"], "\<\"(int id, string name, ref IntPtr size)\"\>"}]}
    ,
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_sizes",
      FontWeight->
       "Bold"], "\<\"(int plist, ref IntPtr sizeof_addr, ref IntPtr \
sizeof_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_small", "_data", "_block", "_size"}],
      FontWeight->"Bold"], "\<\"(int fapl_id, ref unsigned long size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_sym", "_k"}],
      FontWeight->
       "Bold"], "\<\"(int fcpl_id, ref unsigned ik, ref unsigned lk)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_type", "_conv", "_cb"}],
      FontWeight->
       "Bold"], "\<\"(int plist, ref HDF.PInvoke.H5T+conv_except_func_t func, \
ref IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_userblock",
      FontWeight->"Bold"], "\<\"(int plist, ref unsigned long size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_version",
      FontWeight->
       "Bold"], "\<\"(int plist, ref unsigned super, ref unsigned freelist, \
ref unsigned stab, ref unsigned shhdr)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_vlen", "_mem", "_manager"}],
      FontWeight->
       "Bold"], "\<\"(int plist, ref HDF.PInvoke.H5MM+allocate_t alloc, ref \
IntPtr alloc_info, ref HDF.PInvoke.H5MM+free_t free, ref IntPtr \
free_info)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"H5Pfill_value", "_defined"}],
      FontWeight->
       "Bold"], "\<\"(int plist_id, ref HDF.PInvoke.H5D+fill_value_t \
status)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["insert",
      FontWeight->
       "Bold"], "\<\"(int plid, string name, IntPtr size, IntPtr value, \
HDF.PInvoke.H5P+prp_cb2_t set, HDF.PInvoke.H5P+prp_cb2_t get, \
HDF.PInvoke.H5P+prp_cb2_t delete, HDF.PInvoke.H5P+prp_cb1_t copy, \
HDF.PInvoke.H5P+prp_compare_func_t compare, HDF.PInvoke.H5P+prp_cb1_t \
close)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["isa_class",
      FontWeight->"Bold"], "\<\"(int plist, int pclass)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["iterate",
      FontWeight->
       "Bold"], "\<\"(int id, ref int idx, HDF.PInvoke.H5P+iterate_t \
iter_func, IntPtr iter_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["modify_filter",
      FontWeight->
       "Bold"], "\<\"(int plist_id, HDF.PInvoke.H5Z+filter_t filter_id, \
unsigned flags, IntPtr cd_nelmts, unsigned[] cd_values)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["register",
      FontWeight->
       "Bold"], "\<\"(int cls, string name, IntPtr size, IntPtr \
default_value, HDF.PInvoke.H5P+prp_cb1_t create, HDF.PInvoke.H5P+prp_cb2_t \
set, HDF.PInvoke.H5P+prp_cb2_t get, HDF.PInvoke.H5P+prp_cb2_t delete, \
HDF.PInvoke.H5P+prp_cb1_t copy, HDF.PInvoke.H5P+prp_compare_func_t compare, \
HDF.PInvoke.H5P+prp_cb1_t close)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["remove",
      FontWeight->"Bold"], "\<\"(int plid, string name)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["remove_filter",
      FontWeight->
       "Bold"], "\<\"(int plist_id, HDF.PInvoke.H5Z+filter_t filter)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set",
      FontWeight->"Bold"], "\<\"(int plid, string name, IntPtr value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_alignment",
      FontWeight->
       "Bold"], "\<\"(int plist, unsigned long threshold, unsigned long \
alignment)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_alloc", "_time"}],
      FontWeight->
       "Bold"], "\<\"(int plist_id, HDF.PInvoke.H5D+alloc_time_t \
alloc_time)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_attr", "_creation", "_order"}],
      FontWeight->
       "Bold"], "\<\"(int ocpl_id, unsigned crt_order_flags)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_attr", "_phase", "_change"}],
      FontWeight->
       "Bold"], "\<\"(int ocpl_id, [optional, default = 8] unsigned \
max_compact, [optional, default = 6] unsigned min_dense)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_btree", "_ratios"}],
      FontWeight->
       "Bold"], "\<\"(int plist, double left, double middle, double \
right)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_buffer",
      FontWeight->
       "Bold"], "\<\"(int plist, unsigned long size, IntPtr tconv, IntPtr \
bkg)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_cache",
      FontWeight->
       "Bold"], "\<\"(int plist_id, int mdc_nelmts, IntPtr rdcc_nslots, \
IntPtr rdcc_nbytes, double rdcc_w0)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_char", "_encoding"}],
      FontWeight->
       "Bold"], "\<\"(int plist_id, HDF.PInvoke.H5T+cset_t encoding)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_chunk",
      FontWeight->
       "Bold"], "\<\"(int plist_id, int ndims, unsigned long[] dims)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_chunk",
      FontWeight->
       "Bold"], "\<\"(int plist_id, int ndims, unsigned long* dims)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_chunk", "_cache"}],
      FontWeight->
       "Bold"], "\<\"(int dapl_id, IntPtr rdcc_nslots, IntPtr rdcc_nbytes, \
double rdcc_w0)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_copy", "_object"}],
      FontWeight->"Bold"], "\<\"(int ocpypl_id, unsigned copy_options)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_core", "_write", "_tracking"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, unsigned is_enabled, IntPtr \
page_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_create", "_intermediate", "_group"}],
      FontWeight->
       "Bold"], "\<\"(int lcpl_id, unsigned crt_intermed_group)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_data", "_transform"}],
      FontWeight->"Bold"], "\<\"(int plist_id, string expression)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_deflate",
      FontWeight->"Bold"], "\<\"(int plist_id, unsigned level)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_driver",
      FontWeight->
       "Bold"], "\<\"(int plist_id, int new_driver_id, IntPtr \
new_driver_info)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_edc", "_check"}],
      FontWeight->
       "Bold"], "\<\"(int plist, HDF.PInvoke.H5Z+EDC_t check)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_efile", "_prefix"}],
      FontWeight->"Bold"], "\<\"(int dapl, string prefix)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_elink", "_acc", "_flags"}],
      FontWeight->"Bold"], "\<\"(int lapl_id, unsigned flags)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_elink", "_cb"}],
      FontWeight->
       "Bold"], "\<\"(int lapl_id, HDF.PInvoke.H5L+elink_traverse_t func, \
IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_elink", "_fapl"}],
      FontWeight->"Bold"], "\<\"(int lapl_id, int fapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_elink", "_file", "_cache", "_size"}],
      FontWeight->"Bold"], "\<\"(int fapl_id, unsigned efc_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_elink", "_prefix"}],
      FontWeight->"Bold"], "\<\"(int lapl_id, string prefix)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_est", "_link", "_info"}],
      FontWeight->
       "Bold"], "\<\"(int gcpl_id, unsigned est_num_entries, unsigned \
est_name_len)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_external",
      FontWeight->
       "Bold"], "\<\"(int plist, string name, IntPtr offset, unsigned long \
size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_family", "_offset"}],
      FontWeight->"Bold"], "\<\"(int fapl_id, unsigned long offset)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_fapl", "_core"}],
      FontWeight->
       "Bold"], "\<\"(int fapl, IntPtr increment, unsigned \
backing_store)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_fapl", "_direct"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, IntPtr alignment, IntPtr block_size, \
IntPtr cbuf_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_fapl", "_family"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, unsigned long memb_size, int memb_fapl_id)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_fapl", "_log"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, string logfile, unsigned long flags, \
IntPtr buf_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_fapl", "_sec2"}],
      FontWeight->"Bold"], "\<\"(int fapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_fapl", "_split"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, string meta_ext, int meta_plist_id, string \
raw_ext, int raw_plist_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_fapl", "_stdio"}],
      FontWeight->"Bold"], "\<\"(int fapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_fapl", "_windows"}],
      FontWeight->"Bold"], "\<\"(int fapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_fclose", "_degree"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, HDF.PInvoke.H5F+close_degree_t \
fc_degree)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_file", "_image"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, IntPtr buf_ptr, IntPtr buf_len)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_file", "_image", "_callbacks"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, ref \
HDF.PInvoke.H5FD+file_image_callbacks_t callbacks_ptr)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_fill", "_time"}],
      FontWeight->
       "Bold"], "\<\"(int plist_id, HDF.PInvoke.H5D+fill_time_t \
fill_time)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_fill", "_value"}],
      FontWeight->
       "Bold"], "\<\"(int plist_id, int type_id, IntPtr value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_filter",
      FontWeight->
       "Bold"], "\<\"(int plist_id, HDF.PInvoke.H5Z+filter_t filter_id, \
unsigned flags, IntPtr cd_nelmts, unsigned[] cd_values)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_filter", "_callback"}],
      FontWeight->
       "Bold"], "\<\"(int plist, HDF.PInvoke.H5Z+filter_func_t func, IntPtr \
op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_fletcher32",
      FontWeight->"Bold"], "\<\"(int plist_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_gc", "_reference"}],
      FontWeight->"Bold"], "\<\"(int plist, unsigned gc_ref)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_hyper", "_vector", "_size"}],
      FontWeight->"Bold"], "\<\"(int dxpl_id, IntPtr vector_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_istore", "_k"}],
      FontWeight->"Bold"], "\<\"(int fcpl_id, unsigned ik)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_layout",
      FontWeight->
       "Bold"], "\<\"(int plist, HDF.PInvoke.H5D+layout_t layout)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_libver", "_bounds"}],
      FontWeight->
       "Bold"], "\<\"(int plist, [optional, default = EARLIEST] \
HDF.PInvoke.H5F+libver_t low, [optional, default = LATEST] \
HDF.PInvoke.H5F+libver_t high)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_link", "_creation", "_order"}],
      FontWeight->
       "Bold"], "\<\"(int gcpl_id, unsigned crt_order_flags)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_link", "_phase", "_change"}],
      FontWeight->
       "Bold"], "\<\"(int gcpl_id, [optional, default = 8] unsigned \
max_compact, [optional, default = 6] unsigned min_dense)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_local", "_heap", "_size", "_hint"}],
      FontWeight->"Bold"], "\<\"(int gcpl_id, IntPtr size_hint)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_mcdt", "_search", "_cb"}],
      FontWeight->
       "Bold"], "\<\"(int ocpypl_id, HDF.PInvoke.H5O+mcdt_search_cb_t func, \
IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_mdc", "_config"}],
      FontWeight->
       "Bold"], "\<\"(int plist_id, ref HDF.PInvoke.H5AC+cache_config_t \
config_ptr)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_meta", "_block", "_size"}],
      FontWeight->"Bold"], "\<\"(int fapl_id, unsigned long size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_nbit",
      FontWeight->"Bold"], "\<\"(int plist_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_nlinks",
      FontWeight->"Bold"], "\<\"(int lapl_id, IntPtr nlinks)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_obj", "_track", "_times"}],
      FontWeight->"Bold"], "\<\"(int ocpl_id, unsigned track_times)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_scaleoffset",
      FontWeight->
       "Bold"], "\<\"(int plist_id, HDF.PInvoke.H5Z+SO_scale_type_t \
scale_type, int scale_factor)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_shared", "_mesg", "_index"}],
      FontWeight->
       "Bold"], "\<\"(int fcpl_id, unsigned index_num, unsigned \
mesg_type_flags, unsigned min_mesg_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_shared", "_mesg", "_nindexes"}],
      FontWeight->"Bold"], "\<\"(int plist_id, unsigned nindexes)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_shared", "_mesg", "_phase", "_change"}],
      FontWeight->
       "Bold"], "\<\"(int fcpl_id, unsigned max_list, unsigned \
min_btree)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_shuffle",
      FontWeight->"Bold"], "\<\"(int plist_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_sieve", "_buf", "_size"}],
      FontWeight->"Bold"], "\<\"(int fapl_id, IntPtr size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_sizes",
      FontWeight->
       "Bold"], "\<\"(int plist, IntPtr sizeof_addr, IntPtr \
sizeof_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_small", "_data", "_block", "_size"}],
      FontWeight->
       "Bold"], "\<\"(int fapl_id, [optional, default = 2048] unsigned long \
size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_sym", "_k"}],
      FontWeight->
       "Bold"], "\<\"(int fcpl_id, unsigned ik, unsigned lk)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_szip",
      FontWeight->
       "Bold"], "\<\"(int plist, unsigned options_mask, unsigned \
pixels_per_block)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_type", "_conv", "_cb"}],
      FontWeight->
       "Bold"], "\<\"(int plist, HDF.PInvoke.H5T+conv_except_func_t func, \
IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_userblock",
      FontWeight->"Bold"], "\<\"(int plist, unsigned long size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_vlen", "_mem", "_manager"}],
      FontWeight->
       "Bold"], "\<\"(int plist, HDF.PInvoke.H5MM+allocate_t alloc, IntPtr \
alloc_info, HDF.PInvoke.H5MM+free_t free, IntPtr free_info)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["unregister",
      FontWeight->"Bold"], "\<\"(int cls, string name)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017803824124*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5PL\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5PL\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5PL, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5PL",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox["ALL_PLUGIN",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox["FILTER_PLUGIN",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_loading", "_state"}],
      FontWeight->"Bold"], "\<\"(ref int plugin_flags)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_loading", "_state"}],
      FontWeight->"Bold"], "\<\"(int plugin_flags)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178038397503`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5R\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5R\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5R, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5R",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"DSET_REG", "_REF", "_BUF", "_SIZE"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"OBJ_REF", "_BUF", "_SIZE"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create",
      FontWeight->
       "Bold"], "\<\"(IntPtr refer, int loc_id, byte[] name, \
HDF.PInvoke.H5R+type_t ref_type, int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create",
      FontWeight->
       "Bold"], "\<\"(IntPtr refer, int loc_id, string name, \
HDF.PInvoke.H5R+type_t ref_type, int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["dereference",
      FontWeight->
       "Bold"], "\<\"(int obj_id, HDF.PInvoke.H5R+type_t ref_type, IntPtr \
refer)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["get_name",
      FontWeight->
       "Bold"], "\<\"(int loc_id, HDF.PInvoke.H5R+type_t ref_type, IntPtr \
refer, byte[] name, IntPtr size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["get_name",
      FontWeight->
       "Bold"], "\<\"(int loc_id, HDF.PInvoke.H5R+type_t ref_type, IntPtr \
refer, System.Text.StringBuilder name, IntPtr size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_obj", "_type"}],
      FontWeight->
       "Bold"], "\<\"(int loc_id, HDF.PInvoke.H5R+type_t ref_type, IntPtr \
refer, ref HDF.PInvoke.H5O+type_t obj_type)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_region",
      FontWeight->
       "Bold"], "\<\"(int loc_id, HDF.PInvoke.H5R+type_t ref_type, IntPtr \
refer)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017803871002*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5S\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5S\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5S, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5S",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox["ALL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox["MAX_RANK",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned long\"\>", " ", 
     StyleBox["UNLIMITED",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["close",
      FontWeight->"Bold"], "\<\"(int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["copy",
      FontWeight->"Bold"], "\<\"(int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create",
      FontWeight->"Bold"], "\<\"(HDF.PInvoke.H5S+class_t type)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_simple",
      FontWeight->
       "Bold"], "\<\"(int rank, unsigned long[] dims, unsigned long[] \
maxdims)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create_simple",
      FontWeight->
       "Bold"], "\<\"(int rank, unsigned long* dims, unsigned long* \
maxdims)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["decode",
      FontWeight->"Bold"], "\<\"(byte[] buf)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["encode",
      FontWeight->
       "Bold"], "\<\"(int obj_id, byte[] buf, ref IntPtr nalloc)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["extent_copy",
      FontWeight->
       "Bold"], "\<\"(int dest_space_id, int source_space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["extent_equal",
      FontWeight->"Bold"], "\<\"(int space1_id, int space2_id)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_select", "_bounds"}],
      FontWeight->
       "Bold"], "\<\"(int space_id, unsigned long[] start, unsigned long[] \
end)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"long\"\>", " ", 
     StyleBox[
      RowBox[{"get_select", "_elem", "_npoints"}],
      FontWeight->"Bold"], "\<\"(int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_select", "_elem", "_pointlist"}],
      FontWeight->
       "Bold"], "\<\"(int space_id, unsigned long startpoint, unsigned long \
numpoints, unsigned long[] buf)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_select", "_hyper", "_blocklist"}],
      FontWeight->
       "Bold"], "\<\"(int space_id, unsigned long startblock, unsigned long \
numblocks, unsigned long[] buf)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"long\"\>", " ", 
     StyleBox[
      RowBox[{"get_select", "_hyper", "_nblocks"}],
      FontWeight->"Bold"], "\<\"(int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"long\"\>", " ", 
     StyleBox[
      RowBox[{"get_select", "_npoints"}],
      FontWeight->"Bold"], "\<\"(int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5S+sel_type\"\>", " ", 
     StyleBox[
      RowBox[{"get_select", "_type"}],
      FontWeight->"Bold"], "\<\"(int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_simple", "_extent", "_dims"}],
      FontWeight->
       "Bold"], "\<\"(int space_id, unsigned long[] dims, unsigned long[] \
maxdims)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_simple", "_extent", "_dims"}],
      FontWeight->
       "Bold"], "\<\"(int space_id, unsigned long* dims, unsigned long* \
maxdims)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_simple", "_extent", "_ndims"}],
      FontWeight->"Bold"], "\<\"(int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"long\"\>", " ", 
     StyleBox[
      RowBox[{"get_simple", "_extent", "_npoints"}],
      FontWeight->"Bold"], "\<\"(int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5S+class_t\"\>", " ", 
     StyleBox[
      RowBox[{"get_simple", "_extent", "_type"}],
      FontWeight->"Bold"], "\<\"(int space_id)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["is_simple",
      FontWeight->"Bold"], "\<\"(int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["offset_simple",
      FontWeight->"Bold"], "\<\"(int space_id, long[] offset)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["select_all",
      FontWeight->"Bold"], "\<\"(int dspace_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["select_elements",
      FontWeight->
       "Bold"], "\<\"(int space_id, HDF.PInvoke.H5S+seloper_t op, IntPtr \
num_elements, unsigned long[] coord)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["select_hyperslab",
      FontWeight->
       "Bold"], "\<\"(int space_id, HDF.PInvoke.H5S+seloper_t op, unsigned \
long[] start, unsigned long[] stride, unsigned long[] count, unsigned long[] \
block)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["select_hyperslab",
      FontWeight->
       "Bold"], "\<\"(int space_id, HDF.PInvoke.H5S+seloper_t op, unsigned \
long* start, unsigned long* stride, unsigned long* count, unsigned long* \
block)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["select_none",
      FontWeight->"Bold"], "\<\"(int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["select_valid",
      FontWeight->"Bold"], "\<\"(int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_extent", "_none"}],
      FontWeight->"Bold"], "\<\"(int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"set_extent", "_simple"}],
      FontWeight->
       "Bold"], "\<\"(int space_id, int rank, unsigned long[] current_size, \
unsigned long[] maximum_size)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178039178815`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5T",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox["H5T_NSTR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox["NCSET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"OPAQUE_TAG", "_MAX"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"static", " ", "readonly", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["VARIABLE",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["C_S1",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["FORTRAN_S1",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["IEEE_F32BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["IEEE_F32LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["IEEE_F64BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["IEEE_F64LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_B16",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_B32",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_B64",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_B8",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_DOUBLE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_FLOAT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_HADDR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_HBOOL",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_HERR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_HSIZE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_HSSIZE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_INT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_INT16",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_INT32",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_INT64",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_INT8",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_INT", "_FAST16"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_INT", "_FAST32"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_INT", "_FAST64"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_INT", "_FAST8"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_INT", "_LEAST16"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_INT", "_LEAST32"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_INT", "_LEAST64"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_INT", "_LEAST8"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_LDOUBLE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_LLONG",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_LONG",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_OPAQUE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_SCHAR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_SHORT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_UCHAR",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_UINT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_UINT16",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_UINT32",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_UINT64",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_UINT8",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_UINT", "_FAST16"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_UINT", "_FAST32"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_UINT", "_FAST64"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_UINT", "_FAST8"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_UINT", "_LEAST16"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_UINT", "_LEAST32"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_UINT", "_LEAST64"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"NATIVE_UINT", "_LEAST8"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_ULLONG",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_ULONG",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["NATIVE_USHORT",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_B16BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_B16LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_B32BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_B32LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_B64BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_B64LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_B8BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_B8LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_I16BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_I16LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_I32BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_I32LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_I64BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_I64LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_I8BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_I8LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"STD_REF", "_DSETREG"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"STD_REF", "_OBJ"}],
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_U16BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_U16LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_U32BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_U32LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_U64BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_U64LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_U8BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["STD_U8LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["UNIX_D32BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["UNIX_D32LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["UNIX_D64BE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["UNIX_D64LE",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["VAX_F32",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["VAX_F64",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["array_create",
      FontWeight->
       "Bold"], "\<\"(int base_type_id, unsigned rank, unsigned long[] \
dims)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["close",
      FontWeight->"Bold"], "\<\"(int type_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["commit",
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, int dtype_id, [optional, \
default = 0] int lcpl_id, [optional, default = 0] int tcpl_id, [optional, \
default = 0] int tapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["commit",
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, int dtype_id, [optional, \
default = 0] int lcpl_id, [optional, default = 0] int tcpl_id, [optional, \
default = 0] int tapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["commit_anon",
      FontWeight->
       "Bold"], "\<\"(int loc_id, int dtype_id, [optional, default = 0] int \
tcpl_id, [optional, default = 0] int tapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["committed",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["compiler_conv",
      FontWeight->"Bold"], "\<\"(int src_id, int dst_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["convert",
      FontWeight->
       "Bold"], "\<\"(int src_type_id, int dest_type_id, IntPtr nelmts, \
IntPtr buf, IntPtr background, [optional, default = 0] int plist_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["copy",
      FontWeight->"Bold"], "\<\"(int type_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["create",
      FontWeight->
       "Bold"], "\<\"(HDF.PInvoke.H5T+class_t cls, IntPtr size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["decode",
      FontWeight->"Bold"], "\<\"(byte[] buf)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["detect_class",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, HDF.PInvoke.H5T+class_t \
dtype_class)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["encode",
      FontWeight->
       "Bold"], "\<\"(int obj_id, byte[] buf, ref IntPtr nalloc)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["enum_create",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["enum_insert",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, string name, IntPtr value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["enum_nameof",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, IntPtr value, System.Text.StringBuilder \
name, IntPtr size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["enum_valueof",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, string name, IntPtr value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["equal",
      FontWeight->"Bold"], "\<\"(int type_id1, int type_id2)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5T+conv_t\"\>", " ", 
     StyleBox["find",
      FontWeight->
       "Bold"], "\<\"(int src_id, int dst_id, ref HDF.PInvoke.H5T+cdata_t \
pcdata)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_array", "_dims"}],
      FontWeight->"Bold"], "\<\"(int adtype_id, unsigned long[] dims)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_array", "_ndims"}],
      FontWeight->"Bold"], "\<\"(int adtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["get_class",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_create", "_plist"}],
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox["get_cset",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["get_ebias",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_fields",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, ref IntPtr spos, ref IntPtr epos, ref \
IntPtr esize, ref IntPtr mpos, ref IntPtr msize)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5T+pad_t\"\>", " ", 
     StyleBox["get_inpad",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox[
      RowBox[{"get_member", "_class"}],
      FontWeight->"Bold"], "\<\"(int cdtype_id, unsigned member_no)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_member", "_index"}],
      FontWeight->"Bold"], "\<\"(int dtype_id, string field_name)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_member", "_name"}],
      FontWeight->"Bold"], "\<\"(int dtype_id, unsigned field_idx)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox[
      RowBox[{"get_member", "_offset"}],
      FontWeight->"Bold"], "\<\"(int dtype_id, unsigned memb_no)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_member", "_type"}],
      FontWeight->"Bold"], "\<\"(int dtype_id, unsigned field_idx)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_member", "_value"}],
      FontWeight->
       "Bold"], "\<\"(int dtype_id, unsigned memb_no, IntPtr value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_native", "_type"}],
      FontWeight->
       "Bold"], "\<\"(int dtype_id, HDF.PInvoke.H5T+direction_t \
direction)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_nmembers",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5T+norm_t\"\>", " ", 
     StyleBox["get_norm",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_offset",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5T+order_t\"\>", " ", 
     StyleBox["get_order",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_pad",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, ref HDF.PInvoke.H5T+pad_t lsb, ref \
HDF.PInvoke.H5T+pad_t msb)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["get_precision",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5T+sign_t\"\>", " ", 
     StyleBox["get_sign",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["get_size",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox["get_strpad",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["get_super",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["get_tag",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["insert",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, string name, IntPtr offset, int field_id)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"is_variable", "_str"}],
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["lock_datatype",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["open",
      FontWeight->
       "Bold"], "\<\"(int loc_id, byte[] name, [optional, default = 0] int \
tapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["open",
      FontWeight->
       "Bold"], "\<\"(int loc_id, string name, [optional, default = 0] int \
tapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["pack",
      FontWeight->"Bold"], "\<\"(int dtype_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["register",
      FontWeight->
       "Bold"], "\<\"(HDF.PInvoke.H5T+pers_t type, string name, int src_id, \
int dst_id, HDF.PInvoke.H5T+conv_t func)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_cset",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, HDF.PInvoke.H5T+cset_t cset)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_ebias",
      FontWeight->"Bold"], "\<\"(int dtype_id, IntPtr ebias)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_fields",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, IntPtr spos, IntPtr epos, IntPtr esize, \
IntPtr mpos, IntPtr msize)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_inpad",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, HDF.PInvoke.H5T+pad_t inpad)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_norm",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, HDF.PInvoke.H5T+norm_t norm)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_offset",
      FontWeight->"Bold"], "\<\"(int dtype_id, IntPtr offset)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_order",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, HDF.PInvoke.H5T+order_t order)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_pad",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, HDF.PInvoke.H5T+pad_t lsb, \
HDF.PInvoke.H5T+pad_t msb)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_precision",
      FontWeight->"Bold"], "\<\"(int dtype_id, IntPtr precision)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_sign",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, HDF.PInvoke.H5T+sign_t sign)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_size",
      FontWeight->"Bold"], "\<\"(int dtype_id, IntPtr size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_strpad",
      FontWeight->
       "Bold"], "\<\"(int dtype_id, HDF.PInvoke.H5T+str_t strpad)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["set_tag",
      FontWeight->"Bold"], "\<\"(int dtype_id, string tag)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["unregister",
      FontWeight->
       "Bold"], "\<\"(HDF.PInvoke.H5T+pers_t type, string name, int src_id, \
int dst_id, HDF.PInvoke.H5T+conv_t func)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["vlen_create",
      FontWeight->"Bold"], "\<\"(int base_type_id)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017803996011*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["H5Z",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"CONFIG_DECODE", "_ENABLED"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"CONFIG_ENCODE", "_ENABLED"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["filter_avail",
      FontWeight->"Bold"], "\<\"(HDF.PInvoke.H5Z+filter_t filter)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"get_filter", "_info"}],
      FontWeight->
       "Bold"], "\<\"(HDF.PInvoke.H5Z+filter_t filter, ref unsigned \
filter_config)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["register",
      FontWeight->
       "Bold"], "\<\"(ref HDF.PInvoke.H5Z+class_t filter_class)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"int\"\>", " ", 
     StyleBox["unregister",
      FontWeight->"Bold"], "\<\"(HDF.PInvoke.H5Z+filter_t filter)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178040272636`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"class", " "}], 
     StyleBox["\<\"HDF.PInvoke.NativeDependencies\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.NativeDependencies\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.NativeDependencies, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"string\"\>", " ", 
     StyleBox["NativePathSetting",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"void\"\>", " ", 
     StyleBox["ResolvePathToExternalDependencies",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178040428896`*^9},
 AutoSpacing->False],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6796673745316725`*^9, 3.6800178040741444`*^9},
 AutoSpacing->False]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Interfaces", "Subsection",
 CellChangeTimes->{{3.677352118164269*^9, 3.677352124664729*^9}, {
  3.6773528909064*^9, 3.677352892281498*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NETTypeInfo", "[", 
  RowBox[{"assembly", ",", "\"\<Interfaces\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.6773524525871696`*^9, 3.6773524601502056`*^9}, 
   3.677352514323947*^9, {3.6773528870918007`*^9, 3.6773528884531*^9}}],

Cell[BoxData[GridBox[{
   {
    RowBox[{
     RowBox[{"Assembly", ":", " "}], 
     StyleBox["\<\"HDF.PInvoke\"\>",
      FontWeight->"Bold"]}]},
   {"\<\"Full Name: HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017804121021*^9},
 AutoSpacing->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"InputForm", "[", "%", "]"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<interface \>\"", ",", "\"\<\\\"HDF.PInvoke.\\\"\>\"", ",", 
        RowBox[{"StyleBox", "[", 
         RowBox[{
          RowBox[{"item", ":", "_String"}], ",", 
          RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}]}], "]"}]}], "}"}],
       "]"}], "\[RuleDelayed]", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<HDF.PInvoke.\>\"", ",", "item"}], "]"}]}], " ", ",", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"{", "3", "}"}]}], "\[IndentingNewLine]", "]"}], " ", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.67735162650994*^9, 3.677351628010046*^9}, {
   3.6773516702730627`*^9, 3.6773516960649242`*^9}, {3.6773520919367723`*^9, 
   3.6773520996248164`*^9}, {3.6773521756001787`*^9, 
   3.6773524770576515`*^9}, {3.6773525197305794`*^9, 3.6773525590195904`*^9}, 
   3.677352677926027*^9, {3.677352966986747*^9, 3.6773529684868526`*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.6773524287329807`*^9, 3.677352477323296*^9, 
  3.677352520371249*^9, 3.6773525738956437`*^9, 3.6773527892534194`*^9, 
  3.6773528959692574`*^9, 3.6773587835732293`*^9, 3.679667375250478*^9, 
  3.680017804152275*^9},
 AutoSpacing->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Map", "[", "NETTypeInfo", "]"}], "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.677352592947631*^9, 3.677352596994793*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.677352789284672*^9, 3.67735289600051*^9, 
  3.6773587835817375`*^9, 3.6796673752660933`*^9, 3.680017804167899*^9},
 AutoSpacing->False]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Structures", "Subsection",
 CellChangeTimes->{{3.677352118164269*^9, 3.677352124664729*^9}, {
  3.6773528909064*^9, 3.6773529153300037`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NETTypeInfo", "[", 
  RowBox[{"assembly", ",", "\"\<Structures\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.6773524525871696`*^9, 3.6773524601502056`*^9}, 
   3.677352514323947*^9, {3.6773528870918007`*^9, 3.6773528884531*^9}, {
   3.6773529237207546`*^9, 3.6773529255177565`*^9}}],

Cell[BoxData[GridBox[{
   {
    RowBox[{
     RowBox[{"Assembly", ":", " "}], 
     StyleBox["\<\"HDF.PInvoke\"\>",
      FontWeight->"Bold"]}]},
   {"\<\"Full Name: HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Structures",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5AC", "+", 
       RowBox[{"cache_config", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{
       RowBox[{"H5AC", "+", 
        RowBox[{"cache_config", "_t"}], "+"}], "<", 
       RowBox[{"trace_file", "_name"}], ">", "e__FixedBuffer0"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5AC", "+", 
       RowBox[{"metadata_write", "_strategy", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5A", "+", "info_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5C", "+", 
       RowBox[{"cache_decr", "_mode"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5C", "+", 
       RowBox[{"cache_flash", "_incr", "_mode"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5C", "+", 
       RowBox[{"cache_incr", "_mode"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"alloc_time", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"chunk_index", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"fill_time", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"fill_value", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", "layout_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"space_status", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "direction_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "error_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", 
       RowBox[{"close_degree", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"file_image", "_callbacks", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"file_image", "_op", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "info_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "info_t", "+", "sohm_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "libver_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "mem_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "scope_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5G", "+", "info_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5G", "+", 
       RowBox[{"storage_type", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", "H5IterationResult"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", 
       RowBox[{"ih_info", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", "index_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", 
       RowBox[{"iter_order", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5I", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", "class_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", "info_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", "info_t", "+", "u_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"hdr_info", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"hdr_info", "_t"}], "+", "mesg_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"hdr_info", "_t"}], "+", "space_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", "info_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"mcdt_search", "_ret", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"meta_size", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5R", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5S", "+", "class_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5S", "+", "seloper_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5S", "+", "sel_type"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "bkg_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "cdata_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "class_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "cmd_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", 
       RowBox[{"conv_except", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", 
       RowBox[{"conv_ret", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "cset_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "direction_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "hvl_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "norm_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "order_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "pad_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "pers_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "sign_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "str_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"cb_return", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", "class_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", "EDC_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", "filter_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"struct", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"SO_scale", "_type", "_t"}]}],
      FontWeight->"Bold"]}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178041991515`*^9},
 AutoSpacing->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"InputForm", "[", "%", "]"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<struct \>\"", ",", "\"\<\\\"HDF.PInvoke.\\\"\>\"", ",", 
        RowBox[{"StyleBox", "[", 
         RowBox[{
          RowBox[{"item", ":", "_String"}], ",", 
          RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}]}], "]"}]}], "}"}],
       "]"}], "\[RuleDelayed]", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<HDF.PInvoke.\>\"", ",", "item"}], "]"}]}], " ", ",", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"{", "3", "}"}]}], "\[IndentingNewLine]", "]"}], " ", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.67735162650994*^9, 3.677351628010046*^9}, {
   3.6773516702730627`*^9, 3.6773516960649242`*^9}, {3.6773520919367723`*^9, 
   3.6773520996248164`*^9}, {3.6773521756001787`*^9, 
   3.6773524770576515`*^9}, {3.6773525197305794`*^9, 3.6773525590195904`*^9}, 
   3.677352677926027*^9, {3.6773529438784323`*^9, 3.677352945175399*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"HDF.PInvoke.H5AC+cache_config_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5AC+cache_config_t+<trace_file_name>e__FixedBuffer0\
\"\>", ",", "\<\"HDF.PInvoke.H5AC+metadata_write_strategy_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5A+info_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>", 
   ",", "\<\"HDF.PInvoke.H5C+cache_flash_incr_mode\"\>", 
   ",", "\<\"HDF.PInvoke.H5C+cache_incr_mode\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+alloc_time_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+chunk_index_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+fill_time_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+fill_value_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+layout_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+space_status_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5E+direction_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5E+error_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5E+type_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5F+close_degree_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5FD+file_image_callbacks_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5F+info_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5F+info_t+sohm_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5F+libver_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5F+mem_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5F+scope_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5G+info_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5G+storage_type_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5+H5IterationResult\"\>", 
   ",", "\<\"HDF.PInvoke.H5+ih_info_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5+index_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5+iter_order_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5I+type_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+class_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+info_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+info_t+u_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+type_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5O+hdr_info_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5O+hdr_info_t+mesg_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5O+hdr_info_t+space_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5O+info_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5O+meta_size_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5O+type_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5R+type_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5S+class_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5S+sel_type\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+bkg_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+cdata_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+class_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+cmd_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+conv_ret_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+cset_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+direction_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+hvl_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+norm_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+order_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+pad_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+pers_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+sign_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+str_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z+cb_return_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z+class_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z+EDC_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z+SO_scale_type_t\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6773524287329807`*^9, 3.677352477323296*^9, 3.677352520371249*^9, 
   3.6773525738956437`*^9, 3.6773527892534194`*^9, {3.6773528959692574`*^9, 
   3.6773529521731973`*^9}, 3.6773587836287885`*^9, 3.6796673752973557`*^9, 
   3.680017804230404*^9},
 AutoSpacing->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Map", "[", "NETTypeInfo", "]"}], "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.677352592947631*^9, 3.677352596994793*^9}}],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5AC+cache_config_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5AC+cache_config_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5AC+cache_config_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"cache_config", "_t"}],
      FontWeight->"Bold"], "\<\"(int cache_config_version)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"apply_empty", "_reserve"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"apply_max", "_decrement"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"apply_max", "_increment"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"close_trace", "_file"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"double\"\>", " ", 
     StyleBox["decrement",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>", " ", 
     StyleBox["decr_mode",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"dirty_bytes", "_threshold"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"double\"\>", " ", 
     StyleBox["empty_reserve",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"long\"\>", " ", 
     StyleBox["epoch_length",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"epochs_before", "_eviction"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["evictions_enabled",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5C+cache_flash_incr_mode\"\>", " ", 
     StyleBox[
      RowBox[{"flash_incr", "_mode"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"double\"\>", " ", 
     StyleBox["flash_multiple",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"double\"\>", " ", 
     StyleBox["flash_threshold",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"double\"\>", " ", 
     StyleBox["increment",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5C+cache_incr_mode\"\>", " ", 
     StyleBox["incr_mode",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"IntPtr\"\>", " ", 
     StyleBox["initial_size",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"double\"\>", " ", 
     StyleBox[
      RowBox[{"lower_hr", "_threshold"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"IntPtr\"\>", " ", 
     StyleBox["max_decrement",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"IntPtr\"\>", " ", 
     StyleBox["max_increment",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"IntPtr\"\>", " ", 
     StyleBox["max_size",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox[
      RowBox[{"metadata_write", "_strategy"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"double\"\>", " ", 
     StyleBox[
      RowBox[{"min_clean", "_fraction"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"IntPtr\"\>", " ", 
     StyleBox["min_size",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"open_trace", "_file"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"rpt_fcn", "_enabled"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox[
      RowBox[{"set_initial", "_size"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5AC+cache_config_t+<trace_file_name>e__\
FixedBuffer0\"\>", " ", 
     StyleBox[
      RowBox[{"trace_file", "_name"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"double\"\>", " ", 
     StyleBox[
      RowBox[{"upper_hr", "_threshold"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["version",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178042929087`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5AC+cache_config_t+<trace_file_name>e__\
FixedBuffer0\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5AC+cache_config_t+<trace_file_name>e__\
FixedBuffer0\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: \
HDF.PInvoke.H5AC+cache_config_t+<trace_file_name>e__FixedBuffer0, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"char\"\>", " ", 
     StyleBox["FixedElementField",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178043235226`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5AC+metadata_write_strategy_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5AC+metadata_write_strategy_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5AC+metadata_write_strategy_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
    "const", " ", "\<\"HDF.PInvoke.H5AC+metadata_write_strategy_t\"\>", " ", 
     StyleBox["DISTRIBUTED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
    "const", " ", "\<\"HDF.PInvoke.H5AC+metadata_write_strategy_t\"\>", " ", 
     StyleBox[
      RowBox[{"PROCESS_", "0", "_ONLY"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178043649664`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5A+info_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5A+info_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5A+info_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["corder",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["corder_valid",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox["cset",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["data_size",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178043805923`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5C+cache_decr_mode, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>", " ", 
     StyleBox["AGE_OUT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>", " ", 
     StyleBox[
      RowBox[{"AGE_OUT", "_WITH", "_THRESHOLD"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>", " ", 
     StyleBox["OFF",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>", " ", 
     StyleBox["THRESHOLD",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178044118443`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5C+cache_flash_incr_mode\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5C+cache_flash_incr_mode\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5C+cache_flash_incr_mode, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
    "const", " ", "\<\"HDF.PInvoke.H5C+cache_flash_incr_mode\"\>", " ", 
     StyleBox["ADD_SPACE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
    "const", " ", "\<\"HDF.PInvoke.H5C+cache_flash_incr_mode\"\>", " ", 
     StyleBox["OFF",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.68001780442747*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5C+cache_incr_mode\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5C+cache_incr_mode\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5C+cache_incr_mode, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5C+cache_incr_mode\"\>", " ", 
     StyleBox["OFF",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5C+cache_incr_mode\"\>", " ", 
     StyleBox["THRESHOLD",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017804458723*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+alloc_time_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+alloc_time_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+alloc_time_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+alloc_time_t\"\>", " ", 
     StyleBox["DEFAULT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+alloc_time_t\"\>", " ", 
     StyleBox["EARLY",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+alloc_time_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+alloc_time_t\"\>", " ", 
     StyleBox["INCR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+alloc_time_t\"\>", " ", 
     StyleBox["LATE",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017804489984*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+chunk_index_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+chunk_index_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+chunk_index_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+chunk_index_t\"\>", " ", 
     StyleBox["BTREE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+chunk_index_t\"\>", " ", 
     StyleBox["IDX_NTYPES",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017804521227*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+fill_time_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+fill_time_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+fill_time_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_time_t\"\>", " ", 
     StyleBox["ALLOC",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_time_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_time_t\"\>", " ", 
     StyleBox["IFSET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_time_t\"\>", " ", 
     StyleBox["NEVER",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178045524807`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+fill_value_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+fill_value_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+fill_value_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_value_t\"\>", " ", 
     StyleBox["DEFAULT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_value_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_value_t\"\>", " ", 
     StyleBox["UNDEFINED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_value_t\"\>", " ", 
     StyleBox["USER_DEFINED",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017804583733*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+layout_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+layout_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+layout_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+layout_t\"\>", " ", 
     StyleBox["CHUNKED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+layout_t\"\>", " ", 
     StyleBox["COMPACT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+layout_t\"\>", " ", 
     StyleBox["CONTIGUOUS",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+layout_t\"\>", " ", 
     StyleBox["LAYOUT_ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+layout_t\"\>", " ", 
     StyleBox["NLAYOUTS",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178045993595`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+space_status_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+space_status_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+space_status_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+space_status_t\"\>", " ", 
     StyleBox["ALLOCATED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+space_status_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+space_status_t\"\>", " ", 
     StyleBox["NOT_ALLOCATED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+space_status_t\"\>", " ", 
     StyleBox["PART_ALLOCATED",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178046306114`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5E+direction_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5E+direction_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5E+direction_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5E+direction_t\"\>", " ", 
     StyleBox[
      RowBox[{"H5E_WALK", "_DOWNWARD"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5E+direction_t\"\>", " ", 
     StyleBox[
      RowBox[{"H5E_WALK", "_UPWARD"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178046618624`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5E+error_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5E+error_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5E+error_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["cls_id",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["desc",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["file_name",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["func_name",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["line",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["maj_num",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["min_num",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017804693115*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5E+type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5E+type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5E+type_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5E+type_t\"\>", " ", 
     StyleBox["MAJOR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5E+type_t\"\>", " ", 
     StyleBox["MINOR",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017804724368*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5F+close_degree_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5F+close_degree_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5F+close_degree_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+close_degree_t\"\>", " ", 
     StyleBox["DEFAULT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+close_degree_t\"\>", " ", 
     StyleBox["SEMI",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+close_degree_t\"\>", " ", 
     StyleBox["STRONG",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+close_degree_t\"\>", " ", 
     StyleBox["WEAK",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178047399936`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5FD+file_image_callbacks_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5FD+file_image_callbacks_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5FD+file_image_callbacks_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5FD+image_free_t\"\>", " ", 
     StyleBox["image_free",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5FD+image_malloc_t\"\>", " ", 
     StyleBox["image_malloc",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5FD+image_memcpy_t\"\>", " ", 
     StyleBox["image_memcpy",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5FD+image_realloc_t\"\>", " ", 
     StyleBox["image_realloc",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"IntPtr\"\>", " ", 
     StyleBox["udata",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5FD+udata_copy_t\"\>", " ", 
     StyleBox["udata_copy",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5FD+udata_free_t\"\>", " ", 
     StyleBox["udata_free",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178047712464`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5FD+file_image_op_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox["FILE_CLOSE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox["FILE_OPEN",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox["FILE_RESIZE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox["NO_OP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox[
      RowBox[{"PROPERTY_LIST", "_CLOSE"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox[
      RowBox[{"PROPERTY_LIST", "_COPY"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox[
      RowBox[{"PROPERTY_LIST", "_GET"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox[
      RowBox[{"PROPERTY_LIST", "_SET"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178048024983`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5F+info_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5F+info_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5F+info_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5F+info_t+sohm_t\"\>", " ", 
     StyleBox["sohm",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox[
      RowBox[{"super_ext", "_size"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178048181243`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5F+info_t+sohm_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5F+info_t+sohm_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5F+info_t+sohm_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["hdr_size",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5+ih_info_t\"\>", " ", 
     StyleBox["msgs_info",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178048337517`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5F+libver_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5F+libver_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5F+libver_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+libver_t\"\>", " ", 
     StyleBox["EARLIEST",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+libver_t\"\>", " ", 
     StyleBox["LATEST",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178048650208`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5F+mem_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5F+mem_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5F+mem_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["BTREE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["DEFAULT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["DRAW",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["GHEAP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["LHEAP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["NOLIST",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["NTYPES",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["OHDR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["SUPER",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178048962545`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5F+scope_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5F+scope_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5F+scope_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+scope_t\"\>", " ", 
     StyleBox["GLOBAL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+scope_t\"\>", " ", 
     StyleBox["LOCAL",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178049275084`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5G+info_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5G+info_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5G+info_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"long\"\>", " ", 
     StyleBox["max_corder",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["mounted",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["nlinks",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5G+storage_type_t\"\>", " ", 
     StyleBox["storage_type",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178049587617`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5G+storage_type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5G+storage_type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5G+storage_type_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5G+storage_type_t\"\>", " ", 
     StyleBox["COMPACT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5G+storage_type_t\"\>", " ", 
     StyleBox["DENSE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5G+storage_type_t\"\>", " ", 
     StyleBox["SYMBOL_TABLE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5G+storage_type_t\"\>", " ", 
     StyleBox["UNKNOWN",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017804990013*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5+H5IterationResult\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5+H5IterationResult\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5+H5IterationResult, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+H5IterationResult\"\>", " ", 
     StyleBox["CONT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+H5IterationResult\"\>", " ", 
     StyleBox["FAILURE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+H5IterationResult\"\>", " ", 
     StyleBox["STOP",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017805021266*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5+ih_info_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5+ih_info_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5+ih_info_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["heap_size",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["index_size",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017805036891*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5+index_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5+index_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5+index_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+index_t\"\>", " ", 
     StyleBox["CRT_ORDER",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+index_t\"\>", " ", 
     StyleBox["N",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+index_t\"\>", " ", 
     StyleBox["NAME",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+index_t\"\>", " ", 
     StyleBox["UNKNOWN",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017805068145*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5+iter_order_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5+iter_order_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5+iter_order_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+iter_order_t\"\>", " ", 
     StyleBox["DEC",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+iter_order_t\"\>", " ", 
     StyleBox["INC",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+iter_order_t\"\>", " ", 
     StyleBox["N",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+iter_order_t\"\>", " ", 
     StyleBox["NATIVE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+iter_order_t\"\>", " ", 
     StyleBox["UNKNOWN",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178050993967`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5I+type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5I+type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5I+type_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["ATTR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["BADID",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["DATASET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["DATASPACE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["DATATYPE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["ERROR_CLASS",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["ERROR_MSG",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["ERROR_STACK",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["FILE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["GENPROP_CLS",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["GENPROP_LST",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["GROUP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["NTYPES",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["REFERENCE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["UNINIT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["VFL",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178051306486`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+class_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+class_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+class_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["comment",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5L+copy_func_t\"\>", " ", 
     StyleBox["copy_func",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5L+create_func_t\"\>", " ", 
     StyleBox["create_func",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5L+delete_func_t\"\>", " ", 
     StyleBox["del_func",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox["id",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5L+move_func_t\"\>", " ", 
     StyleBox["move_func",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5L+query_func_t\"\>", " ", 
     StyleBox["query_func",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5L+traverse_func_t\"\>", " ", 
     StyleBox["trav_func",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["version",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178051462736`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+info_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+info_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+info_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"long\"\>", " ", 
     StyleBox["corder",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["corder_valid",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox["cset",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox["type",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5L+info_t+u_t\"\>", " ", 
     StyleBox["u",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017805177526*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+info_t+u_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+info_t+u_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+info_t+u_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["address",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"IntPtr\"\>", " ", 
     StyleBox["val_size",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178051931524`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+type_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox["EXTERNAL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox["HARD",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox["MAX",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox["SOFT",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178052244043`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5O+hdr_info_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5O+hdr_info_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5O+hdr_info_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["flags",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5O+hdr_info_t+mesg_t\"\>", " ", 
     StyleBox["mesg",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["nchunks",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["nmesgs",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5O+hdr_info_t+space_t\"\>", " ", 
     StyleBox["space",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["version",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178052556577`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5O+hdr_info_t+mesg_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5O+hdr_info_t+mesg_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5O+hdr_info_t+mesg_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["present",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["shared",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017805271283*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5O+hdr_info_t+space_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5O+hdr_info_t+space_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5O+hdr_info_t+space_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["free",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["mesg",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["meta",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["total",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.68001780528691*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5O+info_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5O+info_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5O+info_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["addr",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["atime",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["btime",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["ctime",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["fileno",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5O+hdr_info_t\"\>", " ", 
     StyleBox["hdr",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5O+meta_size_t\"\>", " ", 
     StyleBox["meta_size",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["mtime",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned long\"\>", " ", 
     StyleBox["num_attrs",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["rc",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5O+type_t\"\>", " ", 
     StyleBox["type",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017805318162*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5O+mcdt_search_ret_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>", " ", 
     StyleBox["CONT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>", " ", 
     StyleBox["STOP",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017805349414*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5O+meta_size_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5O+meta_size_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5O+meta_size_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5+ih_info_t\"\>", " ", 
     StyleBox["attr",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5+ih_info_t\"\>", " ", 
     StyleBox["obj",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.68001780536504*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5O+type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5O+type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5O+type_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+type_t\"\>", " ", 
     StyleBox["DATASET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+type_t\"\>", " ", 
     StyleBox["GROUP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+type_t\"\>", " ", 
     StyleBox["NAMED_DATATYPE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+type_t\"\>", " ", 
     StyleBox["NTYPES",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+type_t\"\>", " ", 
     StyleBox["UNKNOWN",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178053962917`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5R+type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5R+type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5R+type_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5R+type_t\"\>", " ", 
     StyleBox["BADTYPE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5R+type_t\"\>", " ", 
     StyleBox["DATASET_REGION",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5R+type_t\"\>", " ", 
     StyleBox["MAXTYPE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5R+type_t\"\>", " ", 
     StyleBox["OBJECT",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178054275446`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5S+class_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5S+class_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5S+class_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+class_t\"\>", " ", 
     StyleBox["NO_CLASS",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+class_t\"\>", " ", 
     StyleBox["NULL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+class_t\"\>", " ", 
     StyleBox["SCALAR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+class_t\"\>", " ", 
     StyleBox["SIMPLE",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178054587975`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5S+seloper_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5S+seloper_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5S+seloper_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["AND",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["APPEND",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["INVALID",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["NOOP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["NOTA",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["NOTB",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["OR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["PREPEND",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["SET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["XOR",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017805490049*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5S+sel_type\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5S+sel_type\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5S+sel_type, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+sel_type\"\>", " ", 
     StyleBox["ALL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+sel_type\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+sel_type\"\>", " ", 
     StyleBox["HYPERSLABS",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+sel_type\"\>", " ", 
     StyleBox["N",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+sel_type\"\>", " ", 
     StyleBox["NONE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+sel_type\"\>", " ", 
     StyleBox["POINTS",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178055213013`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+bkg_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+bkg_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+bkg_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+bkg_t\"\>", " ", 
     StyleBox["NO",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+bkg_t\"\>", " ", 
     StyleBox["TEMP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+bkg_t\"\>", " ", 
     StyleBox["YES",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178055525537`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+cdata_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+cdata_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+cdata_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5T+cmd_t\"\>", " ", 
     StyleBox["command",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5T+bkg_t\"\>", " ", 
     StyleBox["need_bkg",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"IntPtr\"\>", " ", 
     StyleBox["priv",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["recalc",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.68001780556818*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+class_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+class_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+class_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["ARRAY",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["BITFIELD",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["COMPOUND",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["ENUM",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["FLOAT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["INTEGER",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["NCLASSES",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["NO_CLASS",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["OPAQUE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["REFERENCE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["STRING",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["TIME",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["VLEN",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017805615059*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+cmd_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+cmd_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+cmd_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cmd_t\"\>", " ", 
     StyleBox["CONV",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cmd_t\"\>", " ", 
     StyleBox["FREE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cmd_t\"\>", " ", 
     StyleBox["INIT",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178056463113`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+conv_except_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+conv_except_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+conv_except_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["NAN",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["NINF",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["PINF",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["PRECISION",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["RANGE_HI",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["RANGE_LOW",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["TRUNCATE",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178056775913`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+conv_ret_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+conv_ret_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+conv_ret_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_ret_t\"\>", " ", 
     StyleBox["ABORT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_ret_t\"\>", " ", 
     StyleBox["HANDLED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_ret_t\"\>", " ", 
     StyleBox["UNHANDLED",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178057088175`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+cset_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+cset_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+cset_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox["ASCII",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "10"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "11"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "12"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "13"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "14"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "2"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "3"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "4"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "5"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "6"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "7"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "8"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "9"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox["UTF8",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178057400694`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+direction_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+direction_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+direction_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+direction_t\"\>", " ", 
     StyleBox["ASCEND",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+direction_t\"\>", " ", 
     StyleBox["DEFAULT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+direction_t\"\>", " ", 
     StyleBox["DESCEND",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178057713213`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+hvl_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+hvl_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+hvl_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"IntPtr\"\>", " ", 
     StyleBox["len",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"IntPtr\"\>", " ", 
     StyleBox["p",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178057869473`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+norm_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+norm_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+norm_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+norm_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+norm_t\"\>", " ", 
     StyleBox["IMPLIED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+norm_t\"\>", " ", 
     StyleBox["MSBSET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+norm_t\"\>", " ", 
     StyleBox["NONE",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017805818198*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+order_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+order_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+order_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+order_t\"\>", " ", 
     StyleBox["BE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+order_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+order_t\"\>", " ", 
     StyleBox["LE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+order_t\"\>", " ", 
     StyleBox["MIXED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+order_t\"\>", " ", 
     StyleBox["ONE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+order_t\"\>", " ", 
     StyleBox["VAX",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017805849451*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+pad_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+pad_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+pad_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pad_t\"\>", " ", 
     StyleBox["BACKGROUND",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pad_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pad_t\"\>", " ", 
     StyleBox["NPAD",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pad_t\"\>", " ", 
     StyleBox["ONE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pad_t\"\>", " ", 
     StyleBox["ZERO",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017805880704*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+pers_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+pers_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+pers_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pers_t\"\>", " ", 
     StyleBox["DONTCARE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pers_t\"\>", " ", 
     StyleBox["HARD",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pers_t\"\>", " ", 
     StyleBox["SOFT",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017805911956*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+sign_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+sign_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+sign_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+sign_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+sign_t\"\>", " ", 
     StyleBox["NONE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+sign_t\"\>", " ", 
     StyleBox["NSGN",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+sign_t\"\>", " ", 
     StyleBox[
      RowBox[{"SGN_", "2"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178059432077`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+str_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+str_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+str_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox["NULLPAD",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox["NULLTERM",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "10"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "11"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "12"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "13"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "14"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "15"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "3"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "4"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "5"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "6"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "7"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "8"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "9"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox["SPACEPAD",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178059744596`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z+cb_return_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z+cb_return_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z+cb_return_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+cb_return_t\"\>", " ", 
     StyleBox["CONT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+cb_return_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+cb_return_t\"\>", " ", 
     StyleBox["FAIL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+cb_return_t\"\>", " ", 
     StyleBox["NO",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178060057125`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"struct", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z+class_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z+class_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{"Interfaces", " ", 
     RowBox[{"Implemented", ":", " ", "None"}]}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z+class_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5Z+can_apply_func_t\"\>", " ", 
     StyleBox["can_apply",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["decoder_present",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"unsigned\"\>", " ", 
     StyleBox["encoder_present",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5Z+func_t\"\>", " ", 
     StyleBox["filter",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["id",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"byte*\"\>", " ", 
     StyleBox["name",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"HDF.PInvoke.H5Z+set_local_func_t\"\>", " ", 
     StyleBox["set_local",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["version",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178060213394`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z+EDC_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z+EDC_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z+EDC_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+EDC_t\"\>", " ", 
     StyleBox["DISABLE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+EDC_t\"\>", " ", 
     StyleBox["ENABLE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+EDC_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+EDC_t\"\>", " ", 
     StyleBox["NO",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178060525913`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z+filter_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z+filter_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z+filter_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["DEFLATE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["FLETCHER32",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["MAX",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["NBIT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["NONE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["RESERVED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["SCALEOFFSET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["SHUFFLE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["SZIP",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.68001780609947*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z+SO_scale_type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z+SO_scale_type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z+SO_scale_type_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+SO_scale_type_t\"\>", " ", 
     StyleBox["FLOAT_DSCALE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+SO_scale_type_t\"\>", " ", 
     StyleBox["FLOAT_ESCALE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+SO_scale_type_t\"\>", " ", 
     StyleBox["INT",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017806130722*^9},
 AutoSpacing->False],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6796673754692483`*^9, 3.6800178061463485`*^9},
 AutoSpacing->False]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Delegates", "Subsection",
 CellChangeTimes->{{3.677352118164269*^9, 3.677352124664729*^9}, {
  3.6773528909064*^9, 3.6773529153300037`*^9}, {3.6773530363389025`*^9, 
  3.677353037401477*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NETTypeInfo", "[", 
  RowBox[{"assembly", ",", "\"\<Delegates\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.6773524525871696`*^9, 3.6773524601502056`*^9}, 
   3.677352514323947*^9, {3.6773528870918007`*^9, 3.6773528884531*^9}, {
   3.6773529237207546`*^9, 3.6773529255177565`*^9}, {3.6773530223222847`*^9, 
   3.677353023525494*^9}}],

Cell[BoxData[GridBox[{
   {
    RowBox[{
     RowBox[{"Assembly", ":", " "}], 
     StyleBox["\<\"HDF.PInvoke\"\>",
      FontWeight->"Bold"]}]},
   {"\<\"Full Name: HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Delegates",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5A", "+", "operator_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"gather_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", "operator_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"scatter_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "auto_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "walk_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"image_free", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"image_malloc", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"image_memcpy", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"image_realloc", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"udata_copy", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"udata_free", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5I", "+", "free_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5I", "+", 
       RowBox[{"search_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"copy_func", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"copy_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"create_func", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"create_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"delete_func", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"delete_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"elink_traverse", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"elink_traverse", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", "iterate_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"move_func", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"move_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"query_func", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"query_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"traverse_func", "_ascii", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", 
       RowBox[{"traverse_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5MM", "+", "allocate_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5MM", "+", "free_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", "iterate_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"mcdt_search", "_cb", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", 
       RowBox[{"cls_close", "_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", 
       RowBox[{"cls_copy", "_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", 
       RowBox[{"cls_create", "_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", "iterate_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", 
       RowBox[{"prp_cb1", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", 
       RowBox[{"prp_cb2", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5P", "+", 
       RowBox[{"prp_compare", "_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", 
       RowBox[{"conv_except", "_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "conv_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"can_apply", "_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"filter_func", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", "func_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"set_local", "_func", "_t"}]}],
      FontWeight->"Bold"]}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178061932263`*^9},
 AutoSpacing->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"InputForm", "[", "%", "]"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<delegate \>\"", ",", "\"\<\\\"HDF.PInvoke.\\\"\>\"", ",", 
        RowBox[{"StyleBox", "[", 
         RowBox[{
          RowBox[{"item", ":", "_String"}], ",", 
          RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}]}], "]"}]}], "}"}],
       "]"}], "\[RuleDelayed]", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<HDF.PInvoke.\>\"", ",", "item"}], "]"}]}], " ", ",", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"{", "3", "}"}]}], "\[IndentingNewLine]", "]"}], " ", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.67735162650994*^9, 3.677351628010046*^9}, {
   3.6773516702730627`*^9, 3.6773516960649242`*^9}, {3.6773520919367723`*^9, 
   3.6773520996248164`*^9}, {3.6773521756001787`*^9, 
   3.6773524770576515`*^9}, {3.6773525197305794`*^9, 3.6773525590195904`*^9}, 
   3.677352677926027*^9, {3.6773530279164305`*^9, 3.677353030901016*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"HDF.PInvoke.H5A+operator_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+gather_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+operator_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+scatter_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5E+auto_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5E+walk_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5FD+image_free_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5FD+image_malloc_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5FD+image_memcpy_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5FD+image_realloc_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5FD+udata_copy_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5FD+udata_free_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5I+free_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5I+search_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+copy_func_ascii_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+copy_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+create_func_ascii_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+create_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+delete_func_ascii_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+delete_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+elink_traverse_ascii_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+elink_traverse_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+iterate_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+move_func_ascii_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+move_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+query_func_ascii_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+query_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+traverse_func_ascii_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+traverse_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5MM+allocate_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5MM+free_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5O+iterate_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5O+mcdt_search_cb_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5P+cls_close_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5P+cls_copy_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5P+cls_create_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5P+iterate_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5P+prp_cb1_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5P+prp_cb2_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5P+prp_compare_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+conv_except_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+conv_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z+can_apply_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z+filter_func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z+func_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z+set_local_func_t\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6773524287329807`*^9, 3.677352477323296*^9, 3.677352520371249*^9, 
   3.6773525738956437`*^9, 3.6773527892534194`*^9, {3.6773528959692574`*^9, 
   3.6773529190958953`*^9}, 3.677353042573718*^9, 3.6773587852976503`*^9, 
   3.6796673769693623`*^9, 3.680017806208853*^9},
 AutoSpacing->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Map", "[", "NETTypeInfo", "]"}], "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.677352592947631*^9, 3.677352596994793*^9}}],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5A+operator_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5A+operator_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5A+operator_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["operator_t",
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(int location_id, IntPtr attr_name, ref \
HDF.PInvoke.H5A+info_t ainfo, IntPtr op_data, AsyncCallback callback, object \
object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->
       "Bold"], "\<\"(ref HDF.PInvoke.H5A+info_t ainfo, IAsyncResult \
result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(int location_id, IntPtr attr_name, ref \
HDF.PInvoke.H5A+info_t ainfo, IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178062713575`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+gather_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+gather_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+gather_func_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"gather_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr dst_buf, IntPtr dst_buf_bytes_used, IntPtr \
op_data, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr dst_buf, IntPtr dst_buf_bytes_used, IntPtr \
op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178062869835`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+operator_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+operator_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+operator_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["operator_t",
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr elem, int type_id, unsigned ndim, unsigned \
long[] point, IntPtr op_data, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr elem, int type_id, unsigned ndim, unsigned \
long[] point, IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017806318236*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+scatter_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+scatter_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+scatter_func_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"scatter_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(ref IntPtr src_buf, ref IntPtr src_buf_bytes_used, \
IntPtr op_data, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->
       "Bold"], "\<\"(ref IntPtr src_buf, ref IntPtr src_buf_bytes_used, \
IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(ref IntPtr src_buf, ref IntPtr src_buf_bytes_used, \
IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178063494883`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5E+auto_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5E+auto_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5E+auto_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["auto_t",
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(int estack, IntPtr client_data, AsyncCallback callback, \
object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->"Bold"], "\<\"(int estack, IntPtr client_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.68001780638074*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5E+walk_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5E+walk_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5E+walk_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["walk_t",
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(unsigned n, ref HDF.PInvoke.H5E+error_t err_desc, \
IntPtr client_data, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->
       "Bold"], "\<\"(ref HDF.PInvoke.H5E+error_t err_desc, IAsyncResult \
result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(unsigned n, ref HDF.PInvoke.H5E+error_t err_desc, \
IntPtr client_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017806411993*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5FD+image_free_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5FD+image_free_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5FD+image_free_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"image_free", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr ptr, HDF.PInvoke.H5FD+file_image_op_t \
file_image_op, IntPtr udata, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr ptr, HDF.PInvoke.H5FD+file_image_op_t \
file_image_op, IntPtr udata)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017806443246*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5FD+image_malloc_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5FD+image_malloc_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5FD+image_malloc_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"image_malloc", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr size, HDF.PInvoke.H5FD+file_image_op_t \
file_image_op, IntPtr udata, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr size, HDF.PInvoke.H5FD+file_image_op_t \
file_image_op, IntPtr udata)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017806458872*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5FD+image_memcpy_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5FD+image_memcpy_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5FD+image_memcpy_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"image_memcpy", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr dest, IntPtr src, IntPtr size, \
HDF.PInvoke.H5FD+file_image_op_t file_image_op, IntPtr udata, AsyncCallback \
callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr dest, IntPtr src, IntPtr size, \
HDF.PInvoke.H5FD+file_image_op_t file_image_op, IntPtr udata)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178064901237`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5FD+image_realloc_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5FD+image_realloc_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5FD+image_realloc_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"image_realloc", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr ptr, IntPtr size, \
HDF.PInvoke.H5FD+file_image_op_t file_image_op, IntPtr udata, AsyncCallback \
callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr ptr, IntPtr size, \
HDF.PInvoke.H5FD+file_image_op_t file_image_op, IntPtr udata)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178065213757`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5FD+udata_copy_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5FD+udata_copy_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5FD+udata_copy_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"udata_copy", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr udata, AsyncCallback callback, object \
object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->"Bold"], "\<\"(IntPtr udata)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178065526285`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5FD+udata_free_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5FD+udata_free_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5FD+udata_free_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"udata_free", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr udata, AsyncCallback callback, object \
object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->"Bold"], "\<\"(IntPtr udata)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178065838804`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5I+free_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5I+free_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5I+free_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["free_t",
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr obj, AsyncCallback callback, object \
object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->"Bold"], "\<\"(IntPtr obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017806615133*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5I+search_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5I+search_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5I+search_func_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"search_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr obj, int id, IntPtr key, AsyncCallback callback, \
object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->"Bold"], "\<\"(IntPtr obj, int id, IntPtr key)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178066307592`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+copy_func_ascii_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+copy_func_ascii_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+copy_func_ascii_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"copy_func", "_ascii", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(string new_name, int new_loc, IntPtr lnkdata, IntPtr \
lnkdata_size, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(string new_name, int new_loc, IntPtr lnkdata, IntPtr \
lnkdata_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017806662011*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+copy_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+copy_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+copy_func_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"copy_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(byte[] new_name, int new_loc, IntPtr lnkdata, IntPtr \
lnkdata_size, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(byte[] new_name, int new_loc, IntPtr lnkdata, IntPtr \
lnkdata_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178066932635`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+create_func_ascii_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+create_func_ascii_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+create_func_ascii_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"create_func", "_ascii", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(string link_name, int loc_group, IntPtr lnkdata, IntPtr \
lnkdata_size, int lcpl_id, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(string link_name, int loc_group, IntPtr lnkdata, IntPtr \
lnkdata_size, int lcpl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017806724516*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+create_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+create_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+create_func_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"create_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(byte[] link_name, int loc_group, IntPtr lnkdata, IntPtr \
lnkdata_size, int lcpl_id, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(byte[] link_name, int loc_group, IntPtr lnkdata, IntPtr \
lnkdata_size, int lcpl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178067557683`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+delete_func_ascii_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+delete_func_ascii_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+delete_func_ascii_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"delete_func", "_ascii", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(string link_name, int file, IntPtr lnkdata, IntPtr \
lnkdata_size, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(string link_name, int file, IntPtr lnkdata, IntPtr \
lnkdata_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178067870207`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+delete_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+delete_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+delete_func_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"delete_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(byte[] link_name, int file, IntPtr lnkdata, IntPtr \
lnkdata_size, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(byte[] link_name, int file, IntPtr lnkdata, IntPtr \
lnkdata_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178068339*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+elink_traverse_ascii_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+elink_traverse_ascii_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+elink_traverse_ascii_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"elink_traverse", "_ascii", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(string parent_file_name, string parent_group_name, \
string child_file_name, string child_object_name, ref unsigned acc_flags, int \
fapl_id, IntPtr op_data, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->
       "Bold"], "\<\"(ref unsigned acc_flags, IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(string parent_file_name, string parent_group_name, \
string child_file_name, string child_object_name, ref unsigned acc_flags, int \
fapl_id, IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178068651514`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+elink_traverse_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+elink_traverse_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+elink_traverse_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"elink_traverse", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(string parent_file_name, byte[] parent_group_name, \
string child_file_name, byte[] child_object_name, ref unsigned acc_flags, int \
fapl_id, IntPtr op_data, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->
       "Bold"], "\<\"(ref unsigned acc_flags, IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(string parent_file_name, byte[] parent_group_name, \
string child_file_name, byte[] child_object_name, ref unsigned acc_flags, int \
fapl_id, IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178068964033`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+iterate_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+iterate_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+iterate_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["iterate_t",
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(int group, IntPtr name, ref HDF.PInvoke.H5L+info_t \
info, IntPtr op_data, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->
       "Bold"], "\<\"(ref HDF.PInvoke.H5L+info_t info, IAsyncResult result)\"\
\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(int group, IntPtr name, ref HDF.PInvoke.H5L+info_t \
info, IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178069276557`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+move_func_ascii_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+move_func_ascii_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+move_func_ascii_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"move_func", "_ascii", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(string new_name, int new_loc, IntPtr lnkdata, IntPtr \
lnkdata_size, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(string new_name, int new_loc, IntPtr lnkdata, IntPtr \
lnkdata_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017806958908*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+move_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+move_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+move_func_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"move_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(byte[] new_name, int new_loc, IntPtr lnkdata, IntPtr \
lnkdata_size, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(byte[] new_name, int new_loc, IntPtr lnkdata, IntPtr \
lnkdata_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017806990161*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+query_func_ascii_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+query_func_ascii_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+query_func_ascii_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"query_func", "_ascii", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(string link_name, IntPtr lnkdata, IntPtr lnkdata_size, \
IntPtr buf, IntPtr buf_size, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(string link_name, IntPtr lnkdata, IntPtr lnkdata_size, \
IntPtr buf, IntPtr buf_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017807021413*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+query_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+query_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+query_func_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"query_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(byte[] link_name, IntPtr lnkdata, IntPtr lnkdata_size, \
IntPtr buf, IntPtr buf_size, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(byte[] link_name, IntPtr lnkdata, IntPtr lnkdata_size, \
IntPtr buf, IntPtr buf_size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017807052665*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+traverse_func_ascii_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+traverse_func_ascii_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+traverse_func_ascii_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"traverse_func", "_ascii", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(string link_name, int cur_group, IntPtr lnkdata, IntPtr \
lnkdata_size, int lapl_id, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(string link_name, int cur_group, IntPtr lnkdata, IntPtr \
lnkdata_size, int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017807083917*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+traverse_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+traverse_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+traverse_func_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"traverse_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(byte[] link_name, int cur_group, IntPtr lnkdata, IntPtr \
lnkdata_size, int lapl_id, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(byte[] link_name, int cur_group, IntPtr lnkdata, IntPtr \
lnkdata_size, int lapl_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.68001780711517*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5MM+allocate_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5MM+allocate_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5MM+allocate_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["allocate_t",
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr size, IntPtr alloc_info, AsyncCallback callback, \
object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->"Bold"], "\<\"(IntPtr size, IntPtr alloc_info)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178071464224`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5MM+free_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5MM+free_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5MM+free_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["free_t",
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr mem, IntPtr free_info, AsyncCallback callback, \
object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->"Bold"], "\<\"(IntPtr mem, IntPtr free_info)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017807177675*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5O+iterate_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5O+iterate_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5O+iterate_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["iterate_t",
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(int obj, IntPtr name, ref HDF.PInvoke.H5O+info_t info, \
IntPtr op_data, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->
       "Bold"], "\<\"(ref HDF.PInvoke.H5O+info_t info, IAsyncResult result)\"\
\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(int obj, IntPtr name, ref HDF.PInvoke.H5O+info_t info, \
IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178072089267`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5O+mcdt_search_cb_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5O+mcdt_search_cb_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5O+mcdt_search_cb_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"mcdt_search", "_cb", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr op_data, AsyncCallback callback, object \
object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->"Bold"], "\<\"(IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017807240179*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5P+cls_close_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5P+cls_close_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5P+cls_close_func_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"cls_close", "_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(int prop_id, IntPtr close_data, AsyncCallback callback, \
object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->"Bold"], "\<\"(int prop_id, IntPtr close_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017807271432*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5P+cls_copy_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5P+cls_copy_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5P+cls_copy_func_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"cls_copy", "_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(int new_prop_id, int old_prop_id, IntPtr copy_data, \
AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(int new_prop_id, int old_prop_id, IntPtr \
copy_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178073183107`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5P+cls_create_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5P+cls_create_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5P+cls_create_func_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"cls_create", "_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(int prop_id, IntPtr create_data, AsyncCallback \
callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->"Bold"], "\<\"(int prop_id, IntPtr create_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178073495626`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5P+iterate_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5P+iterate_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5P+iterate_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["iterate_t",
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(int id, string name, IntPtr iter_data, AsyncCallback \
callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(int id, string name, IntPtr iter_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017807380816*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5P+prp_cb1_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5P+prp_cb1_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5P+prp_cb1_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"prp_cb1", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(string name, IntPtr size, IntPtr value, AsyncCallback \
callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(string name, IntPtr size, IntPtr value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178073964405`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5P+prp_cb2_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5P+prp_cb2_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5P+prp_cb2_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"prp_cb2", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(int prop_id, string name, IntPtr size, IntPtr value, \
AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(int prop_id, string name, IntPtr size, IntPtr \
value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017807427693*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5P+prp_compare_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5P+prp_compare_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5P+prp_compare_func_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"prp_compare", "_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr value1, IntPtr value2, IntPtr size, \
AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(IntPtr value1, IntPtr value2, IntPtr size)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178074589458`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+conv_except_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+conv_except_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+conv_except_func_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"conv_except", "_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(HDF.PInvoke.H5T+conv_except_t except_type, int src_id, \
int dst_id, IntPtr src_buf, IntPtr dst_buf, IntPtr user_data, AsyncCallback \
callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"HDF.PInvoke.H5T+conv_ret_t\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"HDF.PInvoke.H5T+conv_ret_t\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(HDF.PInvoke.H5T+conv_except_t except_type, int src_id, \
int dst_id, IntPtr src_buf, IntPtr dst_buf, IntPtr user_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017807490198*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+conv_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+conv_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+conv_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["conv_t",
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(int src_id, int dst_id, ref HDF.PInvoke.H5T+cdata_t \
cdata, IntPtr nelmts, IntPtr buf_stride, IntPtr bkg_stride, IntPtr buf, \
IntPtr bkg, int dset_xfer_plist, AsyncCallback callback, object \
object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->
       "Bold"], "\<\"(ref HDF.PInvoke.H5T+cdata_t cdata, IAsyncResult result)\
\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(int src_id, int dst_id, ref HDF.PInvoke.H5T+cdata_t \
cdata, IntPtr nelmts, IntPtr buf_stride, IntPtr bkg_stride, IntPtr buf, \
IntPtr bkg, [optional, default = 0] int dset_xfer_plist)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.68001780752145*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z+can_apply_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z+can_apply_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z+can_apply_func_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"can_apply", "_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(int dcpl_id, int type_id, int space_id, AsyncCallback \
callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(int dcpl_id, int type_id, int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178075527024`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z+filter_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z+filter_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z+filter_func_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"filter_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(HDF.PInvoke.H5Z+filter_t filter, IntPtr buf, IntPtr \
buf_size, IntPtr op_data, AsyncCallback callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"HDF.PInvoke.H5Z+cb_return_t\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"HDF.PInvoke.H5Z+cb_return_t\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(HDF.PInvoke.H5Z+filter_t filter, IntPtr buf, IntPtr \
buf_size, IntPtr op_data)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017807583955*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z+func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z+func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z+func_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox["func_t",
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(unsigned flags, IntPtr cd_nelmts, unsigned[] cd_values, \
IntPtr nbytes, ref IntPtr buf_size, ref IntPtr buf, AsyncCallback callback, \
object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->
       "Bold"], "\<\"(ref IntPtr buf_size, ref IntPtr buf, IAsyncResult \
result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"IntPtr\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(unsigned flags, IntPtr cd_nelmts, unsigned[] cd_values, \
IntPtr nbytes, ref IntPtr buf_size, ref IntPtr buf)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178076152067`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"delegate", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z+set_local_func_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.Delegate\"\>"}]},
      {
       RowBox[{
       "   ", "   ", "   ", "   ", "\<\"System.MulticastDelegate\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z+set_local_func_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"ICloneable\"\>"}]}], ",", 
     " ", "\<\"System.Runtime.Serialization.ISerializable\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z+set_local_func_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Constructors",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     StyleBox[
      RowBox[{"set_local", "_func", "_t"}],
      FontWeight->"Bold"], "\<\"(object object, IntPtr method)\"\>"}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Properties",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"System.Reflection.MethodInfo\"\>", " ", 
     StyleBox["Method",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["Target",
      FontWeight->"Bold"], 
     RowBox[{"  ", 
      RowBox[{"[", 
       RowBox[{"read", " ", "only"}], "]"}]}]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"virtual", " ", "\<\"IAsyncResult\"\>", " ", 
     StyleBox["BeginInvoke",
      FontWeight->
       "Bold"], "\<\"(int dcpl_id, int type_id, int space_id, AsyncCallback \
callback, object object)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"object\"\>", " ", 
     StyleBox["Clone",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate a, Delegate b)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Combine",
      FontWeight->"Bold"], "\<\"(Delegate[] delegates)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object target, string method, bool \
ignoreCase, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase)\
\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, Type target, string method, bool ignoreCase, \
bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method, bool \
throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, object firstArgument, \
System.Reflection.MethodInfo method, bool throwOnBindFailure)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["CreateDelegate",
      FontWeight->
       "Bold"], "\<\"(Type type, System.Reflection.MethodInfo method)\"\>"}]},
   {
    RowBox[{"\<\"object\"\>", " ", 
     StyleBox["DynamicInvoke",
      FontWeight->"Bold"], "\<\"(object[] args)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["EndInvoke",
      FontWeight->"Bold"], "\<\"(IAsyncResult result)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"Delegate[]\"\>", " ", 
     StyleBox["GetInvocationList",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"void\"\>", " ", 
     StyleBox["GetObjectData",
      FontWeight->
       "Bold"], "\<\"(System.Runtime.Serialization.SerializationInfo info, \
System.Runtime.Serialization.StreamingContext context)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["Invoke",
      FontWeight->
       "Bold"], "\<\"(int dcpl_id, int type_id, int space_id)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Equality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->
       "Bold"], "\<\"(MulticastDelegate d1, MulticastDelegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["op_Inequality",
      FontWeight->"Bold"], "\<\"(Delegate d1, Delegate d2)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["Remove",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Delegate\"\>", " ", 
     StyleBox["RemoveAll",
      FontWeight->"Bold"], "\<\"(Delegate source, Delegate value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178076620855`*^9},
 AutoSpacing->False],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.6796673771256065`*^9, 3.680017807677712*^9},
 AutoSpacing->False]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Enums", "Subsection",
 CellChangeTimes->{{3.677352118164269*^9, 3.677352124664729*^9}, {
  3.6773528909064*^9, 3.6773529153300037`*^9}, {3.6773530363389025`*^9, 
  3.677353037401477*^9}, {3.677353083539792*^9, 3.6773530841648355`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NETTypeInfo", "[", 
  RowBox[{"assembly", ",", "\"\<Enums\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.6773524525871696`*^9, 3.6773524601502056`*^9}, 
   3.677352514323947*^9, {3.6773528870918007`*^9, 3.6773528884531*^9}, {
   3.6773529237207546`*^9, 3.6773529255177565`*^9}, {3.6773530223222847`*^9, 
   3.677353023525494*^9}, {3.677353086993162*^9, 3.677353089352703*^9}}],

Cell[BoxData[GridBox[{
   {
    RowBox[{
     RowBox[{"Assembly", ":", " "}], 
     StyleBox["\<\"HDF.PInvoke\"\>",
      FontWeight->"Bold"]}]},
   {"\<\"Full Name: HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Enums",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5AC", "+", 
       RowBox[{"metadata_write", "_strategy", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5C", "+", 
       RowBox[{"cache_decr", "_mode"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5C", "+", 
       RowBox[{"cache_flash", "_incr", "_mode"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5C", "+", 
       RowBox[{"cache_incr", "_mode"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"alloc_time", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"chunk_index", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"fill_time", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"fill_value", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", "layout_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5D", "+", 
       RowBox[{"space_status", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "direction_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5E", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", 
       RowBox[{"close_degree", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5FD", "+", 
       RowBox[{"file_image", "_op", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "libver_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "mem_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5F", "+", "scope_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5G", "+", 
       RowBox[{"storage_type", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", "H5IterationResult"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", "index_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5", "+", 
       RowBox[{"iter_order", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5I", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5L", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", 
       RowBox[{"mcdt_search", "_ret", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5O", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5R", "+", "type_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5S", "+", "class_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5S", "+", "seloper_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5S", "+", "sel_type"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "bkg_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "class_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "cmd_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", 
       RowBox[{"conv_except", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", 
       RowBox[{"conv_ret", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "cset_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "direction_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "norm_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "order_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "pad_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "pers_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "sign_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5T", "+", "str_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"cb_return", "_t"}]}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", "EDC_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", "filter_t"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{
     RowBox[{"enum", " "}], "\<\"HDF.PInvoke.\"\>", 
     StyleBox[
      RowBox[{"H5Z", "+", 
       RowBox[{"SO_scale", "_type", "_t"}]}],
      FontWeight->"Bold"]}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178077245903`*^9},
 AutoSpacing->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"InputForm", "[", "%", "]"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"RowBox", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<enum \>\"", ",", "\"\<\\\"HDF.PInvoke.\\\"\>\"", ",", 
        RowBox[{"StyleBox", "[", 
         RowBox[{
          RowBox[{"item", ":", "_String"}], ",", 
          RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}]}], "]"}]}], "}"}],
       "]"}], "\[RuleDelayed]", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<HDF.PInvoke.\>\"", ",", "item"}], "]"}]}], " ", ",", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"{", "3", "}"}]}], "\[IndentingNewLine]", "]"}], " ", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.67735162650994*^9, 3.677351628010046*^9}, {
   3.6773516702730627`*^9, 3.6773516960649242`*^9}, {3.6773520919367723`*^9, 
   3.6773520996248164`*^9}, {3.6773521756001787`*^9, 
   3.6773524770576515`*^9}, {3.6773525197305794`*^9, 3.6773525590195904`*^9}, 
   3.677352677926027*^9, {3.6773530279164305`*^9, 3.677353030901016*^9}, {
   3.677353099228403*^9, 3.6773530996190567`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"HDF.PInvoke.H5AC+metadata_write_strategy_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>", 
   ",", "\<\"HDF.PInvoke.H5C+cache_flash_incr_mode\"\>", 
   ",", "\<\"HDF.PInvoke.H5C+cache_incr_mode\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+alloc_time_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+chunk_index_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+fill_time_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+fill_value_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+layout_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5D+space_status_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5E+direction_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5E+type_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5F+close_degree_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5F+libver_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5F+mem_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5F+scope_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5G+storage_type_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5+H5IterationResult\"\>", 
   ",", "\<\"HDF.PInvoke.H5+index_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5+iter_order_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5I+type_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5L+type_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5O+type_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5R+type_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5S+class_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5S+sel_type\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+bkg_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+class_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+cmd_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+conv_ret_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+cset_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+direction_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+norm_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+order_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+pad_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+pers_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+sign_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5T+str_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z+cb_return_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z+EDC_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", 
   ",", "\<\"HDF.PInvoke.H5Z+SO_scale_type_t\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6773524287329807`*^9, 3.677352477323296*^9, 3.677352520371249*^9, 
   3.6773525738956437`*^9, 3.6773527892534194`*^9, {3.6773528959692574`*^9, 
   3.6773529190958953`*^9}, 3.677353042573718*^9, {3.677353093212352*^9, 
   3.6773531066976814`*^9}, 3.6773587867974496`*^9, 3.679667378578854*^9, 
   3.6800178077402163`*^9},
 AutoSpacing->False]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Map", "[", "NETTypeInfo", "]"}], "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.677352592947631*^9, 3.677352596994793*^9}}],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5AC+metadata_write_strategy_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5AC+metadata_write_strategy_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5AC+metadata_write_strategy_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
    "const", " ", "\<\"HDF.PInvoke.H5AC+metadata_write_strategy_t\"\>", " ", 
     StyleBox["DISTRIBUTED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
    "const", " ", "\<\"HDF.PInvoke.H5AC+metadata_write_strategy_t\"\>", " ", 
     StyleBox[
      RowBox[{"PROCESS_", "0", "_ONLY"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178077870984`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5C+cache_decr_mode, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>", " ", 
     StyleBox["AGE_OUT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>", " ", 
     StyleBox[
      RowBox[{"AGE_OUT", "_WITH", "_THRESHOLD"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>", " ", 
     StyleBox["OFF",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5C+cache_decr_mode\"\>", " ", 
     StyleBox["THRESHOLD",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017807802721*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5C+cache_flash_incr_mode\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5C+cache_flash_incr_mode\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5C+cache_flash_incr_mode, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
    "const", " ", "\<\"HDF.PInvoke.H5C+cache_flash_incr_mode\"\>", " ", 
     StyleBox["ADD_SPACE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{
    "const", " ", "\<\"HDF.PInvoke.H5C+cache_flash_incr_mode\"\>", " ", 
     StyleBox["OFF",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017807833973*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5C+cache_incr_mode\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5C+cache_incr_mode\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5C+cache_incr_mode, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5C+cache_incr_mode\"\>", " ", 
     StyleBox["OFF",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5C+cache_incr_mode\"\>", " ", 
     StyleBox["THRESHOLD",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178078496*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+alloc_time_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+alloc_time_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+alloc_time_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+alloc_time_t\"\>", " ", 
     StyleBox["DEFAULT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+alloc_time_t\"\>", " ", 
     StyleBox["EARLY",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+alloc_time_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+alloc_time_t\"\>", " ", 
     StyleBox["INCR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+alloc_time_t\"\>", " ", 
     StyleBox["LATE",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178078808517`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+chunk_index_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+chunk_index_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+chunk_index_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+chunk_index_t\"\>", " ", 
     StyleBox["BTREE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+chunk_index_t\"\>", " ", 
     StyleBox["IDX_NTYPES",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017807896495*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+fill_time_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+fill_time_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+fill_time_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_time_t\"\>", " ", 
     StyleBox["ALLOC",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_time_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_time_t\"\>", " ", 
     StyleBox["IFSET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_time_t\"\>", " ", 
     StyleBox["NEVER",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.68001780792773*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+fill_value_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+fill_value_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+fill_value_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_value_t\"\>", " ", 
     StyleBox["DEFAULT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_value_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_value_t\"\>", " ", 
     StyleBox["UNDEFINED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+fill_value_t\"\>", " ", 
     StyleBox["USER_DEFINED",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178079433565`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+layout_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+layout_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+layout_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+layout_t\"\>", " ", 
     StyleBox["CHUNKED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+layout_t\"\>", " ", 
     StyleBox["COMPACT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+layout_t\"\>", " ", 
     StyleBox["CONTIGUOUS",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+layout_t\"\>", " ", 
     StyleBox["LAYOUT_ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+layout_t\"\>", " ", 
     StyleBox["NLAYOUTS",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178079746094`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5D+space_status_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5D+space_status_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5D+space_status_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+space_status_t\"\>", " ", 
     StyleBox["ALLOCATED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+space_status_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+space_status_t\"\>", " ", 
     StyleBox["NOT_ALLOCATED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5D+space_status_t\"\>", " ", 
     StyleBox["PART_ALLOCATED",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808005861*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5E+direction_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5E+direction_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5E+direction_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5E+direction_t\"\>", " ", 
     StyleBox[
      RowBox[{"H5E_WALK", "_DOWNWARD"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5E+direction_t\"\>", " ", 
     StyleBox[
      RowBox[{"H5E_WALK", "_UPWARD"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178080214877`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5E+type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5E+type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5E+type_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5E+type_t\"\>", " ", 
     StyleBox["MAJOR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5E+type_t\"\>", " ", 
     StyleBox["MINOR",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.68001780805274*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5F+close_degree_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5F+close_degree_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5F+close_degree_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+close_degree_t\"\>", " ", 
     StyleBox["DEFAULT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+close_degree_t\"\>", " ", 
     StyleBox["SEMI",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+close_degree_t\"\>", " ", 
     StyleBox["STRONG",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+close_degree_t\"\>", " ", 
     StyleBox["WEAK",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808068365*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5FD+file_image_op_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox["FILE_CLOSE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox["FILE_OPEN",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox["FILE_RESIZE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox["NO_OP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox[
      RowBox[{"PROPERTY_LIST", "_CLOSE"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox[
      RowBox[{"PROPERTY_LIST", "_COPY"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox[
      RowBox[{"PROPERTY_LIST", "_GET"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5FD+file_image_op_t\"\>", " ", 
     StyleBox[
      RowBox[{"PROPERTY_LIST", "_SET"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178080996184`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5F+libver_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5F+libver_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5F+libver_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+libver_t\"\>", " ", 
     StyleBox["EARLIEST",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+libver_t\"\>", " ", 
     StyleBox["LATEST",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.68001780813087*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5F+mem_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5F+mem_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5F+mem_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["BTREE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["DEFAULT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["DRAW",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["GHEAP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["LHEAP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["NOLIST",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["NTYPES",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["OHDR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+mem_t\"\>", " ", 
     StyleBox["SUPER",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178081621227`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5F+scope_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5F+scope_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5F+scope_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+scope_t\"\>", " ", 
     StyleBox["GLOBAL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5F+scope_t\"\>", " ", 
     StyleBox["LOCAL",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808193375*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5G+storage_type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5G+storage_type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5G+storage_type_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5G+storage_type_t\"\>", " ", 
     StyleBox["COMPACT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5G+storage_type_t\"\>", " ", 
     StyleBox["DENSE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5G+storage_type_t\"\>", " ", 
     StyleBox["SYMBOL_TABLE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5G+storage_type_t\"\>", " ", 
     StyleBox["UNKNOWN",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178082246447`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5+H5IterationResult\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5+H5IterationResult\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5+H5IterationResult, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+H5IterationResult\"\>", " ", 
     StyleBox["CONT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+H5IterationResult\"\>", " ", 
     StyleBox["FAILURE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+H5IterationResult\"\>", " ", 
     StyleBox["STOP",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178082402534`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5+index_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5+index_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5+index_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+index_t\"\>", " ", 
     StyleBox["CRT_ORDER",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+index_t\"\>", " ", 
     StyleBox["N",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+index_t\"\>", " ", 
     StyleBox["NAME",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+index_t\"\>", " ", 
     StyleBox["UNKNOWN",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808271506*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5+iter_order_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5+iter_order_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5+iter_order_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+iter_order_t\"\>", " ", 
     StyleBox["DEC",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+iter_order_t\"\>", " ", 
     StyleBox["INC",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+iter_order_t\"\>", " ", 
     StyleBox["N",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+iter_order_t\"\>", " ", 
     StyleBox["NATIVE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5+iter_order_t\"\>", " ", 
     StyleBox["UNKNOWN",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178083027577`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5I+type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5I+type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5I+type_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["ATTR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["BADID",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["DATASET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["DATASPACE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["DATATYPE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["ERROR_CLASS",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["ERROR_MSG",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["ERROR_STACK",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["FILE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["GENPROP_CLS",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["GENPROP_LST",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["GROUP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["NTYPES",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["REFERENCE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["UNINIT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5I+type_t\"\>", " ", 
     StyleBox["VFL",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178083183846`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5L+type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5L+type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5L+type_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox["EXTERNAL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox["HARD",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox["MAX",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5L+type_t\"\>", " ", 
     StyleBox["SOFT",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808349636*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5O+mcdt_search_ret_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>", " ", 
     StyleBox["CONT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+mcdt_search_ret_t\"\>", " ", 
     StyleBox["STOP",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808380889*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5O+type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5O+type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5O+type_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+type_t\"\>", " ", 
     StyleBox["DATASET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+type_t\"\>", " ", 
     StyleBox["GROUP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+type_t\"\>", " ", 
     StyleBox["NAMED_DATATYPE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+type_t\"\>", " ", 
     StyleBox["NTYPES",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5O+type_t\"\>", " ", 
     StyleBox["UNKNOWN",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808396515*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5R+type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5R+type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5R+type_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5R+type_t\"\>", " ", 
     StyleBox["BADTYPE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5R+type_t\"\>", " ", 
     StyleBox["DATASET_REGION",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5R+type_t\"\>", " ", 
     StyleBox["MAXTYPE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5R+type_t\"\>", " ", 
     StyleBox["OBJECT",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178084277673`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5S+class_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5S+class_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5S+class_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+class_t\"\>", " ", 
     StyleBox["NO_CLASS",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+class_t\"\>", " ", 
     StyleBox["NULL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+class_t\"\>", " ", 
     StyleBox["SCALAR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+class_t\"\>", " ", 
     StyleBox["SIMPLE",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178084434104`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5S+seloper_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5S+seloper_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5S+seloper_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["AND",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["APPEND",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["INVALID",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["NOOP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["NOTA",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["NOTB",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["OR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["PREPEND",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["SET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+seloper_t\"\>", " ", 
     StyleBox["XOR",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808474646*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5S+sel_type\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5S+sel_type\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5S+sel_type, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+sel_type\"\>", " ", 
     StyleBox["ALL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+sel_type\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+sel_type\"\>", " ", 
     StyleBox["HYPERSLABS",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+sel_type\"\>", " ", 
     StyleBox["N",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+sel_type\"\>", " ", 
     StyleBox["NONE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5S+sel_type\"\>", " ", 
     StyleBox["POINTS",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808505916*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+bkg_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+bkg_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+bkg_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+bkg_t\"\>", " ", 
     StyleBox["NO",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+bkg_t\"\>", " ", 
     StyleBox["TEMP",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+bkg_t\"\>", " ", 
     StyleBox["YES",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178085215244`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+class_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+class_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+class_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["ARRAY",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["BITFIELD",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["COMPOUND",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["ENUM",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["FLOAT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["INTEGER",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["NCLASSES",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["NO_CLASS",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["OPAQUE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["REFERENCE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["STRING",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["TIME",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+class_t\"\>", " ", 
     StyleBox["VLEN",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178085527763`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+cmd_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+cmd_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+cmd_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cmd_t\"\>", " ", 
     StyleBox["CONV",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cmd_t\"\>", " ", 
     StyleBox["FREE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cmd_t\"\>", " ", 
     StyleBox["INIT",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178085840287`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+conv_except_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+conv_except_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+conv_except_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["NAN",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["NINF",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["PINF",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["PRECISION",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["RANGE_HI",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["RANGE_LOW",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_except_t\"\>", " ", 
     StyleBox["TRUNCATE",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808615281*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+conv_ret_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+conv_ret_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+conv_ret_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_ret_t\"\>", " ", 
     StyleBox["ABORT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_ret_t\"\>", " ", 
     StyleBox["HANDLED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+conv_ret_t\"\>", " ", 
     StyleBox["UNHANDLED",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808630908*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+cset_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+cset_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+cset_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox["ASCII",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "10"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "11"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "12"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "13"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "14"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "2"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "3"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "4"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "5"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "6"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "7"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "8"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "9"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+cset_t\"\>", " ", 
     StyleBox["UTF8",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.68001780866216*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+direction_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+direction_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+direction_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+direction_t\"\>", " ", 
     StyleBox["ASCEND",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+direction_t\"\>", " ", 
     StyleBox["DEFAULT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+direction_t\"\>", " ", 
     StyleBox["DESCEND",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808693412*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+norm_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+norm_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+norm_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+norm_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+norm_t\"\>", " ", 
     StyleBox["IMPLIED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+norm_t\"\>", " ", 
     StyleBox["MSBSET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+norm_t\"\>", " ", 
     StyleBox["NONE",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178087246647`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+order_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+order_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+order_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+order_t\"\>", " ", 
     StyleBox["BE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+order_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+order_t\"\>", " ", 
     StyleBox["LE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+order_t\"\>", " ", 
     StyleBox["MIXED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+order_t\"\>", " ", 
     StyleBox["ONE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+order_t\"\>", " ", 
     StyleBox["VAX",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178087402906`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+pad_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+pad_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+pad_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pad_t\"\>", " ", 
     StyleBox["BACKGROUND",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pad_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pad_t\"\>", " ", 
     StyleBox["NPAD",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pad_t\"\>", " ", 
     StyleBox["ONE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pad_t\"\>", " ", 
     StyleBox["ZERO",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178087715425`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+pers_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+pers_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+pers_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pers_t\"\>", " ", 
     StyleBox["DONTCARE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pers_t\"\>", " ", 
     StyleBox["HARD",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+pers_t\"\>", " ", 
     StyleBox["SOFT",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178088027954`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+sign_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+sign_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+sign_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+sign_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+sign_t\"\>", " ", 
     StyleBox["NONE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+sign_t\"\>", " ", 
     StyleBox["NSGN",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+sign_t\"\>", " ", 
     StyleBox[
      RowBox[{"SGN_", "2"}],
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.6800178088340473`*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5T+str_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5T+str_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5T+str_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox["NULLPAD",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox["NULLTERM",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "10"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "11"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "12"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "13"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "14"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "15"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "3"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "4"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "5"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "6"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "7"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "8"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox[
      RowBox[{"RESERVED_", "9"}],
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5T+str_t\"\>", " ", 
     StyleBox["SPACEPAD",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808849674*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z+cb_return_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z+cb_return_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z+cb_return_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+cb_return_t\"\>", " ", 
     StyleBox["CONT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+cb_return_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+cb_return_t\"\>", " ", 
     StyleBox["FAIL",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+cb_return_t\"\>", " ", 
     StyleBox["NO",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808880926*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z+EDC_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z+EDC_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z+EDC_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+EDC_t\"\>", " ", 
     StyleBox["DISABLE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+EDC_t\"\>", " ", 
     StyleBox["ENABLE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+EDC_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+EDC_t\"\>", " ", 
     StyleBox["NO",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808912178*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z+filter_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z+filter_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z+filter_t, HDF.PInvoke, \
Version=1.8.17.0, Culture=neutral, PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["DEFLATE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["ERROR",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["FLETCHER32",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["MAX",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["NBIT",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["NONE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["RESERVED",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["SCALEOFFSET",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["SHUFFLE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+filter_t\"\>", " ", 
     StyleBox["SZIP",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808943431*^9},
 AutoSpacing->False],

Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Type",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{
     RowBox[{"enum", " "}], 
     StyleBox["\<\"HDF.PInvoke.H5Z+SO_scale_type_t\"\>",
      FontWeight->"Bold"]}]},
   {GridBox[{
      {
       RowBox[{"Inheritance", ":"}]},
      {
       RowBox[{"   ", "   ", "\<\"System.Object\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "\<\"System.ValueType\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "\<\"System.Enum\"\>"}]},
      {
       RowBox[{"   ", "   ", "   ", "   ", "   ", 
        StyleBox["\<\"HDF.PInvoke.H5Z+SO_scale_type_t\"\>",
         FontWeight->"Bold"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}]},
   {
    RowBox[{
     RowBox[{"Interfaces", " ", 
      RowBox[{"Implemented", ":", " ", "\<\"IComparable\"\>"}]}], ",", 
     " ", "\<\"IFormattable\"\>", ",", " ", "\<\"IConvertible\"\>"}]},
   {"\<\"Assembly-Qualified Name: HDF.PInvoke.H5Z+SO_scale_type_t, \
HDF.PInvoke, Version=1.8.17.0, Culture=neutral, \
PublicKeyToken=18793c1fcffe58a3\"\>"},
   {"\<\"Assembly Location: \
C:\\\\Users\\\\smartin\\\\Desktop\\\\HDF5WrappersForMathematica  Ver 12 \
August 2016\\\\HDF5.PInvoke\\\\HDF.PInvoke.dll\"\>"},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Fields",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+SO_scale_type_t\"\>", " ", 
     StyleBox["FLOAT_DSCALE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+SO_scale_type_t\"\>", " ", 
     StyleBox["FLOAT_ESCALE",
      FontWeight->"Bold"]}]},
   {
    RowBox[{"const", " ", "\<\"HDF.PInvoke.H5Z+SO_scale_type_t\"\>", " ", 
     StyleBox["INT",
      FontWeight->"Bold"]}]},
   {""},
   {Cell[BoxData[
     RowBox[{
      RowBox[{"\[FilledCircle]", " "}], 
      StyleBox["Methods",
       FontSize->18,
       FontWeight->"Bold",
       FontSlant->"Italic"]}]]]},
   {
    RowBox[{"\<\"int\"\>", " ", 
     StyleBox["CompareTo",
      FontWeight->"Bold"], "\<\"(object target)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object obj)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["Equals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["Format",
      FontWeight->
       "Bold"], "\<\"(Type enumType, object value, string format)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"int\"\>", " ", 
     StyleBox["GetHashCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string\"\>", " ", 
     StyleBox["GetName",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"string[]\"\>", " ", 
     StyleBox["GetNames",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"Type\"\>", " ", 
     StyleBox["GetType",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"TypeCode\"\>", " ", 
     StyleBox["GetTypeCode",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Type\"\>", " ", 
     StyleBox["GetUnderlyingType",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"Array\"\>", " ", 
     StyleBox["GetValues",
      FontWeight->"Bold"], "\<\"(Type enumType)\"\>"}]},
   {
    RowBox[{"\<\"bool\"\>", " ", 
     StyleBox["HasFlag",
      FontWeight->"Bold"], "\<\"(Enum flag)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["IsDefined",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->"Bold"], "\<\"(Type enumType, string value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["Parse",
      FontWeight->
       "Bold"], "\<\"(Type enumType, string value, bool ignoreCase)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["ReferenceEquals",
      FontWeight->"Bold"], "\<\"(object objA, object objB)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, object value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, sbyte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, int value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, byte value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned short value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, long value)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"object\"\>", " ", 
     StyleBox["ToObject",
      FontWeight->"Bold"], "\<\"(Type enumType, unsigned long value)\"\>"}]},
   {
    RowBox[{"virtual", " ", "\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"()\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->
       "Bold"], "\<\"(string format, IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(string format)\"\>"}]},
   {
    RowBox[{"\<\"string\"\>", " ", 
     StyleBox["ToString",
      FontWeight->"Bold"], "\<\"(IFormatProvider provider)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->"Bold"], "\<\"(string value, out TEnum result)\"\>"}]},
   {
    RowBox[{"static", " ", "\<\"bool\"\>", " ", 
     StyleBox["TryParse",
      FontWeight->
       "Bold"], "\<\"(string value, bool ignoreCase, out TEnum result)\"\>"}]}
  },
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxItemSize->{
   "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.2}}, 
    "RowsIndexed" -> {}}]], "Output",
 CellChangeTimes->{3.680017808959057*^9},
 AutoSpacing->False],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", 
   "Null", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.6796673787194896`*^9, 3.680017808974683*^9},
 AutoSpacing->False]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]]
},
WindowSize->{1357, 841},
WindowMargins->{{56, Automatic}, {Automatic, 47}},
ShowSelection->True,
Magnification:>FEPrivate`If[
  FEPrivate`Equal[FEPrivate`$VersionNumber, 6.], 1.5, 1.5 Inherited],
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 209, 3, 84, "Subtitle"],
Cell[CellGroupData[{
Cell[813, 29, 98, 1, 106, "Section"],
Cell[914, 32, 306, 8, 45, "Text"],
Cell[1223, 42, 912, 18, 74, "Text"],
Cell[2138, 62, 117, 1, 45, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2292, 68, 276, 3, 106, "Section"],
Cell[CellGroupData[{
Cell[2593, 75, 163, 2, 72, "Subsection"],
Cell[2759, 79, 103, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[2887, 84, 126, 2, 45, "Input"],
Cell[3016, 88, 1618, 22, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4671, 115, 102, 1, 45, "Input"],
Cell[4776, 118, 657, 9, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5470, 132, 233, 5, 45, "Input"],
Cell[5706, 139, 1785, 25, 45, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[7540, 170, 103, 1, 72, "Subsection"],
Cell[CellGroupData[{
Cell[7668, 175, 1021, 17, 45, "Input"],
Cell[8692, 194, 577, 9, 45, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[9318, 209, 158, 2, 72, "Subsection"],
Cell[9479, 213, 743, 15, 102, "Text"],
Cell[10225, 230, 143, 2, 45, "Input"],
Cell[CellGroupData[{
Cell[10393, 236, 181, 3, 45, "Input"],
Cell[10577, 241, 376, 7, 45, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[11014, 255, 345, 7, 106, "Section"],
Cell[CellGroupData[{
Cell[11384, 266, 122, 1, 72, "Subsection"],
Cell[11509, 269, 125, 1, 100, "Text"],
Cell[CellGroupData[{
Cell[11659, 274, 133, 2, 100, "Input"],
Cell[11795, 278, 766696, 14533, 70, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[778540, 14817, 272, 3, 58, "Subsection"],
Cell[CellGroupData[{
Cell[778837, 14824, 102, 1, 58, "Subsubsection"],
Cell[CellGroupData[{
Cell[778964, 14829, 229, 4, 45, "Input"],
Cell[779196, 14835, 3642, 137, 827, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[782887, 14978, 172, 2, 58, "Subsubsection"],
Cell[CellGroupData[{
Cell[783084, 14984, 141, 2, 337, "Input"],
Cell[783228, 14988, 31587, 1189, 70, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[814888, 16185, 471, 8, 169, "Section"],
Cell[CellGroupData[{
Cell[815384, 16197, 95, 1, 546, "Subsection"],
Cell[CellGroupData[{
Cell[815504, 16202, 204, 4, 337, "Input"],
Cell[815711, 16208, 3644, 137, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[819392, 16350, 1098, 24, 2107, "Input"],
Cell[820493, 16376, 1058, 17, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[821588, 16398, 160, 3, 337, "Input"],
Cell[821751, 16403, 3064, 98, 70, "Output"],
Cell[824818, 16503, 4825, 153, 70, "Output"],
Cell[829646, 16658, 13487, 371, 70, "Output"],
Cell[843136, 17031, 3172, 104, 70, "Output"],
Cell[846311, 17137, 2675, 86, 70, "Output"],
Cell[848989, 17225, 8542, 257, 70, "Output"],
Cell[857534, 17484, 2917, 92, 70, "Output"],
Cell[860454, 17578, 37417, 1301, 70, "Output"],
Cell[897874, 18881, 9500, 297, 70, "Output"],
Cell[907377, 19180, 2681, 86, 70, "Output"],
Cell[910061, 19268, 5502, 162, 70, "Output"],
Cell[915566, 19432, 6332, 196, 70, "Output"],
Cell[921901, 19630, 14254, 390, 70, "Output"],
Cell[936158, 20022, 2679, 86, 70, "Output"],
Cell[938840, 20110, 12431, 371, 70, "Output"],
Cell[951274, 20483, 42862, 1281, 70, "Output"],
Cell[994139, 21766, 3435, 112, 70, "Output"],
Cell[997577, 21880, 4679, 147, 70, "Output"],
Cell[1002259, 22029, 8961, 270, 70, "Output"],
Cell[1011223, 22301, 32653, 1060, 70, "Output"],
Cell[1043879, 23363, 3865, 124, 70, "Output"],
Cell[1047747, 23489, 2904, 91, 70, "Output"],
Cell[1050654, 23582, 446, 9, 70, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1051149, 23597, 145, 2, 438, "Subsection"],
Cell[CellGroupData[{
Cell[1051319, 23603, 253, 4, 337, "Input"],
Cell[1051575, 23609, 721, 19, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1052333, 23633, 1150, 24, 2107, "Input"],
Cell[1053486, 23659, 303, 6, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1053826, 23670, 160, 3, 337, "Input"],
Cell[1053989, 23675, 202, 4, 70, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1054240, 23685, 147, 2, 438, "Subsection"],
Cell[CellGroupData[{
Cell[1054412, 23691, 307, 5, 337, "Input"],
Cell[1054722, 23698, 12198, 451, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1066957, 24154, 1147, 24, 2107, "Input"],
Cell[1068107, 24180, 3474, 73, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1071618, 24258, 160, 3, 337, "Input"],
Cell[1071781, 24263, 6620, 234, 70, "Output"],
Cell[1078404, 24499, 2930, 92, 70, "Output"],
Cell[1081337, 24593, 6999, 204, 70, "Output"],
Cell[1088339, 24799, 3106, 100, 70, "Output"],
Cell[1091448, 24901, 7206, 210, 70, "Output"],
Cell[1098657, 25113, 6933, 203, 70, "Output"],
Cell[1105593, 25318, 6894, 201, 70, "Output"],
Cell[1112490, 25521, 7265, 212, 70, "Output"],
Cell[1119758, 25735, 6885, 200, 70, "Output"],
Cell[1126646, 25937, 7130, 208, 70, "Output"],
Cell[1133779, 26147, 7148, 208, 70, "Output"],
Cell[1140930, 26357, 7254, 212, 70, "Output"],
Cell[1148187, 26571, 7174, 209, 70, "Output"],
Cell[1155364, 26782, 6936, 202, 70, "Output"],
Cell[1162303, 26986, 3355, 112, 70, "Output"],
Cell[1165661, 27100, 6845, 200, 70, "Output"],
Cell[1172509, 27302, 7154, 209, 70, "Output"],
Cell[1179666, 27513, 3585, 113, 70, "Output"],
Cell[1183254, 27628, 7853, 229, 70, "Output"],
Cell[1191110, 27859, 2939, 93, 70, "Output"],
Cell[1194052, 27954, 2933, 92, 70, "Output"],
Cell[1196988, 28048, 6861, 200, 70, "Output"],
Cell[1203852, 28250, 7705, 228, 70, "Output"],
Cell[1211560, 28480, 6853, 200, 70, "Output"],
Cell[1218416, 28682, 3114, 100, 70, "Output"],
Cell[1221533, 28784, 7162, 209, 70, "Output"],
Cell[1228698, 28995, 7031, 205, 70, "Output"],
Cell[1235732, 29202, 2907, 92, 70, "Output"],
Cell[1238642, 29296, 7094, 208, 70, "Output"],
Cell[1245739, 29506, 7254, 212, 70, "Output"],
Cell[1252996, 29720, 8622, 256, 70, "Output"],
Cell[1261621, 29978, 3716, 120, 70, "Output"],
Cell[1265340, 30100, 3214, 104, 70, "Output"],
Cell[1268557, 30206, 2904, 92, 70, "Output"],
Cell[1271464, 30300, 7218, 212, 70, "Output"],
Cell[1278685, 30514, 3335, 108, 70, "Output"],
Cell[1282023, 30624, 2930, 93, 70, "Output"],
Cell[1284956, 30719, 3128, 101, 70, "Output"],
Cell[1288087, 30822, 3829, 128, 70, "Output"],
Cell[1291919, 30952, 7035, 205, 70, "Output"],
Cell[1298957, 31159, 2925, 92, 70, "Output"],
Cell[1301885, 31253, 7233, 212, 70, "Output"],
Cell[1309121, 31467, 7109, 208, 70, "Output"],
Cell[1316233, 31677, 7106, 208, 70, "Output"],
Cell[1323342, 31887, 7869, 232, 70, "Output"],
Cell[1331214, 32121, 7360, 216, 70, "Output"],
Cell[1338577, 32339, 6959, 204, 70, "Output"],
Cell[1345539, 32545, 3105, 100, 70, "Output"],
Cell[1348647, 32647, 8242, 244, 70, "Output"],
Cell[1356892, 32893, 6962, 204, 70, "Output"],
Cell[1363857, 33099, 7547, 220, 70, "Output"],
Cell[1371407, 33321, 7001, 204, 70, "Output"],
Cell[1378411, 33527, 8925, 269, 70, "Output"],
Cell[1387339, 33798, 7006, 204, 70, "Output"],
Cell[1394348, 34004, 2871, 92, 70, "Output"],
Cell[1397222, 34098, 7095, 208, 70, "Output"],
Cell[1404320, 34308, 7340, 216, 70, "Output"],
Cell[1411663, 34526, 7210, 212, 70, "Output"],
Cell[1418876, 34740, 6970, 204, 70, "Output"],
Cell[1425849, 34946, 7114, 209, 70, "Output"],
Cell[1432966, 35157, 9039, 273, 70, "Output"],
Cell[1442008, 35432, 7125, 208, 70, "Output"],
Cell[1449136, 35642, 3560, 116, 70, "Output"],
Cell[1452699, 35760, 7088, 208, 70, "Output"],
Cell[1459790, 35970, 7875, 232, 70, "Output"],
Cell[1467668, 36204, 7037, 205, 70, "Output"],
Cell[1474708, 36411, 1050, 17, 70, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1475807, 36434, 197, 3, 438, "Subsection"],
Cell[CellGroupData[{
Cell[1476029, 36441, 358, 6, 337, "Input"],
Cell[1476390, 36449, 9322, 337, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1485749, 36791, 1149, 24, 2107, "Input"],
Cell[1486901, 36817, 2672, 53, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1489610, 36875, 160, 3, 337, "Input"],
Cell[1489773, 36880, 8211, 243, 70, "Output"],
Cell[1497987, 37125, 8146, 241, 70, "Output"],
Cell[1506136, 37368, 8153, 240, 70, "Output"],
Cell[1514292, 37610, 8229, 244, 70, "Output"],
Cell[1522524, 37856, 8030, 238, 70, "Output"],
Cell[1530557, 38096, 8165, 242, 70, "Output"],
Cell[1538725, 38340, 8173, 241, 70, "Output"],
Cell[1546901, 38583, 8191, 242, 70, "Output"],
Cell[1555095, 38827, 8245, 243, 70, "Output"],
Cell[1563343, 39072, 8223, 243, 70, "Output"],
Cell[1571569, 39317, 8051, 239, 70, "Output"],
Cell[1579623, 39558, 8045, 239, 70, "Output"],
Cell[1587671, 39799, 7991, 238, 70, "Output"],
Cell[1595665, 40039, 8082, 239, 70, "Output"],
Cell[1603750, 40280, 8182, 242, 70, "Output"],
Cell[1611935, 40524, 8154, 241, 70, "Output"],
Cell[1620092, 40767, 8222, 242, 70, "Output"],
Cell[1628317, 41011, 8194, 241, 70, "Output"],
Cell[1636514, 41254, 8188, 242, 70, "Output"],
Cell[1644705, 41498, 8154, 241, 70, "Output"],
Cell[1652862, 41741, 8414, 245, 70, "Output"],
Cell[1661279, 41988, 8386, 245, 70, "Output"],
Cell[1669668, 42235, 8180, 242, 70, "Output"],
Cell[1677851, 42479, 8182, 242, 70, "Output"],
Cell[1686036, 42723, 8152, 241, 70, "Output"],
Cell[1694191, 42966, 8226, 242, 70, "Output"],
Cell[1702420, 43210, 8196, 241, 70, "Output"],
Cell[1710619, 43453, 8230, 242, 70, "Output"],
Cell[1718852, 43697, 8201, 242, 70, "Output"],
Cell[1727056, 43941, 8058, 238, 70, "Output"],
Cell[1735117, 44181, 8036, 238, 70, "Output"],
Cell[1743156, 44421, 8176, 242, 70, "Output"],
Cell[1751335, 44665, 8126, 240, 70, "Output"],
Cell[1759464, 44907, 8098, 240, 70, "Output"],
Cell[1767565, 45149, 8146, 242, 70, "Output"],
Cell[1775714, 45393, 8106, 240, 70, "Output"],
Cell[1783823, 45635, 8065, 239, 70, "Output"],
Cell[1791891, 45876, 8090, 240, 70, "Output"],
Cell[1799984, 46118, 8116, 241, 70, "Output"],
Cell[1808103, 46361, 8138, 241, 70, "Output"],
Cell[1816244, 46604, 8334, 243, 70, "Output"],
Cell[1824581, 46849, 8365, 245, 70, "Output"],
Cell[1832949, 47096, 8124, 241, 70, "Output"],
Cell[1841076, 47339, 8230, 241, 70, "Output"],
Cell[1849309, 47582, 8250, 243, 70, "Output"],
Cell[1857562, 47827, 8124, 241, 70, "Output"],
Cell[1865689, 48070, 773, 13, 70, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1866511, 48089, 241, 3, 438, "Subsection"],
Cell[CellGroupData[{
Cell[1866777, 48096, 400, 6, 337, "Input"],
Cell[1867180, 48104, 8592, 321, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1875809, 48430, 1197, 25, 2107, "Input"],
Cell[1877009, 48457, 2574, 54, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1879620, 48516, 160, 3, 337, "Input"],
Cell[1879783, 48521, 6999, 204, 70, "Output"],
Cell[1886785, 48727, 7204, 210, 70, "Output"],
Cell[1893992, 48939, 6934, 203, 70, "Output"],
Cell[1900929, 49144, 6892, 201, 70, "Output"],
Cell[1907824, 49347, 7267, 212, 70, "Output"],
Cell[1915094, 49561, 6885, 200, 70, "Output"],
Cell[1921982, 49763, 7127, 208, 70, "Output"],
Cell[1929112, 49973, 7150, 208, 70, "Output"],
Cell[1936265, 50183, 7254, 212, 70, "Output"],
Cell[1943522, 50397, 7172, 209, 70, "Output"],
Cell[1950697, 50608, 6936, 202, 70, "Output"],
Cell[1957636, 50812, 6844, 200, 70, "Output"],
Cell[1964483, 51014, 7152, 209, 70, "Output"],
Cell[1971638, 51225, 7853, 229, 70, "Output"],
Cell[1979494, 51456, 6858, 200, 70, "Output"],
Cell[1986355, 51658, 7705, 228, 70, "Output"],
Cell[1994063, 51888, 6851, 200, 70, "Output"],
Cell[2000917, 52090, 7164, 209, 70, "Output"],
Cell[2008084, 52301, 7033, 205, 70, "Output"],
Cell[2015120, 52508, 7094, 208, 70, "Output"],
Cell[2022217, 52718, 7254, 212, 70, "Output"],
Cell[2029474, 52932, 8622, 256, 70, "Output"],
Cell[2038099, 53190, 7216, 212, 70, "Output"],
Cell[2045318, 53404, 7035, 205, 70, "Output"],
Cell[2052356, 53611, 7231, 212, 70, "Output"],
Cell[2059590, 53825, 7109, 208, 70, "Output"],
Cell[2066702, 54035, 7106, 208, 70, "Output"],
Cell[2073811, 54245, 7869, 232, 70, "Output"],
Cell[2081683, 54479, 7358, 216, 70, "Output"],
Cell[2089044, 54697, 6959, 204, 70, "Output"],
Cell[2096006, 54903, 8244, 244, 70, "Output"],
Cell[2104253, 55149, 6962, 204, 70, "Output"],
Cell[2111218, 55355, 7545, 220, 70, "Output"],
Cell[2118766, 55577, 6999, 204, 70, "Output"],
Cell[2125768, 55783, 8922, 269, 70, "Output"],
Cell[2134693, 56054, 7004, 204, 70, "Output"],
Cell[2141700, 56260, 7097, 208, 70, "Output"],
Cell[2148800, 56470, 7342, 216, 70, "Output"],
Cell[2156145, 56688, 7212, 212, 70, "Output"],
Cell[2163360, 56902, 6972, 204, 70, "Output"],
Cell[2170335, 57108, 7114, 209, 70, "Output"],
Cell[2177452, 57319, 9037, 273, 70, "Output"],
Cell[2186492, 57594, 7123, 208, 70, "Output"],
Cell[2193618, 57804, 7086, 208, 70, "Output"],
Cell[2200707, 58014, 7876, 232, 70, "Output"],
Cell[2208586, 58248, 7037, 205, 70, "Output"],
Cell[2215626, 58455, 773, 13, 70, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]]
}
]
*)

